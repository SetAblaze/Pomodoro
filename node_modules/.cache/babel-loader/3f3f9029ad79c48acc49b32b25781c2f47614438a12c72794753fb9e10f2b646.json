{"ast":null,"code":"import { M as MessageNames, d as __awaiter, e as __generator, c as createNanoEvents, b as __assign, p as proto, a as __rest, _ as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-4aa98dc6.js';\nvar createClient = function (protocol, provideMeta) {\n  if (provideMeta === void 0) {\n    provideMeta = undefined;\n  }\n  var _a = createNanoEvents(),\n    on = _a.on,\n    emit = _a.emit;\n  /** ждет ответ бека и возвращает данные из этого ответа */\n  var waitForAnswer = function (messageId) {\n    return new Promise(function (resolve) {\n      var off = on('systemMessage', function (systemMessageData, originalMessage) {\n        if (originalMessage.messageId === messageId && (originalMessage.messageName === MessageNames.ANSWER_TO_USER || originalMessage.messageName === MessageNames.DO_NOTHING)) {\n          off();\n          resolve(systemMessageData);\n        }\n      });\n    });\n  };\n  /** отправляет произвольный systemMessage, не подкладывает мету */\n  var sendData = function (data, messageName) {\n    if (messageName === void 0) {\n      messageName = '';\n    }\n    var messageId = protocol.getMessageId();\n    protocol.sendSystemMessage({\n      data: data,\n      messageName: messageName\n    }, true, messageId);\n    return messageId;\n  };\n  /** отправляет cancel на сообщение */\n  var sendCancel = function (messageId) {\n    protocol.sendCancel({}, true, messageId);\n  };\n  /** отправляет приветствие */\n  var sendOpenAssistant = function (_a) {\n    var isFirstSession = (_a === void 0 ? {\n      isFirstSession: false\n    } : _a).isFirstSession;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data, meta, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            data = isFirstSession ? {\n              is_first_session: true\n            } : {};\n            if (!provideMeta) return [3 /*break*/, 2];\n            return [4 /*yield*/, provideMeta()];\n          case 1:\n            _b = _c.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _b = {};\n            _c.label = 3;\n          case 3:\n            meta = _b;\n            return [2 /*return*/, waitForAnswer(sendData(__assign(__assign({}, meta), data), 'OPEN_ASSISTANT'))];\n        }\n      });\n    });\n  };\n  /** вызывает sendSystemMessage, куда подкладывает мету */\n  var sendMeta = function (sendSystemMessage) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var meta, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!provideMeta) return [3 /*break*/, 2];\n            return [4 /*yield*/, provideMeta()];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = {};\n            _b.label = 3;\n          case 3:\n            meta = _a;\n            if (Object.keys(meta).length) {\n              sendSystemMessage({\n                data: meta,\n                messageName: ''\n              }, false);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /** отправляет server_action и мету */\n  var sendServerAction = function (serverAction, appInfo, messageName) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var messageId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            messageId = protocol.getMessageId();\n            // мету и server_action отправляем в одном systemMessage\n            return [4 /*yield*/, sendMeta(function (_a) {\n              var data = _a.data;\n              protocol.sendSystemMessage({\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                data: __assign(__assign({}, data), {\n                  app_info: appInfo,\n                  server_action: serverAction\n                }),\n                messageName: messageName || 'SERVER_ACTION'\n              }, true, messageId);\n            })];\n          case 1:\n            // мету и server_action отправляем в одном systemMessage\n            _a.sent();\n            return [2 /*return*/, messageId];\n        }\n      });\n    });\n  };\n  /** отправляет текст и текущую мету */\n  var sendText = function (text, isSsml, shouldSendDisableDubbing) {\n    if (isSsml === void 0) {\n      isSsml = false;\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (text.trim() === '') {\n          return [2 /*return*/, undefined];\n        }\n        return [2 /*return*/, protocol.batch(function (_a) {\n          var sendSystemMessage = _a.sendSystemMessage,\n            clientSendText = _a.sendText,\n            sendSettings = _a.sendSettings,\n            messageId = _a.messageId;\n          return __awaiter(void 0, void 0, void 0, function () {\n            var prevDubbing, sendDisableDubbing;\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                case 1:\n                  _b.sent();\n                  prevDubbing = protocol.configuration.settings.dubbing;\n                  sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                  if (!sendDisableDubbing) return [3 /*break*/, 3];\n                  return [4 /*yield*/, sendSettings({\n                    dubbing: -1\n                  }, false)];\n                case 2:\n                  _b.sent();\n                  _b.label = 3;\n                case 3:\n                  isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n                  if (sendDisableDubbing) {\n                    sendSettings({\n                      dubbing: prevDubbing\n                    });\n                  }\n                  return [2 /*return*/, messageId];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n   * отправляет мету */\n  var createVoiceStream = function (callback) {\n    return protocol.batch(function (_a) {\n      var sendSystemMessage = _a.sendSystemMessage,\n        sendVoice = _a.sendVoice,\n        messageId = _a.messageId;\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4 /*yield*/, callback({\n                sendVoice: sendVoice,\n                messageId: messageId,\n                onMessage: function (cb) {\n                  return protocol.on('incoming', cb);\n                }\n              })];\n            case 1:\n              _b.sent();\n              sendMeta(sendSystemMessage);\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  var off = protocol.on('incoming', function (message) {\n    var _a;\n    if (message.voice) {\n      emit('voice', message.voice.data || new Uint8Array(), message);\n    }\n    if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n      emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n    }\n    if (message.status) {\n      emit('status', message.status, message);\n    }\n  });\n  return {\n    destroy: function () {\n      off();\n    },\n    createVoiceStream: createVoiceStream,\n    sendData: sendData,\n    sendMeta: sendMeta,\n    sendOpenAssistant: sendOpenAssistant,\n    sendServerAction: sendServerAction,\n    sendText: sendText,\n    sendCancel: sendCancel,\n    on: on,\n    waitForAnswer: waitForAnswer\n  };\n};\nvar createClientMethods = function (_a) {\n  var getMessageId = _a.getMessageId,\n    sendMessage = _a.sendMessage;\n  var send = function (_a) {\n    var payload = _a.payload,\n      messageId = _a.messageId,\n      other = __rest(_a, [\"payload\", \"messageId\"]);\n    sendMessage(__assign(__assign(__assign({\n      messageName: ''\n    }, payload), {\n      messageId: messageId\n    }), other));\n  };\n  var sendDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        device: proto.Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendInitialSettings = function (data, last, messageId, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        initialSettings: proto.InitialSettings.create(data),\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var sendCancel = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        cancel: proto.Cancel.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendLegacyDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        legacyDevice: proto.LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendSettings = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        settings: proto.Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendText = function (data, params, type, messageId) {\n    var _a;\n    if (params === void 0) {\n      params = {};\n    }\n    if (type === void 0) {\n      type = '';\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var text = type ? {\n      data: data,\n      type: type\n    } : {\n      data: data\n    };\n    send(__assign({\n      payload: {\n        text: proto.Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId: messageId\n    }, params));\n  };\n  var sendSystemMessage = function (_a, last, messageId, params) {\n    var data = _a.data,\n      _b = _a.messageName,\n      mesName = _b === void 0 ? '' : _b;\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    send({\n      payload: __assign({\n        systemMessage: proto.SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var sendVoice = function (data, last, messageId, mesName, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        voice: proto.Voice.create({\n          data: new Uint8Array(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var batch = function (cb) {\n    var batchingMessageId = getMessageId();\n    var lastMessageSent = false;\n    var checkLastMessageStatus = function (last) {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n    var upgradedSendText = function () {\n      var _a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        _a[_i] = arguments[_i];\n      }\n      var data = _a[0],\n        params = _a[1],\n        type = _a[2];\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n    var upgradedSendSystemMessage = function (data, last, params) {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId, params);\n    };\n    var upgradedSendVoice = function (data, last, mesName, params) {\n      checkLastMessageStatus(last);\n      return sendVoice(data, last, batchingMessageId, mesName, params);\n    };\n    var upgradedSendSettings = function (data, last, messageId) {\n      checkLastMessageStatus(last);\n      return sendSettings(data, last, messageId);\n    };\n    return cb({\n      sendText: upgradedSendText,\n      sendSystemMessage: upgradedSendSystemMessage,\n      sendVoice: upgradedSendVoice,\n      sendSettings: upgradedSendSettings,\n      messageId: batchingMessageId\n    });\n  };\n  return {\n    sendDevice: sendDevice,\n    sendInitialSettings: sendInitialSettings,\n    sendCancel: sendCancel,\n    sendLegacyDevice: sendLegacyDevice,\n    sendSettings: sendSettings,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    batch: batch\n  };\n};\nvar safeJSONParse = function (str, defaultValue) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return defaultValue;\n  }\n};\nvar compileBasePayload = function (_a) {\n  var userId = _a.userId,\n    token = _a.token,\n    userChannel = _a.userChannel,\n    version = _a.version,\n    messageName = _a.messageName,\n    vpsToken = _a.vpsToken;\n  if (version < 3) {\n    return {\n      userId: userId,\n      token: token,\n      userChannel: userChannel,\n      messageName: messageName,\n      vpsToken: vpsToken,\n      version: version\n    };\n  }\n  return {\n    token: token,\n    messageName: messageName,\n    version: version\n  };\n};\nvar appendHeader = function (uint8Array) {\n  // Добавляем 4 байта в начало с длинной сообщения\n  var arrayBuffer = new ArrayBuffer(4);\n  var dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, uint8Array.length, true);\n  var newUint8Array = new Uint8Array(4 + uint8Array.length);\n  newUint8Array.set(new Uint8Array(arrayBuffer));\n  newUint8Array.set(uint8Array, 4);\n  return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n  // Убираем 4 байта в начале с длинной сообщения\n  var newUint8Array = new Uint8Array(uint8Array).slice(4);\n  return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n  var logger = _a.logger,\n    getToken = _a.getToken,\n    params = __rest(_a, [\"logger\", \"getToken\"]);\n  var configuration = __assign(__assign({}, params), {\n    token: ''\n  });\n  var url = configuration.url,\n    userId = configuration.userId,\n    userChannel = configuration.userChannel,\n    locale = configuration.locale,\n    device = configuration.device,\n    settings = configuration.settings,\n    legacyDevice = configuration.legacyDevice,\n    version = configuration.version,\n    messageName = configuration.messageName,\n    vpsToken = configuration.vpsToken,\n    meta = configuration.meta;\n  var basePayload = compileBasePayload({\n    userId: userId,\n    token: '',\n    messageName: messageName,\n    vpsToken: vpsToken,\n    userChannel: userChannel,\n    version: version\n  });\n  var _b = createNanoEvents(),\n    on = _b.on,\n    emit = _b.emit;\n  var subscriptions = [];\n  var messageQueue = [];\n  var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n  var currentSettings = {\n    device: device,\n    legacyDevice: legacyDevice,\n    settings: settings,\n    locale: locale\n  };\n  var currentMessageId = Date.now();\n  var status = 'closed';\n  var destroyed = false;\n  var clearReadyTimer; // ид таймера установки состояния ready\n  var getMessageId = function () {\n    return currentMessageId++;\n  };\n  var send = function (message) {\n    var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'outcoming',\n      message: createdMessage\n    });\n    var encodedMessage = proto.Message.encode(createdMessage).finish();\n    var encodedMessageWithHeader = appendHeader(encodedMessage);\n    transport.send(encodedMessageWithHeader);\n    emit('outcoming', createdMessage);\n  };\n  var sendMessage = function (message) {\n    // отправляем инициализационные сообщения или все, когда сессия = ready\n    if (status === 'ready' || typeof initMessageId !== undefined && message.messageId === initMessageId) {\n      send(message);\n    } else {\n      // накапливаем сообщения, отправим после успешного коннекта\n      messageQueue.push(message);\n      if (status === 'closed' && !destroyed) {\n        transport.open(url);\n      }\n    }\n  };\n  var _c = createClientMethods({\n      getMessageId: getMessageId,\n      sendMessage: sendMessage\n    }),\n    sendDeviceOriginal = _c.sendDevice,\n    sendInitialSettingsOriginal = _c.sendInitialSettings,\n    sendCancel = _c.sendCancel,\n    sendLegacyDeviceOriginal = _c.sendLegacyDevice,\n    sendSettingsOriginal = _c.sendSettings,\n    sendText = _c.sendText,\n    sendSystemMessage = _c.sendSystemMessage,\n    sendVoice = _c.sendVoice,\n    batch = _c.batch;\n  var sendDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      device: data\n    });\n    return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var sendInitialSettings = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (data.device && data.settings) {\n      currentSettings = __assign(__assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n    return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var sendLegacyDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n  var updateDefaults = function (obj) {\n    Object.assign(basePayload, obj);\n    Object.assign(configuration, obj);\n  };\n  var updateDevice = function (obj) {\n    var _a, _b;\n    if (obj) {\n      var additionalInfo = obj.additionalInfo,\n        deviceOptions = __rest(obj, [\"additionalInfo\"]);\n      var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {}) : {};\n      var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n      currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), {\n        additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo))\n      });\n    }\n  };\n  var updateSettings = function (obj) {\n    Object.assign(currentSettings.settings, obj);\n    if (status === 'connected' || status === 'ready') {\n      sendSettingsOriginal(obj);\n    }\n  };\n  subscriptions.push(transport.on('connecting', function () {\n    status = 'connecting';\n  }));\n  subscriptions.push(transport.on('close', function () {\n    status = 'closed';\n  }));\n  subscriptions.push(transport.on('ready', function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, _b, _c, _d, e_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 2,, 3]);\n            _b = (_a = Object).assign;\n            _c = [basePayload];\n            _d = {};\n            return [4 /*yield*/, getToken()];\n          case 1:\n            _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _e.sent();\n            emit('error', {\n              type: 'GET_TOKEN_ERROR',\n              message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message\n            });\n            return [2 /*return*/];\n          case 3:\n            Object.assign(configuration, {\n              token: basePayload.token\n            });\n            initMessageId = getMessageId();\n            if (version < 3) {\n              if (version === 1 && currentSettings.legacyDevice) {\n                sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n              } else if (version === 2 && currentSettings.device) {\n                sendDevice(currentSettings.device, false, initMessageId);\n              }\n              sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n            } else {\n              sendInitialSettings({\n                userId: userId,\n                userChannel: userChannel,\n                device: currentSettings.device,\n                settings: currentSettings.settings,\n                locale: version > 3 ? currentSettings.locale : undefined\n              }, true, initMessageId, {\n                meta: meta\n              });\n            }\n            status = 'connected';\n            clearTimeout(clearReadyTimer);\n            /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n            /// т.к бек может разрывать сокет, если с settings что-то не так\n            clearReadyTimer = window.setTimeout(function () {\n              if (status !== 'connected') {\n                return;\n              }\n              status = 'ready';\n              while (messageQueue.length > 0) {\n                var message = messageQueue.shift();\n                if (message) {\n                  send(message);\n                }\n              }\n              emit('ready');\n            }, 500);\n            logger === null || logger === void 0 ? void 0 : logger({\n              type: 'init',\n              params: __assign(__assign({}, configuration), currentSettings)\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  }));\n\n  subscriptions.push(transport.on('message', function (message) {\n    var decodedMessage = proto.Message.decode(removeHeader(message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'incoming',\n      message: decodedMessage\n    });\n    emit('incoming', decodedMessage);\n  }));\n  return {\n    clearQueue: function () {\n      messageQueue.splice(0, messageQueue.length);\n    },\n    destroy: function () {\n      destroyed = true;\n      transport.close();\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    on: on,\n    getMessageId: getMessageId,\n    sendCancel: sendCancel,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    send: sendMessage,\n    batch: batch,\n    changeConfiguration: updateDefaults,\n    changeDevice: updateDevice,\n    changeSettings: updateSettings,\n    reconnect: function () {\n      if (status !== 'closed') {\n        transport.reconnect(url); // даем время случиться close\n      } else {\n        transport.open(url);\n      }\n    },\n    get currentMessageId() {\n      return currentMessageId;\n    },\n    get configuration() {\n      return configuration;\n    }\n  };\n};\nvar defaultWSCreator = function (url) {\n  return new WebSocket(url);\n};\nvar createTransport = function (createWS) {\n  if (createWS === void 0) {\n    createWS = defaultWSCreator;\n  }\n  var _a = createNanoEvents(),\n    on = _a.on,\n    emit = _a.emit;\n  var status = 'closed';\n  var stopped = false;\n  var ws;\n  var timeOut; // ид таймера автореконнекта\n  var retries = 0; // количество попыток коннекта при ошибке\n  var close = function () {\n    stopped = true;\n    ws && ws.close(); // статус изменится по подписке\n    clearTimeout(timeOut);\n    timeOut = undefined;\n  };\n  var send = function (data) {\n    if (!navigator.onLine) {\n      close();\n      emit('error');\n      return;\n    }\n    ws.send(data);\n  };\n  var open = function (url) {\n    if (status !== 'closed') {\n      return;\n    }\n    status = 'connecting';\n    emit('connecting');\n    // TODO: нужен таймаут для подключения\n    ws = createWS(url);\n    ws.binaryType = 'arraybuffer';\n    ws.addEventListener('open', function () {\n      if (ws.readyState === 1) {\n        retries = 0; // сбрасываем количество попыток реконнекта\n        status = 'ready';\n        emit('ready');\n      }\n    });\n    ws.addEventListener('close', function () {\n      status = 'closed';\n      emit('close');\n    });\n    ws.addEventListener('error', function (e) {\n      if (status !== 'connecting') {\n        throw e;\n      }\n      // пробуем переподключаться, если возникла ошибка при коннекте\n      if (!ws || ws.readyState === 3 && !stopped) {\n        if (timeOut) {\n          clearTimeout(timeOut);\n        }\n        if (retries < 3) {\n          timeOut = window.setTimeout(function () {\n            open(url);\n            retries++;\n          }, 300 * retries);\n        } else {\n          retries = 0;\n          emit('error', e);\n        }\n      }\n    });\n    ws.addEventListener('message', function (e) {\n      emit('message', e.data);\n    });\n  };\n  var reconnect = function (url) {\n    if (status === 'closed') {\n      open(url);\n      return;\n    }\n    close();\n    setTimeout(function () {\n      return reconnect(url);\n    });\n  };\n  return {\n    send: send,\n    open: open,\n    close: close,\n    reconnect: reconnect,\n    on: on\n  };\n};\nvar getMetaPermissons = function (permission) {\n  return Object.keys(permission).map(function (key) {\n    return {\n      type: key,\n      status: permission[key]\n    };\n  });\n};\nvar getCurrentLocation = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(function (_a) {\n          var coords = _a.coords,\n            timestamp = _a.timestamp;\n          resolve({\n            lat: coords.latitude.toString(),\n            lon: coords.longitude.toString(),\n            accuracy: coords.accuracy,\n            timestamp: timestamp\n          });\n        }, reject, {\n          timeout: 5000\n        });\n      })];\n    });\n  });\n};\nvar getTime = function () {\n  return {\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now()\n  };\n};\nvar getAnswerForRequestPermissions = function (requestMessageId, appInfo, items) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n      permissions = {\n        record_audio: 'denied_once',\n        geo: 'denied_once',\n        read_contacts: 'denied_permanently',\n        push: 'denied_once'\n      };\n      response = {\n        auto_listening: false,\n        app_info: appInfo,\n        meta: {\n          time: getTime(),\n          permissions: []\n        },\n        server_action: {\n          action_id: 'command_response',\n          request_message_id: requestMessageId,\n          command_response: {\n            request_permissions: {\n              permissions: []\n            }\n          }\n        }\n      };\n      return [2 /*return*/, Promise.all(items.map(function (permission) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var _a, location_1, _b;\n          var _c, _d;\n          return __generator(this, function (_e) {\n            switch (_e.label) {\n              case 0:\n                _a = permission;\n                switch (_a) {\n                  case 'geo':\n                    return [3 /*break*/, 1];\n                }\n                return [3 /*break*/, 5];\n              case 1:\n                _e.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, getCurrentLocation()];\n              case 2:\n                location_1 = _e.sent();\n                permissions.geo = 'granted';\n                response.meta.location = location_1;\n                (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                  type: 'geo',\n                  status: 'granted'\n                });\n                return [3 /*break*/, 4];\n              case 3:\n                _b = _e.sent();\n                permissions.geo = 'denied_permanently';\n                (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                  type: 'geo',\n                  status: 'denied_permanently'\n                });\n                return [3 /*break*/, 4];\n              case 4:\n                return [3 /*break*/, 6];\n              case 5:\n                // eslint-disable-next-line no-console\n                console.warn('Unsupported permission request:', permission);\n                _e.label = 6;\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      })).then(function () {\n        response.meta.permissions = getMetaPermissons(permissions);\n        return response;\n      })];\n    });\n  });\n};\nvar mtt = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Music2TrackProtocol = function () {\n      /**\n       * Namespace Music2TrackProtocol.\n       * @exports Music2TrackProtocol\n       * @namespace\n       */\n      var Music2TrackProtocol = {};\n      Music2TrackProtocol.DecoderResult = function () {\n        /**\n         * Properties of a DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @interface IDecoderResult\n         * @property {string|null} [result] DecoderResult result\n         * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         */\n\n        /**\n         * Constructs a new DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DecoderResult result.\n         * @member {string} result\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.result = \"\";\n\n        /**\n         * DecoderResult isMusicFound.\n         * @member {boolean} isMusicFound\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isMusicFound = false;\n\n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isFinal = false;\n\n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n         */\n        DecoderResult.create = function create(properties) {\n          return new DecoderResult(properties);\n        };\n\n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.result != null && Object.hasOwnProperty.call(message, \"result\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.result);\n          if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\")) writer.uint32( /* id 2, wireType 0 =*/16).bool(message.isMusicFound);\n          if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32( /* id 3, wireType 0 =*/24).bool(message.isFinal);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.DecoderResult();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.result = reader.string();\n                break;\n              case 2:\n                message.isMusicFound = reader.bool();\n                break;\n              case 3:\n                message.isFinal = reader.bool();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecoderResult.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.result != null && message.hasOwnProperty(\"result\")) if (!$util.isString(message.result)) return \"result: string expected\";\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) if (typeof message.isMusicFound !== \"boolean\") return \"isMusicFound: boolean expected\";\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n          return null;\n        };\n\n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         */\n        DecoderResult.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.DecoderResult) return object;\n          var message = new $root.Music2TrackProtocol.DecoderResult();\n          if (object.result != null) message.result = String(object.result);\n          if (object.isMusicFound != null) message.isMusicFound = Boolean(object.isMusicFound);\n          if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecoderResult.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.result = \"\";\n            object.isMusicFound = false;\n            object.isFinal = false;\n          }\n          if (message.result != null && message.hasOwnProperty(\"result\")) object.result = message.result;\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) object.isMusicFound = message.isMusicFound;\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n          return object;\n        };\n\n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecoderResult.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return DecoderResult;\n      }();\n      Music2TrackProtocol.ErrorResponse = function () {\n        /**\n         * Properties of an ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         * @property {number|null} [errorCode] ErrorResponse errorCode\n         */\n\n        /**\n         * Constructs a new ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorMessage = \"\";\n\n        /**\n         * ErrorResponse errorCode.\n         * @member {number} errorCode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorCode = 0;\n\n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n         */\n        ErrorResponse.create = function create(properties) {\n          return new ErrorResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.errorMessage);\n          if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.errorCode);\n          return writer;\n        };\n\n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.ErrorResponse();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.errorMessage = reader.string();\n                break;\n              case 2:\n                message.errorCode = reader.int32();\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrorResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) if (!$util.isInteger(message.errorCode)) return \"errorCode: integer expected\";\n          return null;\n        };\n\n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.ErrorResponse) return object;\n          var message = new $root.Music2TrackProtocol.ErrorResponse();\n          if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n          if (object.errorCode != null) message.errorCode = object.errorCode | 0;\n          return message;\n        };\n\n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.defaults) {\n            object.errorMessage = \"\";\n            object.errorCode = 0;\n          }\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) object.errorCode = message.errorCode;\n          return object;\n        };\n\n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return ErrorResponse;\n      }();\n      Music2TrackProtocol.MttResponse = function () {\n        /**\n         * Properties of a MttResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IMttResponse\n         * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n         * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n         */\n\n        /**\n         * Constructs a new MttResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a MttResponse.\n         * @implements IMttResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         */\n        function MttResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MttResponse decoderResultField.\n         * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        MttResponse.prototype.decoderResultField = null;\n\n        /**\n         * MttResponse errorResponse.\n         * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        MttResponse.prototype.errorResponse = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * MttResponse MessageType.\n         * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n        Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n          get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n          set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new MttResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n         */\n        MttResponse.create = function create(properties) {\n          return new MttResponse(properties);\n        };\n\n        /**\n         * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MttResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MttResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Music2TrackProtocol.MttResponse();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                break;\n              case 2:\n                message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MttResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MttResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MttResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          var properties = {};\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n              if (error) return \"decoderResultField.\" + error;\n            }\n          }\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            if (properties.MessageType === 1) return \"MessageType: multiple values\";\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n              if (error) return \"errorResponse.\" + error;\n            }\n          }\n          return null;\n        };\n\n        /**\n         * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         */\n        MttResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.MttResponse) return object;\n          var message = new $root.Music2TrackProtocol.MttResponse();\n          if (object.decoderResultField != null) {\n            if (typeof object.decoderResultField !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n            message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n          }\n          if (object.errorResponse != null) {\n            if (typeof object.errorResponse !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n            message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.MttResponse} message MttResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MttResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n            if (options.oneofs) object.MessageType = \"decoderResultField\";\n          }\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n            if (options.oneofs) object.MessageType = \"errorResponse\";\n          }\n          return object;\n        };\n\n        /**\n         * Converts this MttResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MttResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        return MttResponse;\n      }();\n      return Music2TrackProtocol;\n    }();\n    return $root;\n  });\n});\nvar createMusicRecognizer = function (voiceListener) {\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n  var stop = function () {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n  var start = function (_a) {\n    var sendVoice = _a.sendVoice,\n      messageId = _a.messageId,\n      onMessage = _a.onMessage;\n    return voiceListener.listen(function (data, last) {\n      return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION);\n    }).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n        if (message.messageId === messageId && message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n          if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n            return;\n          }\n          var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data),\n            decoderResultField = _c.decoderResultField,\n            errorResponse = _c.errorResponse;\n          if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n            off();\n            stop();\n          }\n        }\n      });\n    });\n  };\n  return {\n    start: start,\n    stop: stop,\n    get status() {\n      return status;\n    },\n    get messageId() {\n      return currentMessageId;\n    }\n  };\n};\nvar asr = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Variables = function () {\n      /**\n       * Properties of a Variables.\n       * @exports IVariables\n       * @interface IVariables\n       * @property {Object.<string,string>|null} [variables] Variables variables\n       */\n\n      /**\n       * Constructs a new Variables.\n       * @exports Variables\n       * @classdesc Represents a Variables.\n       * @implements IVariables\n       * @constructor\n       * @param {IVariables=} [properties] Properties to set\n       */\n      function Variables(properties) {\n        this.variables = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Variables variables.\n       * @member {Object.<string,string>} variables\n       * @memberof Variables\n       * @instance\n       */\n      Variables.prototype.variables = $util.emptyObject;\n\n      /**\n       * Creates a new Variables instance using the specified properties.\n       * @function create\n       * @memberof Variables\n       * @static\n       * @param {IVariables=} [properties] Properties to set\n       * @returns {Variables} Variables instance\n       */\n      Variables.create = function create(properties) {\n        return new Variables(properties);\n      };\n\n      /**\n       * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encode\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Variables.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Variables.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Variables message from the specified reader or buffer.\n       * @function decode\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Variables.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Variables(),\n          key,\n          value;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (message.variables === $util.emptyObject) message.variables = {};\n              var end2 = reader.uint32() + reader.pos;\n              key = \"\";\n              value = \"\";\n              while (reader.pos < end2) {\n                var tag2 = reader.uint32();\n                switch (tag2 >>> 3) {\n                  case 1:\n                    key = reader.string();\n                    break;\n                  case 2:\n                    value = reader.string();\n                    break;\n                  default:\n                    reader.skipType(tag2 & 7);\n                    break;\n                }\n              }\n              message.variables[key] = value;\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Variables message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Variables.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Variables message.\n       * @function verify\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Variables.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          if (!$util.isObject(message.variables)) return \"variables: object expected\";\n          var key = Object.keys(message.variables);\n          for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variables[key[i]])) return \"variables: string{k:string} expected\";\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Variables} Variables\n       */\n      Variables.fromObject = function fromObject(object) {\n        if (object instanceof $root.Variables) return object;\n        var message = new $root.Variables();\n        if (object.variables) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".Variables.variables: object expected\");\n          message.variables = {};\n          for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i) message.variables[keys[i]] = String(object.variables[keys[i]]);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Variables message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Variables\n       * @static\n       * @param {Variables} message Variables\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Variables.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.objects || options.defaults) object.variables = {};\n        var keys2;\n        if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n          object.variables = {};\n          for (var j = 0; j < keys2.length; ++j) object.variables[keys2[j]] = message.variables[keys2[j]];\n        }\n        return object;\n      };\n\n      /**\n       * Converts this Variables to JSON.\n       * @function toJSON\n       * @memberof Variables\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Variables.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Variables;\n    }();\n    $root.UndecodedSeconds = function () {\n      /**\n       * Properties of an UndecodedSeconds.\n       * @exports IUndecodedSeconds\n       * @interface IUndecodedSeconds\n       * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n       */\n\n      /**\n       * Constructs a new UndecodedSeconds.\n       * @exports UndecodedSeconds\n       * @classdesc Represents an UndecodedSeconds.\n       * @implements IUndecodedSeconds\n       * @constructor\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       */\n      function UndecodedSeconds(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * UndecodedSeconds undecodedSeconds.\n       * @member {number} undecodedSeconds\n       * @memberof UndecodedSeconds\n       * @instance\n       */\n      UndecodedSeconds.prototype.undecodedSeconds = 0;\n\n      /**\n       * Creates a new UndecodedSeconds instance using the specified properties.\n       * @function create\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       * @returns {UndecodedSeconds} UndecodedSeconds instance\n       */\n      UndecodedSeconds.create = function create(properties) {\n        return new UndecodedSeconds(properties);\n      };\n\n      /**\n       * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      UndecodedSeconds.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\")) writer.uint32( /* id 1, wireType 5 =*/13).float(message.undecodedSeconds);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer.\n       * @function decode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      UndecodedSeconds.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.UndecodedSeconds();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSeconds = reader.float();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an UndecodedSeconds message.\n       * @function verify\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      UndecodedSeconds.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) if (typeof message.undecodedSeconds !== \"number\") return \"undecodedSeconds: number expected\";\n        return null;\n      };\n\n      /**\n       * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       */\n      UndecodedSeconds.fromObject = function fromObject(object) {\n        if (object instanceof $root.UndecodedSeconds) return object;\n        var message = new $root.UndecodedSeconds();\n        if (object.undecodedSeconds != null) message.undecodedSeconds = Number(object.undecodedSeconds);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {UndecodedSeconds} message UndecodedSeconds\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      UndecodedSeconds.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.undecodedSeconds = 0;\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n        return object;\n      };\n\n      /**\n       * Converts this UndecodedSeconds to JSON.\n       * @function toJSON\n       * @memberof UndecodedSeconds\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      UndecodedSeconds.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return UndecodedSeconds;\n    }();\n    $root.FullyFinalized = function () {\n      /**\n       * Properties of a FullyFinalized.\n       * @exports IFullyFinalized\n       * @interface IFullyFinalized\n       */\n\n      /**\n       * Constructs a new FullyFinalized.\n       * @exports FullyFinalized\n       * @classdesc Represents a FullyFinalized.\n       * @implements IFullyFinalized\n       * @constructor\n       * @param {IFullyFinalized=} [properties] Properties to set\n       */\n      function FullyFinalized(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new FullyFinalized instance using the specified properties.\n       * @function create\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized=} [properties] Properties to set\n       * @returns {FullyFinalized} FullyFinalized instance\n       */\n      FullyFinalized.create = function create(properties) {\n        return new FullyFinalized(properties);\n      };\n\n      /**\n       * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encode\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FullyFinalized.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer.\n       * @function decode\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FullyFinalized.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.FullyFinalized();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a FullyFinalized message.\n       * @function verify\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      FullyFinalized.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        return null;\n      };\n\n      /**\n       * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {FullyFinalized} FullyFinalized\n       */\n      FullyFinalized.fromObject = function fromObject(object) {\n        if (object instanceof $root.FullyFinalized) return object;\n        return new $root.FullyFinalized();\n      };\n\n      /**\n       * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {FullyFinalized} message FullyFinalized\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      FullyFinalized.toObject = function toObject() {\n        return {};\n      };\n\n      /**\n       * Converts this FullyFinalized to JSON.\n       * @function toJSON\n       * @memberof FullyFinalized\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      FullyFinalized.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return FullyFinalized;\n    }();\n    $root.EmotionResult = function () {\n      /**\n       * Properties of an EmotionResult.\n       * @exports IEmotionResult\n       * @interface IEmotionResult\n       * @property {string|null} [name] EmotionResult name\n       * @property {number|null} [confidence] EmotionResult confidence\n       */\n\n      /**\n       * Constructs a new EmotionResult.\n       * @exports EmotionResult\n       * @classdesc Represents an EmotionResult.\n       * @implements IEmotionResult\n       * @constructor\n       * @param {IEmotionResult=} [properties] Properties to set\n       */\n      function EmotionResult(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * EmotionResult name.\n       * @member {string} name\n       * @memberof EmotionResult\n       * @instance\n       */\n      EmotionResult.prototype.name = \"\";\n\n      /**\n       * EmotionResult confidence.\n       * @member {number} confidence\n       * @memberof EmotionResult\n       * @instance\n       */\n      EmotionResult.prototype.confidence = 0;\n\n      /**\n       * Creates a new EmotionResult instance using the specified properties.\n       * @function create\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult=} [properties] Properties to set\n       * @returns {EmotionResult} EmotionResult instance\n       */\n      EmotionResult.create = function create(properties) {\n        return new EmotionResult(properties);\n      };\n\n      /**\n       * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encode\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      EmotionResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n        if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.confidence);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      EmotionResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.EmotionResult();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.name = reader.string();\n              break;\n            case 2:\n              message.confidence = reader.float();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an EmotionResult message.\n       * @function verify\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      EmotionResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) if (typeof message.confidence !== \"number\") return \"confidence: number expected\";\n        return null;\n      };\n\n      /**\n       * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {EmotionResult} EmotionResult\n       */\n      EmotionResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.EmotionResult) return object;\n        var message = new $root.EmotionResult();\n        if (object.name != null) message.name = String(object.name);\n        if (object.confidence != null) message.confidence = Number(object.confidence);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof EmotionResult\n       * @static\n       * @param {EmotionResult} message EmotionResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      EmotionResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.name = \"\";\n          object.confidence = 0;\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n        return object;\n      };\n\n      /**\n       * Converts this EmotionResult to JSON.\n       * @function toJSON\n       * @memberof EmotionResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      EmotionResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return EmotionResult;\n    }();\n    $root.Hypothesis = function () {\n      /**\n       * Properties of a Hypothesis.\n       * @exports IHypothesis\n       * @interface IHypothesis\n       * @property {string|null} [words] Hypothesis words\n       * @property {number|null} [acousticCost] Hypothesis acousticCost\n       * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n       * @property {number|null} [finalCost] Hypothesis finalCost\n       * @property {number|null} [phraseStart] Hypothesis phraseStart\n       * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n       * @property {string|null} [normalizedText] Hypothesis normalizedText\n       */\n\n      /**\n       * Constructs a new Hypothesis.\n       * @exports Hypothesis\n       * @classdesc Represents a Hypothesis.\n       * @implements IHypothesis\n       * @constructor\n       * @param {IHypothesis=} [properties] Properties to set\n       */\n      function Hypothesis(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Hypothesis words.\n       * @member {string} words\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.words = \"\";\n\n      /**\n       * Hypothesis acousticCost.\n       * @member {number} acousticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.acousticCost = 0;\n\n      /**\n       * Hypothesis linguisticCost.\n       * @member {number} linguisticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.linguisticCost = 0;\n\n      /**\n       * Hypothesis finalCost.\n       * @member {number} finalCost\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.finalCost = 0;\n\n      /**\n       * Hypothesis phraseStart.\n       * @member {number} phraseStart\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.phraseStart = 0;\n\n      /**\n       * Hypothesis phraseEnd.\n       * @member {number} phraseEnd\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.phraseEnd = 0;\n\n      /**\n       * Hypothesis normalizedText.\n       * @member {string} normalizedText\n       * @memberof Hypothesis\n       * @instance\n       */\n      Hypothesis.prototype.normalizedText = \"\";\n\n      /**\n       * Creates a new Hypothesis instance using the specified properties.\n       * @function create\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis=} [properties] Properties to set\n       * @returns {Hypothesis} Hypothesis instance\n       */\n      Hypothesis.create = function create(properties) {\n        return new Hypothesis(properties);\n      };\n\n      /**\n       * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encode\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Hypothesis.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.words != null && Object.hasOwnProperty.call(message, \"words\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.words);\n        if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.acousticCost);\n        if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\")) writer.uint32( /* id 3, wireType 5 =*/29).float(message.linguisticCost);\n        if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\")) writer.uint32( /* id 4, wireType 5 =*/37).float(message.finalCost);\n        if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.phraseStart);\n        if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\")) writer.uint32( /* id 6, wireType 5 =*/53).float(message.phraseEnd);\n        if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.normalizedText);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer.\n       * @function decode\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Hypothesis.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Hypothesis();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.words = reader.string();\n              break;\n            case 2:\n              message.acousticCost = reader.float();\n              break;\n            case 3:\n              message.linguisticCost = reader.float();\n              break;\n            case 4:\n              message.finalCost = reader.float();\n              break;\n            case 5:\n              message.phraseStart = reader.float();\n              break;\n            case 6:\n              message.phraseEnd = reader.float();\n              break;\n            case 7:\n              message.normalizedText = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Hypothesis message.\n       * @function verify\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Hypothesis.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.words != null && message.hasOwnProperty(\"words\")) if (!$util.isString(message.words)) return \"words: string expected\";\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) if (typeof message.acousticCost !== \"number\") return \"acousticCost: number expected\";\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) if (typeof message.linguisticCost !== \"number\") return \"linguisticCost: number expected\";\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) if (typeof message.finalCost !== \"number\") return \"finalCost: number expected\";\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) if (typeof message.phraseStart !== \"number\") return \"phraseStart: number expected\";\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) if (typeof message.phraseEnd !== \"number\") return \"phraseEnd: number expected\";\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) if (!$util.isString(message.normalizedText)) return \"normalizedText: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Hypothesis} Hypothesis\n       */\n      Hypothesis.fromObject = function fromObject(object) {\n        if (object instanceof $root.Hypothesis) return object;\n        var message = new $root.Hypothesis();\n        if (object.words != null) message.words = String(object.words);\n        if (object.acousticCost != null) message.acousticCost = Number(object.acousticCost);\n        if (object.linguisticCost != null) message.linguisticCost = Number(object.linguisticCost);\n        if (object.finalCost != null) message.finalCost = Number(object.finalCost);\n        if (object.phraseStart != null) message.phraseStart = Number(object.phraseStart);\n        if (object.phraseEnd != null) message.phraseEnd = Number(object.phraseEnd);\n        if (object.normalizedText != null) message.normalizedText = String(object.normalizedText);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Hypothesis} message Hypothesis\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Hypothesis.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.words = \"\";\n          object.acousticCost = 0;\n          object.linguisticCost = 0;\n          object.finalCost = 0;\n          object.phraseStart = 0;\n          object.phraseEnd = 0;\n          object.normalizedText = \"\";\n        }\n        if (message.words != null && message.hasOwnProperty(\"words\")) object.words = message.words;\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) object.normalizedText = message.normalizedText;\n        return object;\n      };\n\n      /**\n       * Converts this Hypothesis to JSON.\n       * @function toJSON\n       * @memberof Hypothesis\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Hypothesis.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Hypothesis;\n    }();\n    $root.DecoderResult = function () {\n      /**\n       * Properties of a DecoderResult.\n       * @exports IDecoderResult\n       * @interface IDecoderResult\n       * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n       * @property {number|null} [chunkStart] DecoderResult chunkStart\n       * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n       * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n       * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n       * @property {IVariables|null} [variables] DecoderResult variables\n       * @property {boolean|null} [isFinal] DecoderResult isFinal\n       * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n       * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n       */\n\n      /**\n       * Constructs a new DecoderResult.\n       * @exports DecoderResult\n       * @classdesc Represents a DecoderResult.\n       * @implements IDecoderResult\n       * @constructor\n       * @param {IDecoderResult=} [properties] Properties to set\n       */\n      function DecoderResult(properties) {\n        this.hypothesis = [];\n        this.emotionResult = [];\n        this.contextAnswer = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * DecoderResult hypothesis.\n       * @member {Array.<IHypothesis>} hypothesis\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.hypothesis = $util.emptyArray;\n\n      /**\n       * DecoderResult chunkStart.\n       * @member {number} chunkStart\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.chunkStart = 0;\n\n      /**\n       * DecoderResult chunkEnd.\n       * @member {number} chunkEnd\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.chunkEnd = 0;\n\n      /**\n       * DecoderResult timeEndpointDetectionMs.\n       * @member {number} timeEndpointDetectionMs\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.timeEndpointDetectionMs = 0;\n\n      /**\n       * DecoderResult timeDecodingMs.\n       * @member {number} timeDecodingMs\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.timeDecodingMs = 0;\n\n      /**\n       * DecoderResult variables.\n       * @member {IVariables|null|undefined} variables\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.variables = null;\n\n      /**\n       * DecoderResult isFinal.\n       * @member {boolean} isFinal\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.isFinal = false;\n\n      /**\n       * DecoderResult emotionResult.\n       * @member {Array.<IEmotionResult>} emotionResult\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.emotionResult = $util.emptyArray;\n\n      /**\n       * DecoderResult contextAnswer.\n       * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n       * @memberof DecoderResult\n       * @instance\n       */\n      DecoderResult.prototype.contextAnswer = $util.emptyArray;\n\n      /**\n       * Creates a new DecoderResult instance using the specified properties.\n       * @function create\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult=} [properties] Properties to set\n       * @returns {DecoderResult} DecoderResult instance\n       */\n      DecoderResult.create = function create(properties) {\n        return new DecoderResult(properties);\n      };\n\n      /**\n       * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encode\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DecoderResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.hypothesis != null && message.hypothesis.length) for (var i = 0; i < message.hypothesis.length; ++i) $root.Hypothesis.encode(message.hypothesis[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\")) writer.uint32( /* id 2, wireType 5 =*/21).float(message.chunkStart);\n        if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\")) writer.uint32( /* id 3, wireType 5 =*/29).float(message.chunkEnd);\n        if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\")) writer.uint32( /* id 4, wireType 5 =*/37).float(message.timeEndpointDetectionMs);\n        if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.timeDecodingMs);\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) $root.Variables.encode(message.variables, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32( /* id 7, wireType 0 =*/56).bool(message.isFinal);\n        if (message.emotionResult != null && message.emotionResult.length) for (var i = 0; i < message.emotionResult.length; ++i) $root.EmotionResult.encode(message.emotionResult[i], writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.contextAnswer != null && message.contextAnswer.length) for (var i = 0; i < message.contextAnswer.length; ++i) $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DecoderResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DecoderResult();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.hypothesis && message.hypothesis.length)) message.hypothesis = [];\n              message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n              break;\n            case 2:\n              message.chunkStart = reader.float();\n              break;\n            case 3:\n              message.chunkEnd = reader.float();\n              break;\n            case 4:\n              message.timeEndpointDetectionMs = reader.float();\n              break;\n            case 5:\n              message.timeDecodingMs = reader.float();\n              break;\n            case 6:\n              message.variables = $root.Variables.decode(reader, reader.uint32());\n              break;\n            case 7:\n              message.isFinal = reader.bool();\n              break;\n            case 8:\n              if (!(message.emotionResult && message.emotionResult.length)) message.emotionResult = [];\n              message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n              break;\n            case 9:\n              if (!(message.contextAnswer && message.contextAnswer.length)) message.contextAnswer = [];\n              message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a DecoderResult message.\n       * @function verify\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      DecoderResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n          if (!Array.isArray(message.hypothesis)) return \"hypothesis: array expected\";\n          for (var i = 0; i < message.hypothesis.length; ++i) {\n            var error = $root.Hypothesis.verify(message.hypothesis[i]);\n            if (error) return \"hypothesis.\" + error;\n          }\n        }\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) if (typeof message.chunkStart !== \"number\") return \"chunkStart: number expected\";\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) if (typeof message.chunkEnd !== \"number\") return \"chunkEnd: number expected\";\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) if (typeof message.timeEndpointDetectionMs !== \"number\") return \"timeEndpointDetectionMs: number expected\";\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) if (typeof message.timeDecodingMs !== \"number\") return \"timeDecodingMs: number expected\";\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          var error = $root.Variables.verify(message.variables);\n          if (error) return \"variables.\" + error;\n        }\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n        if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n          if (!Array.isArray(message.emotionResult)) return \"emotionResult: array expected\";\n          for (var i = 0; i < message.emotionResult.length; ++i) {\n            var error = $root.EmotionResult.verify(message.emotionResult[i]);\n            if (error) return \"emotionResult.\" + error;\n          }\n        }\n        if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n          if (!Array.isArray(message.contextAnswer)) return \"contextAnswer: array expected\";\n          for (var i = 0; i < message.contextAnswer.length; ++i) {\n            var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n            if (error) return \"contextAnswer.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {DecoderResult} DecoderResult\n       */\n      DecoderResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.DecoderResult) return object;\n        var message = new $root.DecoderResult();\n        if (object.hypothesis) {\n          if (!Array.isArray(object.hypothesis)) throw TypeError(\".DecoderResult.hypothesis: array expected\");\n          message.hypothesis = [];\n          for (var i = 0; i < object.hypothesis.length; ++i) {\n            if (typeof object.hypothesis[i] !== \"object\") throw TypeError(\".DecoderResult.hypothesis: object expected\");\n            message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n          }\n        }\n        if (object.chunkStart != null) message.chunkStart = Number(object.chunkStart);\n        if (object.chunkEnd != null) message.chunkEnd = Number(object.chunkEnd);\n        if (object.timeEndpointDetectionMs != null) message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n        if (object.timeDecodingMs != null) message.timeDecodingMs = Number(object.timeDecodingMs);\n        if (object.variables != null) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".DecoderResult.variables: object expected\");\n          message.variables = $root.Variables.fromObject(object.variables);\n        }\n        if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n        if (object.emotionResult) {\n          if (!Array.isArray(object.emotionResult)) throw TypeError(\".DecoderResult.emotionResult: array expected\");\n          message.emotionResult = [];\n          for (var i = 0; i < object.emotionResult.length; ++i) {\n            if (typeof object.emotionResult[i] !== \"object\") throw TypeError(\".DecoderResult.emotionResult: object expected\");\n            message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n          }\n        }\n        if (object.contextAnswer) {\n          if (!Array.isArray(object.contextAnswer)) throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n          message.contextAnswer = [];\n          for (var i = 0; i < object.contextAnswer.length; ++i) {\n            if (typeof object.contextAnswer[i] !== \"object\") throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n            message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof DecoderResult\n       * @static\n       * @param {DecoderResult} message DecoderResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      DecoderResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n          object.hypothesis = [];\n          object.emotionResult = [];\n          object.contextAnswer = [];\n        }\n        if (options.defaults) {\n          object.chunkStart = 0;\n          object.chunkEnd = 0;\n          object.timeEndpointDetectionMs = 0;\n          object.timeDecodingMs = 0;\n          object.variables = null;\n          object.isFinal = false;\n        }\n        if (message.hypothesis && message.hypothesis.length) {\n          object.hypothesis = [];\n          for (var j = 0; j < message.hypothesis.length; ++j) object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n        }\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) object.variables = $root.Variables.toObject(message.variables, options);\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n        if (message.emotionResult && message.emotionResult.length) {\n          object.emotionResult = [];\n          for (var j = 0; j < message.emotionResult.length; ++j) object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n        }\n        if (message.contextAnswer && message.contextAnswer.length) {\n          object.contextAnswer = [];\n          for (var j = 0; j < message.contextAnswer.length; ++j) object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n        }\n        return object;\n      };\n\n      /**\n       * Converts this DecoderResult to JSON.\n       * @function toJSON\n       * @memberof DecoderResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      DecoderResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      DecoderResult.ContextAnswer = function () {\n        /**\n         * Properties of a ContextAnswer.\n         * @memberof DecoderResult\n         * @interface IContextAnswer\n         * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n         */\n\n        /**\n         * Constructs a new ContextAnswer.\n         * @memberof DecoderResult\n         * @classdesc Represents a ContextAnswer.\n         * @implements IContextAnswer\n         * @constructor\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         */\n        function ContextAnswer(properties) {\n          this.contextResult = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ContextAnswer contextResult.\n         * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         */\n        ContextAnswer.prototype.contextResult = $util.emptyArray;\n\n        /**\n         * Creates a new ContextAnswer instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n         */\n        ContextAnswer.create = function create(properties) {\n          return new ContextAnswer(properties);\n        };\n\n        /**\n         * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextAnswer.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.contextResult != null && message.contextResult.length) for (var i = 0; i < message.contextResult.length; ++i) $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n          return writer;\n        };\n\n        /**\n         * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextAnswer.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.DecoderResult.ContextAnswer();\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                if (!(message.contextResult && message.contextResult.length)) message.contextResult = [];\n                message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ContextAnswer message.\n         * @function verify\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ContextAnswer.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n            if (!Array.isArray(message.contextResult)) return \"contextResult: array expected\";\n            for (var i = 0; i < message.contextResult.length; ++i) {\n              var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n              if (error) return \"contextResult.\" + error;\n            }\n          }\n          return null;\n        };\n\n        /**\n         * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         */\n        ContextAnswer.fromObject = function fromObject(object) {\n          if (object instanceof $root.DecoderResult.ContextAnswer) return object;\n          var message = new $root.DecoderResult.ContextAnswer();\n          if (object.contextResult) {\n            if (!Array.isArray(object.contextResult)) throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n            message.contextResult = [];\n            for (var i = 0; i < object.contextResult.length; ++i) {\n              if (typeof object.contextResult[i] !== \"object\") throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n              message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n            }\n          }\n          return message;\n        };\n\n        /**\n         * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.ContextAnswer} message ContextAnswer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ContextAnswer.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.contextResult = [];\n          if (message.contextResult && message.contextResult.length) {\n            object.contextResult = [];\n            for (var j = 0; j < message.contextResult.length; ++j) object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n          }\n          return object;\n        };\n\n        /**\n         * Converts this ContextAnswer to JSON.\n         * @function toJSON\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ContextAnswer.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n        ContextAnswer.ContextRef = function () {\n          /**\n           * Properties of a ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @interface IContextRef\n           * @property {string|null} [id] ContextRef id\n           * @property {number|null} [index] ContextRef index\n           * @property {string|null} [originalValue] ContextRef originalValue\n           * @property {string|null} [predictedValue] ContextRef predictedValue\n           * @property {number|null} [score] ContextRef score\n           */\n\n          /**\n           * Constructs a new ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @classdesc Represents a ContextRef.\n           * @implements IContextRef\n           * @constructor\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           */\n          function ContextRef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * ContextRef id.\n           * @member {string} id\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.id = \"\";\n\n          /**\n           * ContextRef index.\n           * @member {number} index\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.index = 0;\n\n          /**\n           * ContextRef originalValue.\n           * @member {string} originalValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.originalValue = \"\";\n\n          /**\n           * ContextRef predictedValue.\n           * @member {string} predictedValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.predictedValue = \"\";\n\n          /**\n           * ContextRef score.\n           * @member {number} score\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n          ContextRef.prototype.score = 0;\n\n          /**\n           * Creates a new ContextRef instance using the specified properties.\n           * @function create\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n           */\n          ContextRef.create = function create(properties) {\n            return new ContextRef(properties);\n          };\n\n          /**\n           * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          ContextRef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.id);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.index);\n            if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.originalValue);\n            if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.predictedValue);\n            if (message.score != null && Object.hasOwnProperty.call(message, \"score\")) writer.uint32( /* id 5, wireType 5 =*/45).float(message.score);\n            return writer;\n          };\n\n          /**\n           * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer.\n           * @function decode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          ContextRef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.DecoderResult.ContextAnswer.ContextRef();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  message.id = reader.string();\n                  break;\n                case 2:\n                  message.index = reader.int32();\n                  break;\n                case 3:\n                  message.originalValue = reader.string();\n                  break;\n                case 4:\n                  message.predictedValue = reader.string();\n                  break;\n                case 5:\n                  message.score = reader.float();\n                  break;\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n           * @function decodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          ContextRef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n\n          /**\n           * Verifies a ContextRef message.\n           * @function verify\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} message Plain object to verify\n           * @returns {string|null} `null` if valid, otherwise the reason why it is not\n           */\n          ContextRef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isString(message.id)) return \"id: string expected\";\n            if (message.index != null && message.hasOwnProperty(\"index\")) if (!$util.isInteger(message.index)) return \"index: integer expected\";\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) if (!$util.isString(message.originalValue)) return \"originalValue: string expected\";\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) if (!$util.isString(message.predictedValue)) return \"predictedValue: string expected\";\n            if (message.score != null && message.hasOwnProperty(\"score\")) if (typeof message.score !== \"number\") return \"score: number expected\";\n            return null;\n          };\n\n          /**\n           * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n           * @function fromObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} object Plain object\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           */\n          ContextRef.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef) return object;\n            var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n            if (object.id != null) message.id = String(object.id);\n            if (object.index != null) message.index = object.index | 0;\n            if (object.originalValue != null) message.originalValue = String(object.originalValue);\n            if (object.predictedValue != null) message.predictedValue = String(object.predictedValue);\n            if (object.score != null) message.score = Number(object.score);\n            return message;\n          };\n\n          /**\n           * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n           * @function toObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n           * @param {$protobuf.IConversionOptions} [options] Conversion options\n           * @returns {Object.<string,*>} Plain object\n           */\n          ContextRef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n              object.id = \"\";\n              object.index = 0;\n              object.originalValue = \"\";\n              object.predictedValue = \"\";\n              object.score = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n            if (message.index != null && message.hasOwnProperty(\"index\")) object.index = message.index;\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) object.originalValue = message.originalValue;\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) object.predictedValue = message.predictedValue;\n            if (message.score != null && message.hasOwnProperty(\"score\")) object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n            return object;\n          };\n\n          /**\n           * Converts this ContextRef to JSON.\n           * @function toJSON\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           * @returns {Object.<string,*>} JSON object\n           */\n          ContextRef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n          };\n          return ContextRef;\n        }();\n        return ContextAnswer;\n      }();\n      return DecoderResult;\n    }();\n    $root.ErrorResponse = function () {\n      /**\n       * Properties of an ErrorResponse.\n       * @exports IErrorResponse\n       * @interface IErrorResponse\n       * @property {string|null} [errorMessage] ErrorResponse errorMessage\n       */\n\n      /**\n       * Constructs a new ErrorResponse.\n       * @exports ErrorResponse\n       * @classdesc Represents an ErrorResponse.\n       * @implements IErrorResponse\n       * @constructor\n       * @param {IErrorResponse=} [properties] Properties to set\n       */\n      function ErrorResponse(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ErrorResponse errorMessage.\n       * @member {string} errorMessage\n       * @memberof ErrorResponse\n       * @instance\n       */\n      ErrorResponse.prototype.errorMessage = \"\";\n\n      /**\n       * Creates a new ErrorResponse instance using the specified properties.\n       * @function create\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse=} [properties] Properties to set\n       * @returns {ErrorResponse} ErrorResponse instance\n       */\n      ErrorResponse.create = function create(properties) {\n        return new ErrorResponse(properties);\n      };\n\n      /**\n       * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encode\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ErrorResponse.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.errorMessage);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer.\n       * @function decode\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ErrorResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ErrorResponse();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.errorMessage = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an ErrorResponse message.\n       * @function verify\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ErrorResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {ErrorResponse} ErrorResponse\n       */\n      ErrorResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ErrorResponse) return object;\n        var message = new $root.ErrorResponse();\n        if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {ErrorResponse} message ErrorResponse\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ErrorResponse.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.errorMessage = \"\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n        return object;\n      };\n\n      /**\n       * Converts this ErrorResponse to JSON.\n       * @function toJSON\n       * @memberof ErrorResponse\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ErrorResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ErrorResponse;\n    }();\n    $root.PacketWrapperFromServer = function () {\n      /**\n       * Properties of a PacketWrapperFromServer.\n       * @exports IPacketWrapperFromServer\n       * @interface IPacketWrapperFromServer\n       * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n       * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n       * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n       * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n       */\n\n      /**\n       * Constructs a new PacketWrapperFromServer.\n       * @exports PacketWrapperFromServer\n       * @classdesc Represents a PacketWrapperFromServer.\n       * @implements IPacketWrapperFromServer\n       * @constructor\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       */\n      function PacketWrapperFromServer(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * PacketWrapperFromServer undecodedSecondsField.\n       * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n\n      /**\n       * PacketWrapperFromServer fullyFinalizedField.\n       * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n\n      /**\n       * PacketWrapperFromServer decoderResultField.\n       * @member {IDecoderResult|null|undefined} decoderResultField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.decoderResultField = null;\n\n      /**\n       * PacketWrapperFromServer errorResponse.\n       * @member {IErrorResponse|null|undefined} errorResponse\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      PacketWrapperFromServer.prototype.errorResponse = null;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * PacketWrapperFromServer MessageType.\n       * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n      Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n        get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new PacketWrapperFromServer instance using the specified properties.\n       * @function create\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n       */\n      PacketWrapperFromServer.create = function create(properties) {\n        return new PacketWrapperFromServer(properties);\n      };\n\n      /**\n       * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      PacketWrapperFromServer.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\")) $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\")) $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.DecoderResult.encode(message.decoderResultField, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.ErrorResponse.encode(message.errorResponse, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n       * @function decode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      PacketWrapperFromServer.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.PacketWrapperFromServer();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n              break;\n            case 2:\n              message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n              break;\n            case 4:\n              message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n              break;\n            case 8:\n              message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a PacketWrapperFromServer message.\n       * @function verify\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      PacketWrapperFromServer.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          properties.MessageType = 1;\n          {\n            var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n            if (error) return \"undecodedSecondsField.\" + error;\n          }\n        }\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n            if (error) return \"fullyFinalizedField.\" + error;\n          }\n        }\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.DecoderResult.verify(message.decoderResultField);\n            if (error) return \"decoderResultField.\" + error;\n          }\n        }\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.ErrorResponse.verify(message.errorResponse);\n            if (error) return \"errorResponse.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       */\n      PacketWrapperFromServer.fromObject = function fromObject(object) {\n        if (object instanceof $root.PacketWrapperFromServer) return object;\n        var message = new $root.PacketWrapperFromServer();\n        if (object.undecodedSecondsField != null) {\n          if (typeof object.undecodedSecondsField !== \"object\") throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n          message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n        }\n        if (object.fullyFinalizedField != null) {\n          if (typeof object.fullyFinalizedField !== \"object\") throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n          message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n        }\n        if (object.decoderResultField != null) {\n          if (typeof object.decoderResultField !== \"object\") throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n          message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n        }\n        if (object.errorResponse != null) {\n          if (typeof object.errorResponse !== \"object\") throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n          message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      PacketWrapperFromServer.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n          if (options.oneofs) object.MessageType = \"undecodedSecondsField\";\n        }\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n          if (options.oneofs) object.MessageType = \"fullyFinalizedField\";\n        }\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n          if (options.oneofs) object.MessageType = \"decoderResultField\";\n        }\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n          if (options.oneofs) object.MessageType = \"errorResponse\";\n        }\n        return object;\n      };\n\n      /**\n       * Converts this PacketWrapperFromServer to JSON.\n       * @function toJSON\n       * @memberof PacketWrapperFromServer\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return PacketWrapperFromServer;\n    }();\n    return $root;\n  });\n});\nvar createSpeechRecognizer = function (voiceListener) {\n  var _a = createNanoEvents(),\n    emit = _a.emit,\n    on = _a.on;\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n  var stop = function () {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n  var start = function (_a) {\n    var sendVoice = _a.sendVoice,\n      messageId = _a.messageId,\n      onMessage = _a.onMessage;\n    return voiceListener.listen(sendVoice).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n        if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n          if (message.text) {\n            emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n            if (message.last === 1) {\n              off();\n              stop();\n            }\n          }\n          if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n            var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n            if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n              emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n              if (decoderResultField.isFinal) {\n                off();\n                stop();\n              }\n            }\n          }\n        }\n      });\n    });\n  };\n  return {\n    start: start,\n    stop: stop,\n    on: on,\n    get status() {\n      return status;\n    },\n    get messageId() {\n      return currentMessageId;\n    }\n  };\n};\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\nvar createAudioContext = function (options) {\n  if (window.AudioContext) {\n    return new AudioContext(options);\n  }\n  if (window.webkitAudioContext) {\n    // eslint-disable-next-line new-cap\n    return new window.webkitAudioContext();\n  }\n  throw new Error('Audio not supported');\n};\nvar _a = createNanoEvents(),\n  on = _a.on,\n  emit = _a.emit;\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\nvar resolveAudioContext = function (onReady) {\n  if (!audioContext) {\n    var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n    var context_1 = createAudioContext();\n    audioContext = {\n      context: context_1,\n      ready: !isSafari_1 && context_1.state === 'running',\n      on: on\n    };\n    /// Контекст может быть не готов для использования сразу после создания\n    /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n    if (!audioContext.ready) {\n      var handleClick_1 = function () {\n        document.removeEventListener('click', handleClick_1);\n        document.removeEventListener('touchstart', handleClick_1);\n        if (isSafari_1) {\n          /// проигрываем тишину, т.к нужно что-то проиграть,\n          /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n          var oscillator = audioContext.context.createOscillator();\n          oscillator.frequency.value = 0;\n          oscillator.connect(audioContext.context.destination);\n          oscillator.start(0);\n          oscillator.stop(0.5);\n        }\n        if (audioContext.context.state === 'suspended') {\n          /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n          /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n          /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n          audioContext.context.resume();\n        }\n        audioContext.ready = true;\n        emit('ready');\n      };\n      /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n      /// необходимо событие от пользователя\n      // для пк\n      document.addEventListener('click', handleClick_1);\n      // для мобильных устройств\n      document.addEventListener('touchstart', handleClick_1);\n    }\n  }\n  if (audioContext.ready) {\n    onReady && onReady(audioContext.context);\n  } else {\n    var unsubscribe_1 = on('ready', function () {\n      onReady(audioContext.context);\n      unsubscribe_1();\n    });\n  }\n};\n\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\nvar downsampleBuffer = function (buffer, inSampleRate, outSampleRate) {\n  if (outSampleRate > inSampleRate) {\n    throw new Error('downsampling rate show be smaller than original sample rate');\n  }\n  var sampleRateRatio = inSampleRate / outSampleRate;\n  var newLength = Math.round(buffer.length / sampleRateRatio);\n  var result = new Int16Array(newLength);\n  var offsetResult = 0;\n  var offsetBuffer = 0;\n  while (offsetResult < result.length) {\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n    var accum = 0;\n    var count = 0;\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i];\n      count++;\n    }\n    result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n    offsetResult++;\n    offsetBuffer = nextOffsetBuffer;\n  }\n  return result.buffer;\n};\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\nvar createAudioRecorder = function (stream, cb) {\n  return new Promise(function (resolve) {\n    var state = 'inactive';\n    var input;\n    var stop = function () {\n      if (state === 'inactive') {\n        throw new Error(\"Can't stop inactive recorder\");\n      }\n      state = 'inactive';\n      stream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n      input.disconnect();\n    };\n    var start = function () {\n      if (state !== 'inactive') {\n        throw new Error(\"Can't start not inactive recorder\");\n      }\n      state = 'recording';\n      if (!context) {\n        context = createAudioContext({\n          // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n          sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE\n        });\n      }\n      input = context.createMediaStreamSource(stream);\n      if (!processor) {\n        processor = context.createScriptProcessor(2048, 1, 1);\n      }\n      var listener = function (e) {\n        var buffer = e.inputBuffer.getChannelData(0);\n        var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n        var last = state === 'inactive';\n        cb(data, last);\n        if (last) {\n          processor.removeEventListener('audioprocess', listener);\n        }\n      };\n      processor.addEventListener('audioprocess', listener);\n      processor.addEventListener('audioprocess', function () {\n        return resolve(stop);\n      }, {\n        once: true\n      });\n      input.connect(processor);\n      processor.connect(context.destination);\n    };\n    start();\n  });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\nvar createNavigatorAudioProvider = function (cb) {\n  return navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(function (stream) {\n    return createAudioRecorder(stream, cb);\n  });\n};\n\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\nvar createVoiceListener = function (createAudioProvider) {\n  if (createAudioProvider === void 0) {\n    createAudioProvider = createNavigatorAudioProvider;\n  }\n  var _a = createNanoEvents(),\n    emit = _a.emit,\n    on = _a.on;\n  var stopRecord;\n  var status = 'stopped';\n  var stop = function () {\n    status = 'stopped';\n    stopRecord();\n    emit('status', 'stopped');\n  };\n  var listen = function (handleVoice) {\n    status = 'started';\n    emit('status', 'started');\n    return createAudioProvider(function (data, last) {\n      return handleVoice(new Uint8Array(data), last);\n    }).then(function (recStop) {\n      stopRecord = recStop;\n    }).then(function () {\n      status = 'listen';\n      emit('status', 'listen');\n    }).catch(function (err) {\n      status = 'stopped';\n      emit('status', 'stopped');\n      throw err;\n    });\n  };\n  return {\n    listen: listen,\n    stop: stop,\n    on: on,\n    get status() {\n      return status;\n    }\n  };\n};\n\n/** Создает коллекцию треков  */\nvar createTrackCollection = function () {\n  var trackIds;\n  var trackMap;\n  var clear = function () {\n    trackIds = new Array();\n    trackMap = new Map();\n  };\n  var push = function (id, track) {\n    if (trackMap.has(id)) {\n      throw new Error('Track already exists');\n    }\n    trackMap.set(id, track);\n    trackIds.push(id);\n  };\n  var has = function (id) {\n    return trackMap.has(id);\n  };\n  var getById = function (id) {\n    var track = trackMap.get(id);\n    if (track === undefined) {\n      throw new Error('Unknown track id');\n    }\n    return track;\n  };\n  var getByIndex = function (index) {\n    if (index < 0 || index >= trackIds.length) {\n      throw new Error('Index out of bounds');\n    }\n    var track = trackMap.get(trackIds[index]);\n    if (track == null) {\n      throw new Error('Something wrong...');\n    }\n    return track;\n  };\n  var some = function (predicate) {\n    return trackIds.some(function (id) {\n      return predicate(getById(id));\n    });\n  };\n  clear();\n  return {\n    clear: clear,\n    has: has,\n    get: getById,\n    getByIndex: getByIndex,\n    push: push,\n    some: some,\n    get length() {\n      return trackIds.length;\n    }\n  };\n};\n\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\nvar createChunkQueue = function () {\n  var buffer = []; // очередь на воспроизведение\n  var chunks = []; // очередь воспроизведения\n  var duration = 0; // продолжительность очереди на воспроизведение, сек\n  var loaded = false; // флаг завершения загрузки\n  /** Добавить чанк в очередь на воспроизведение */\n  var push = function (chunk) {\n    var _a;\n    buffer.push(chunk);\n    duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n  };\n  /** Добавить чанк в очередь воспроизведения */\n  var toPlay = function (chunk) {\n    chunks.push(chunk);\n  };\n  /** Удалить чанк из очереди воспроизведения */\n  var remove = function (chunk) {\n    chunks.splice(chunks.indexOf(chunk), 1);\n  };\n  /** Получить очередь на воспроизведение */\n  var popAll = function () {\n    duration = 0;\n    return buffer.splice(0, buffer.length);\n  };\n  /** Проставляем признак окончания загрузки трека */\n  var allLoaded = function () {\n    loaded = true;\n  };\n  return {\n    get bufferLen() {\n      return buffer.length;\n    },\n    get chunks() {\n      return chunks;\n    },\n    allLoaded: allLoaded,\n    toPlay: toPlay,\n    remove: remove,\n    push: push,\n    popAll: popAll,\n    get length() {\n      return chunks.length;\n    },\n    get duration() {\n      return duration;\n    },\n    get ended() {\n      // считаем трек законченным, когда все загружено и воспроизведено\n      return loaded && chunks.length === 0 && buffer.length === 0;\n    },\n    get loaded() {\n      return loaded;\n    }\n  };\n};\nvar from16BitToFloat32 = function (incomingData) {\n  var l = incomingData.length;\n  var outputData = new Float32Array(l);\n  for (var i = 0; i < l; i += 1) {\n    outputData[i] = incomingData[i] / 32768.0;\n  }\n  return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\nvar createTrackStream = function (ctx, _a) {\n  var _b = _a.sampleRate,\n    sampleRate = _b === void 0 ? 24000 : _b,\n    _c = _a.numberOfChannels,\n    numberOfChannels = _c === void 0 ? 1 : _c,\n    _d = _a.delay,\n    delay = _d === void 0 ? 0 : _d,\n    onPlay = _a.onPlay,\n    onEnd = _a.onEnd,\n    trackStatus = _a.trackStatus;\n  // очередь загруженных чанков (кусочков) трека\n  var queue = createChunkQueue();\n  var extraByte = null;\n  var status = trackStatus || 'stop';\n  var lastChunkOffset = 0;\n  var startTime = 0;\n  var firstChunk = true;\n  var end = function () {\n    // останавливаем воспроизведение чанков из очереди воспроизведения\n    queue.chunks.forEach(function (chunk) {\n      chunk.stop();\n    });\n    status = 'end';\n    onEnd && onEnd();\n    startTime = 0;\n    lastChunkOffset = 0;\n  };\n  var play = function () {\n    if (status === 'end') {\n      return;\n    }\n    if (status !== 'play') {\n      status = 'play';\n      onPlay && onPlay();\n    }\n    if (queue.ended) {\n      end();\n      return;\n    }\n    // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n    if (queue.loaded || queue.duration >= delay) {\n      startTime = queue.length === 0 ? ctx.currentTime : startTime;\n      var chunks = queue.popAll();\n      chunks.forEach(function (chunk) {\n        var _a;\n        queue.toPlay(chunk);\n        chunk.start(startTime + lastChunkOffset);\n        lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n      });\n    }\n  };\n  var getExtraBytes = function (data, bytesArraysSizes) {\n    if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n      extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n      bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n      bytesArraysSizes.sourceLen -= 1;\n    } else if (extraByte != null) {\n      bytesArraysSizes.prepend = extraByte;\n      bytesArraysSizes.start = 1;\n      if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n        bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n        extraByte = null;\n      } else {\n        extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n        bytesArraysSizes.sourceLen -= 1;\n      }\n    }\n  };\n  var createChunk = function (chunk) {\n    var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n    for (var i = 0; i < numberOfChannels; i++) {\n      var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n      var index = 0;\n      for (var j = i; j < chunk.length; j += numberOfChannels) {\n        channelChunk[index++] = chunk[j];\n      }\n      audioBuffer.getChannelData(i).set(channelChunk);\n    }\n    var source = ctx.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(ctx.destination);\n    source.onended = function () {\n      queue.remove(source);\n      if (queue.ended) {\n        status = 'end';\n        onEnd && onEnd();\n      }\n    };\n    return source;\n  };\n  /** добавляет чанк в очередь на воспроизведение */\n  var write = function (data) {\n    // 44 байта - заголовок трека\n    var slicePoint = firstChunk ? 44 : 0;\n    var bytesArraysSizes = {\n      incomingMessageVoiceDataLength: data.length,\n      sourceLen: data.length,\n      start: 0,\n      prepend: null\n    };\n    firstChunk = false;\n    if (slicePoint >= data.length) {\n      return;\n    }\n    getExtraBytes(data, bytesArraysSizes);\n    var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n    var bufferUi8 = new Uint8Array(dataBuffer);\n    var bufferI16 = new Int16Array(dataBuffer);\n    bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n    if (bytesArraysSizes.prepend != null) {\n      bufferUi8[0] = bytesArraysSizes.prepend;\n    }\n    var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n    queue.push(chunk);\n    if (status === 'play') {\n      play();\n    }\n  };\n  return {\n    get loaded() {\n      return queue.loaded;\n    },\n    setLoaded: function () {\n      queue.allLoaded();\n      if (status === 'play') {\n        play();\n      }\n    },\n    write: write,\n    get status() {\n      return status;\n    },\n    play: play,\n    stop: end\n  };\n};\nvar createVoicePlayer = function (actx, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.startVoiceDelay,\n    startVoiceDelay = _c === void 0 ? 0.2 : _c,\n    sampleRate = _b.sampleRate,\n    numberOfChannels = _b.numberOfChannels;\n  var _d = createNanoEvents(),\n    on = _d.on,\n    emit = _d.emit;\n  var tracks = createTrackCollection();\n  // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n  var active = true;\n  // индекс текущего трека в tracks\n  var cursor = 0;\n  var play = function () {\n    if (cursor >= tracks.length) {\n      if (tracks.some(function (track) {\n        return !track.loaded;\n      })) {\n        return;\n      }\n      // очищаем коллекцию, если все треки были воспроизведены\n      cursor = 0;\n      tracks.clear();\n      return;\n    }\n    // рекурсивно последовательно включаем треки из очереди\n    var current = tracks.getByIndex(cursor);\n    if (current.status === 'end') {\n      if (cursor < tracks.length) {\n        cursor++;\n        play();\n      }\n    } else {\n      current.play();\n    }\n  };\n  var append = function (data, trackId, last) {\n    if (last === void 0) {\n      last = false;\n    }\n    var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n    if (current == null) {\n      /// если trackId нет в коллекции - создаем трек\n      /// по окончании проигрывания - запускаем следующий трек, вызывая play\n      current = createTrackStream(actx, {\n        sampleRate: sampleRate,\n        numberOfChannels: numberOfChannels,\n        delay: startVoiceDelay,\n        onPlay: function () {\n          return emit('play', trackId);\n        },\n        onEnd: function () {\n          emit('end', trackId);\n          play();\n        },\n        trackStatus: active ? 'stop' : 'end'\n      });\n      tracks.push(trackId, current);\n    }\n    if (current.status !== 'end' && data.length) {\n      current.write(data);\n    }\n    if (last) {\n      // все чанки трека загружены\n      current.setLoaded();\n    }\n    play();\n  };\n  var stop = function () {\n    while (cursor < tracks.length) {\n      var cur = cursor;\n      cursor++;\n      tracks.getByIndex(cur).stop();\n    }\n  };\n  return {\n    append: append,\n    setActive: function (value) {\n      active = value;\n      if (value) {\n        play();\n      } else {\n        stop();\n      }\n    },\n    on: on,\n    stop: stop\n  };\n};\nvar createVoice = function (client, emit,\n/// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n  var voicePlayer;\n  var listener = createVoiceListener();\n  var musicRecognizer = createMusicRecognizer(listener);\n  var speechRecognizer = createSpeechRecognizer(listener);\n  var subscriptions = [];\n  var settings = {\n    disableDubbing: false,\n    disableListening: false\n  };\n  var isPlaying = false; // проигрывается/не проигрывается озвучка\n  var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n  var wasDisabledDubbing = false; // состояние озвучки на момент включения слушания\n  /** останавливает слушание голоса, возвращает true - если слушание было активно */\n  var stopListening = function () {\n    var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n    autolistenMesId = null;\n    if (speechRecognizer.status === 'active') {\n      speechRecognizer.stop();\n      client.sendCancel(speechRecognizer.messageId);\n      return true;\n    }\n    if (musicRecognizer.status === 'active') {\n      musicRecognizer.stop();\n      client.sendCancel(musicRecognizer.messageId);\n      return true;\n    }\n    return result;\n  };\n  /** Останавливает слушание и воспроизведение */\n  var stop = function () {\n    // здесь важен порядок остановки голоса\n    stopListening();\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n  };\n  /** Активирует слушание голоса\n   * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n   */\n  var listen = function (_a) {\n    var begin = (_a === void 0 ? {} : _a).begin;\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        if (stopListening()) {\n          return [2 /*return*/];\n        }\n\n        if (isPlaying) {\n          voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n          return [2 /*return*/];\n        }\n\n        if (settings.disableListening) {\n          return [2 /*return*/];\n        }\n        // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n        if (listener.status === 'stopped') {\n          wasDisabledDubbing = settings.disableDubbing;\n          return [2 /*return*/, client.createVoiceStream(function (_a) {\n            var sendVoice = _a.sendVoice,\n              messageId = _a.messageId,\n              onMessage = _a.onMessage;\n            begin === null || begin === void 0 ? void 0 : begin.forEach(function (chunk) {\n              return sendVoice(new Uint8Array(chunk), false);\n            });\n            return speechRecognizer.start({\n              sendVoice: sendVoice,\n              messageId: messageId,\n              onMessage: onMessage\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  /** Активирует распознавание музыки\n   * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n   */\n  var shazam = function () {\n    if (stopListening()) {\n      return;\n    }\n    if (isPlaying) {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    }\n    if (settings.disableListening) {\n      return;\n    }\n    // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n    if (listener.status === 'stopped') {\n      wasDisabledDubbing = settings.disableDubbing;\n      client.createVoiceStream(function (_a) {\n        var sendVoice = _a.sendVoice,\n          messageId = _a.messageId,\n          onMessage = _a.onMessage;\n        return musicRecognizer.start({\n          sendVoice: sendVoice,\n          messageId: messageId,\n          onMessage: onMessage\n        });\n      });\n    }\n  };\n  if (isAudioSupported) {\n    resolveAudioContext(function (context) {\n      /// создаем плеер только если поддерживается аудио\n      /// и только когда готов AudioContext\n      voicePlayer = createVoicePlayer(context, {\n        startVoiceDelay: 1\n      });\n      // начало проигрывания озвучки\n      subscriptions.push(voicePlayer.on('play', function () {\n        isPlaying = true;\n        emit({\n          emotion: 'talk'\n        });\n      }));\n      // окончание проигрывания озвучки\n      subscriptions.push(voicePlayer.on('end', function (mesId) {\n        isPlaying = false;\n        emit({\n          emotion: 'idle'\n        });\n        if (mesId === autolistenMesId) {\n          listen();\n        }\n      }));\n      // оповещаем о готовности к воспроизведению звука\n      onReady && onReady();\n    });\n  }\n  // обработка входящей озвучки\n  subscriptions.push(client.on('voice', function (data, message) {\n    if (settings.disableDubbing) {\n      return;\n    }\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n  }));\n  // гипотезы распознавания речи\n  subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n    emit({\n      asr: {\n        text: listener.status === 'listen' && !settings.disableListening ? text : '',\n        last: isLast,\n        mid: mid\n      }\n    });\n  }));\n  // статусы слушания речи\n  subscriptions.push(listener.on('status', function (status) {\n    if (status === 'listen') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      emit({\n        emotion: 'listen'\n      });\n    } else if (status === 'stopped') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n      emit({\n        asr: {\n          text: ''\n        },\n        emotion: 'idle'\n      });\n    }\n  }));\n  // активация автослушания\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    var autoListening = systemMessage.auto_listening;\n    if (autoListening) {\n      /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n      /// если озвучка выключена - включаем слушание сразу\n      if (!wasDisabledDubbing) {\n        autolistenMesId = originalMessage.messageId.toString();\n      } else {\n        listen();\n      }\n    }\n  }));\n  return {\n    destroy: function () {\n      stopListening();\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    change: function (newSettings) {\n      var disableDubbing = newSettings.disableDubbing,\n        disableListening = newSettings.disableListening;\n      /// ниже важен порядок обработки флагов слушания и озвучки\n      /// сначала слушание, потом озвучка\n      // вкл/выкл фичи листенинга\n      if (typeof disableListening !== 'undefined' && settings.disableListening !== disableListening) {\n        settings.disableListening = disableListening;\n        if (disableListening === true) {\n          stopListening();\n        }\n      }\n      // вкл/выкл фичи озвучки\n      if (typeof disableDubbing !== 'undefined' && settings.disableDubbing !== disableDubbing) {\n        settings.disableDubbing = disableDubbing;\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing);\n      }\n      Object.assign(settings, newSettings);\n    },\n    listen: listen,\n    shazam: shazam,\n    stop: stop,\n    stopPlaying: function () {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    }\n  };\n};\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n  projectId: DEFAULT_PROJECT_ID,\n  applicationId: DEFAULT_APPLICATION_ID,\n  appversionId: DEFAULT_APP_VERSION_ID,\n  frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n  frontendType: 'DIALOG',\n  systemName: 'assistant',\n  frontendEndpoint: 'None'\n};\nvar isDefaultApp = function (appInfo) {\n  return appInfo.frontendStateId === DEFAULT_APP.frontendStateId;\n};\nvar promiseTimeout = function (promise, timeout) {\n  var timeoutId;\n  return Promise.race([promise.then(function (v) {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    return v;\n  }), new Promise(function (_, reject) {\n    timeoutId = window.setTimeout(function () {\n      reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n    }, timeout);\n  })]);\n};\nvar createAssistant = function (_a) {\n  var _b;\n  var getMeta = _a.getMeta,\n    configuration = __rest(_a, [\"getMeta\"]);\n  var _c = createNanoEvents(),\n    on = _c.on,\n    emit = _c.emit;\n  var subscriptions = [];\n  // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n  var requestIdMap = {};\n  // готов/не готов воспроизводить озвучку\n  var voiceReady = false;\n  // текущий апп\n  var app = {\n    info: DEFAULT_APP\n  };\n  var settings = {\n    disableDubbing: configuration.settings.dubbing === -1,\n    disableListening: false,\n    sendTextAsSsml: false\n  };\n  var backgroundApps = {};\n  var metaProvider = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(app !== null && app.info.frontendType === 'WEB_APP' && app.getState)) return [3 /*break*/, 2];\n            return [4 /*yield*/, promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n              // eslint-disable-next-line no-console\n              console.error('App-state wasn`t resolved, timeout had been expired');\n              return undefined;\n            })];\n          case 1:\n            _a = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            _a = undefined;\n            _b.label = 3;\n          case 3:\n            appState = _a;\n            current_app = {\n              app_info: app.info,\n              state: appState || {}\n            };\n            getBackgroundAppsMeta = function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var apps, backgroundAppsIds, backgroundAppsMeta;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      apps = __assign({}, backgroundApps);\n                      backgroundAppsIds = Object.keys(apps);\n                      backgroundAppsMeta = [];\n                      return [4 /*yield*/, Promise.all(backgroundAppsIds.map(function (applicationId) {\n                        return __awaiter(void 0, void 0, void 0, function () {\n                          var _a, getState;\n                          return __generator(this, function (_b) {\n                            _a = apps[applicationId].getState, getState = _a === void 0 ? function () {\n                              return Promise.resolve({});\n                            } : _a;\n                            return [2 /*return*/, promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) {\n                              return state;\n                            }, function () {\n                              return {};\n                            })];\n                          });\n                        });\n                      })).then(function (results) {\n                        results.forEach(function (appResult, index) {\n                          var state = appResult;\n                          var applicationId = backgroundAppsIds[index];\n                          backgroundAppsMeta.push({\n                            app_info: apps[applicationId].appInfo,\n                            state: state\n                          });\n                        });\n                      })];\n                    case 1:\n                      _a.sent();\n                      return [2 /*return*/, backgroundAppsMeta];\n                  }\n                });\n              });\n            };\n            return [4 /*yield*/, getBackgroundAppsMeta()];\n          case 4:\n            background_apps = _b.sent();\n            return [2 /*return*/, {\n              meta: __assign({\n                time: getTime(),\n                current_app: current_app,\n                background_apps: background_apps\n              }, getMeta ? getMeta() : {})\n            }];\n        }\n      });\n    });\n  };\n  var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n  var protocol = createProtocol(transport, __assign(__assign({}, configuration), {\n    // выключаем озвучку, пока голос не готов\n    settings: __assign(__assign({}, configuration.settings), {\n      dubbing: !voiceReady ? -1 : configuration.settings.dubbing\n    })\n  }));\n  var client = createClient(protocol, metaProvider);\n  var voice = createVoice(client, function (event) {\n    return emit('assistant', event);\n  }, function () {\n    voiceReady = true;\n    // когда голос готов, возвращаем первоначальное состояние\n    protocol.changeSettings({\n      dubbing: settings.disableDubbing ? -1 : 1\n    });\n  });\n  /** завершает текущий апп */\n  var closeApp = function () {\n    var current = app;\n    app = {\n      info: DEFAULT_APP\n    };\n    if (!isDefaultApp(current.info)) {\n      emit('app', {\n        type: 'close',\n        app: current.info\n      });\n    }\n  };\n  /** отправляет текст */\n  var sendText = function (text, shouldSendDisableDubbing) {\n    if (shouldSendDisableDubbing === void 0) {\n      shouldSendDisableDubbing = false;\n    }\n    voice.stop();\n    client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n  };\n  /** отправляет server_action */\n  var sendServerAction = function (serverAction, messageName, requestId, actionApp) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n    if (requestId === void 0) {\n      requestId = undefined;\n    }\n    if (actionApp === void 0) {\n      actionApp = app.info;\n    }\n    voice.stop();\n    client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n      if (requestId && messageId) {\n        requestIdMap[messageId.toString()] = requestId;\n      }\n    });\n  };\n  /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n  var sendMetaForPermissionRequest = function (requestMessageId, appInfo, items) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n          case 1:\n            data = _a.sent();\n            client.sendData(data, 'SERVER_ACTION');\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  subscriptions.push(protocol.on('ready', function () {\n    return emit('vps', {\n      type: 'ready'\n    });\n  }));\n  // при неудачном переподключении к сокету\n  subscriptions.push(transport.on('error', function (error) {\n    emit('vps', {\n      type: 'error',\n      error: error\n    });\n  }));\n  // обработка исходящих сообщений\n  subscriptions.push(protocol.on('outcoming', function (message) {\n    emit('vps', {\n      type: 'outcoming',\n      message: message\n    });\n  }));\n  // обработка ошибок\n  subscriptions.push(protocol.on('error', function (error) {\n    emit('error', error);\n  }));\n  // оповещение о статусах\n  subscriptions.push(client.on('status', function (status) {\n    emit('status', status);\n  }));\n  // обработка входящих команд, и событий аппа\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    if (originalMessage.messageName === 'ANSWER_TO_USER') {\n      var activate_app_info = systemMessage.activate_app_info,\n        items = systemMessage.items,\n        mesAppInfo = systemMessage.app_info,\n        character = systemMessage.character;\n      if (character) {\n        emit('assistant', {\n          character: character.id\n        });\n      }\n      // по-умолчанию activate_app_info: true\n      if (mesAppInfo && activate_app_info !== false) {\n        emit('app', {\n          type: 'run',\n          app: mesAppInfo\n        });\n      }\n      if (items) {\n        var _loop_1 = function (i) {\n          var command = items[i].command;\n          if (typeof command !== 'undefined') {\n            setTimeout(function () {\n              return emit('command', command);\n            });\n            if (command.type === 'start_music_recognition') {\n              voice.shazam();\n              return {\n                value: void 0\n              };\n            }\n            if (command.type === 'request_permissions' && mesAppInfo) {\n              sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n              return {\n                value: void 0\n              };\n            }\n            if (command.type === 'action') {\n              emit('actionCommand', {\n                type: 'command',\n                command: command\n              });\n              return {\n                value: void 0\n              };\n            }\n            if ((command.type === 'smart_app_data' || command.type === 'smart_app_error' || command.type === 'start_smart_search' || command.type === 'navigation') && mesAppInfo) {\n              // эмитим все команды, т.к бывают фоновые команды\n              emit('app', {\n                type: 'command',\n                command: __assign(__assign({}, command), {\n                  sdk_meta: {\n                    mid: originalMessage.messageId.toString(),\n                    requestId: requestIdMap[originalMessage.messageId.toString()]\n                  }\n                }),\n                app: mesAppInfo\n              });\n            }\n            if (command.type === 'close_app') {\n              closeApp();\n            }\n          }\n        };\n        for (var i = 0; i < (items || []).length; i++) {\n          var state_1 = _loop_1(i);\n          if (typeof state_1 === \"object\") return state_1.value;\n        }\n      }\n      emit('vps', {\n        type: 'incoming',\n        systemMessage: systemMessage,\n        originalMessage: originalMessage\n      });\n    }\n  }));\n  // прокидывает команды backgroundApp'ов в их подписчики\n  on('app', function (event) {\n    var _a;\n    if (event.type === 'command') {\n      var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n      if (Array.isArray(backgroundAppOnCommand)) {\n        backgroundAppOnCommand.forEach(function (onCommand) {\n          var _a;\n          onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n        });\n      }\n    }\n  });\n  /** уничтожает ассистент, очищает подписки */\n  var destroy = function () {\n    voice.destroy();\n    client.destroy();\n    protocol.destroy();\n    subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n      return unsubscribe();\n    });\n  };\n  /** запускает ассистент (приветствие) */\n  var start = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.disableGreetings,\n      disableGreetings = _c === void 0 ? false : _c,\n      _d = _b.initPhrase,\n      initPhrase = _d === void 0 ? undefined : _d,\n      _e = _b.isFirstSession,\n      isFirstSession = _e === void 0 ? false : _e;\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            if (!(!disableGreetings && isDefaultApp(app.info))) return [3 /*break*/, 2];\n            return [4 /*yield*/, client.sendOpenAssistant({\n              isFirstSession: isFirstSession\n            })];\n          case 1:\n            _f.sent();\n            _f.label = 2;\n          case 2:\n            if (initPhrase) {\n              return [2 /*return*/, client.sendText(initPhrase).then(function (messageId) {\n                return messageId ? client.waitForAnswer(messageId) : undefined;\n              })];\n            }\n            return [2 /*return*/, undefined];\n        }\n      });\n    });\n  };\n  return {\n    get activeApp() {\n      return !isDefaultApp(app.info) ? app.info : null;\n    },\n    get settings() {\n      return settings;\n    },\n    destroy: destroy,\n    closeApp: closeApp,\n    listen: voice.listen,\n    sendServerAction: sendServerAction,\n    sendText: sendText,\n    start: start,\n    stop: function () {\n      voice.stop();\n      protocol.clearQueue();\n      transport.close();\n    },\n    stopTts: voice.stopPlaying,\n    stopVoice: voice.stop,\n    emit: emit,\n    on: on,\n    changeConfiguration: protocol.changeConfiguration,\n    changeSettings: function (newSettings) {\n      var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n      settings = __assign(__assign({}, settings), newSettings);\n      voice.change({\n        disableDubbing: settings.disableDubbing,\n        disableListening: settings.disableListening\n      });\n      if (!dubbingChanged) {\n        return;\n      }\n      protocol.changeSettings({\n        dubbing: settings.disableDubbing || !voiceReady ? -1 : 1\n      });\n    },\n    reconnect: protocol.reconnect,\n    get protocol() {\n      return protocol;\n    },\n    setActiveApp: function (info, getState) {\n      app = {\n        info: info,\n        getState: getState\n      };\n    },\n    addBackgroundApp: function (_a) {\n      var appInfo = _a.appInfo,\n        getState = _a.getState;\n      backgroundApps[appInfo.applicationId] = {\n        appInfo: appInfo,\n        getState: getState,\n        commandsSubscribers: []\n      };\n      var remove = function () {\n        delete backgroundApps[appInfo.applicationId];\n      };\n      var onCommand = function (subscriber) {\n        var _a;\n        (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n        return {\n          clearSubscribers: function () {\n            if (backgroundApps[appInfo.applicationId]) {\n              backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n            }\n          }\n        };\n      };\n      var sendServerActionToBackgroundApp = function (serverAction, messageName, requestId) {\n        var _a;\n        if (messageName === void 0) {\n          messageName = 'SERVER_ACTION';\n        }\n        if (requestId === void 0) {\n          requestId = undefined;\n        }\n        return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n      };\n      return {\n        remove: remove,\n        onCommand: onCommand,\n        sendServerAction: sendServerActionToBackgroundApp\n      };\n    }\n  };\n};\nexport { appendHeader as a, createNavigatorAudioProvider as b, createAssistant as c };","map":{"version":3,"names":["M","MessageNames","d","__awaiter","e","__generator","c","createNanoEvents","b","__assign","p","proto","a","__rest","_","__spreadArrays","f","createCommonjsModule","h","commonjsRequire","m","minimal","g","commonjsGlobal","createClient","protocol","provideMeta","undefined","_a","on","emit","waitForAnswer","messageId","Promise","resolve","off","systemMessageData","originalMessage","messageName","ANSWER_TO_USER","DO_NOTHING","sendData","data","getMessageId","sendSystemMessage","sendCancel","sendOpenAssistant","isFirstSession","meta","_b","_c","label","is_first_session","sent","sendMeta","Object","keys","length","sendServerAction","serverAction","appInfo","app_info","server_action","sendText","text","isSsml","shouldSendDisableDubbing","trim","batch","clientSendText","sendSettings","prevDubbing","sendDisableDubbing","configuration","settings","dubbing","createVoiceStream","callback","sendVoice","onMessage","cb","message","voice","Uint8Array","systemMessage","JSON","parse","status","destroy","createClientMethods","sendMessage","send","payload","other","sendDevice","last","device","Device","create","sendInitialSettings","params","initialSettings","InitialSettings","cancel","Cancel","sendLegacyDevice","legacyDevice","LegacyDevice","Settings","type","Text","mesName","SystemMessage","stringify","Voice","batchingMessageId","lastMessageSent","checkLastMessageStatus","Error","upgradedSendText","_i","arguments","upgradedSendSystemMessage","upgradedSendVoice","upgradedSendSettings","safeJSONParse","str","defaultValue","err","compileBasePayload","userId","token","userChannel","version","vpsToken","appendHeader","uint8Array","arrayBuffer","ArrayBuffer","dataView","DataView","setInt32","newUint8Array","set","removeHeader","slice","createProtocol","transport","logger","getToken","url","locale","basePayload","subscriptions","messageQueue","initMessageId","currentSettings","currentMessageId","Date","now","destroyed","clearReadyTimer","createdMessage","Message","encodedMessage","encode","finish","encodedMessageWithHeader","push","open","sendDeviceOriginal","sendInitialSettingsOriginal","sendLegacyDeviceOriginal","sendSettingsOriginal","args","apply","updateDefaults","obj","assign","updateDevice","additionalInfo","deviceOptions","oldInfo","newInfo","updateSettings","_d","e_1","_e","trys","concat","clearTimeout","window","setTimeout","shift","decodedMessage","decode","clearQueue","splice","close","map","unsubscribe","changeConfiguration","changeDevice","changeSettings","reconnect","defaultWSCreator","WebSocket","createTransport","createWS","stopped","ws","timeOut","retries","navigator","onLine","binaryType","addEventListener","readyState","getMetaPermissons","permission","key","getCurrentLocation","reject","geolocation","getCurrentPosition","coords","timestamp","lat","latitude","toString","lon","longitude","accuracy","timeout","getTime","timezone_id","Intl","DateTimeFormat","resolvedOptions","timeZone","timezone_offset_sec","getTimezoneOffset","getAnswerForRequestPermissions","requestMessageId","items","permissions","response","record_audio","geo","read_contacts","auto_listening","time","action_id","request_message_id","command_response","request_permissions","all","location_1","location","console","warn","then","mtt","module","global","factory","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Music2TrackProtocol","DecoderResult","properties","i","prototype","result","isMusicFound","isFinal","writer","hasOwnProperty","call","uint32","string","bool","encodeDelimited","ldelim","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","object","String","Boolean","toObject","options","defaults","toJSON","constructor","toJSONOptions","ErrorResponse","errorMessage","errorCode","int32","isInteger","MttResponse","decoderResultField","errorResponse","$oneOfFields","defineProperty","get","oneOfGetter","oneOfSetter","fork","MessageType","error","TypeError","oneofs","createMusicRecognizer","voiceListener","stop","start","listen","MUSIC_RECOGNITION","code","toUpperCase","bytes","asr","Variables","variables","emptyObject","value","end2","tag2","isObject","objects","keys2","j","UndecodedSeconds","undecodedSeconds","float","Number","json","isFinite","FullyFinalized","EmotionResult","name","confidence","Hypothesis","words","acousticCost","linguisticCost","finalCost","phraseStart","phraseEnd","normalizedText","hypothesis","emotionResult","contextAnswer","emptyArray","chunkStart","chunkEnd","timeEndpointDetectionMs","timeDecodingMs","ContextAnswer","Array","isArray","arrays","contextResult","ContextRef","id","index","originalValue","predictedValue","score","PacketWrapperFromServer","undecodedSecondsField","fullyFinalizedField","createSpeechRecognizer","STT","isAudioSupported","AudioContext","webkitAudioContext","createAudioContext","audioContext","resolveAudioContext","onReady","isSafari_1","vendor","search","context_1","context","ready","state","handleClick_1","document","removeEventListener","oscillator","createOscillator","frequency","connect","destination","resume","unsubscribe_1","downsampleBuffer","buffer","inSampleRate","outSampleRate","sampleRateRatio","newLength","Math","round","Int16Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","min","TARGET_SAMPLE_RATE","IS_FIREFOX","userAgent","toLowerCase","indexOf","processor","createAudioRecorder","stream","input","getTracks","forEach","track","disconnect","sampleRate","createMediaStreamSource","createScriptProcessor","listener","inputBuffer","getChannelData","once","createNavigatorAudioProvider","mediaDevices","getUserMedia","audio","createVoiceListener","createAudioProvider","stopRecord","handleVoice","recStop","catch","createTrackCollection","trackIds","trackMap","clear","Map","has","getById","getByIndex","some","predicate","createChunkQueue","chunks","duration","loaded","chunk","toPlay","remove","popAll","allLoaded","bufferLen","ended","from16BitToFloat32","incomingData","l","outputData","Float32Array","createTrackStream","ctx","numberOfChannels","delay","onPlay","onEnd","trackStatus","queue","extraByte","lastChunkOffset","startTime","firstChunk","play","currentTime","getExtraBytes","bytesArraysSizes","incomingMessageVoiceDataLength","sourceLen","prepend","createChunk","audioBuffer","createBuffer","channelChunk","source","createBufferSource","onended","write","slicePoint","dataBuffer","bufferUi8","bufferI16","setLoaded","createVoicePlayer","actx","startVoiceDelay","tracks","active","cursor","current","append","trackId","cur","setActive","createVoice","client","voicePlayer","musicRecognizer","speechRecognizer","disableDubbing","disableListening","isPlaying","autolistenMesId","wasDisabledDubbing","stopListening","begin","shazam","emotion","mesId","isLast","mid","autoListening","change","newSettings","stopPlaying","STATE_UPDATE_TIMEOUT","DEFAULT_PROJECT_ID","DEFAULT_APPLICATION_ID","DEFAULT_APP_VERSION_ID","DEFAULT_APP","projectId","applicationId","appversionId","frontendStateId","join","frontendType","systemName","frontendEndpoint","isDefaultApp","promiseTimeout","promise","timeoutId","race","v","createAssistant","getMeta","requestIdMap","voiceReady","app","info","sendTextAsSsml","backgroundApps","metaProvider","appState","current_app","getBackgroundAppsMeta","background_apps","getState","apps","backgroundAppsIds","backgroundAppsMeta","results","appResult","fakeVps","createFakeWS","event","closeApp","requestId","actionApp","sendMetaForPermissionRequest","activate_app_info","mesAppInfo","character","_loop_1","command","sdk_meta","state_1","backgroundAppOnCommand","commandsSubscribers","onCommand","disableGreetings","initPhrase","_f","activeApp","stopTts","stopVoice","dubbingChanged","setActiveApp","addBackgroundApp","subscriber","clearSubscribers","sendServerActionToBackgroundApp"],"sources":["C:/Users/khalo/Desktop/Pomodoro_CanvasApp/node_modules/@sberdevices/assistant-client/esm/assistant-006fa3bb.js"],"sourcesContent":["import { M as MessageNames, d as __awaiter, e as __generator, c as createNanoEvents, b as __assign, p as proto, a as __rest, _ as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-4aa98dc6.js';\n\nvar createClient = function (protocol, provideMeta) {\n    if (provideMeta === void 0) { provideMeta = undefined; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    /** ждет ответ бека и возвращает данные из этого ответа */\n    var waitForAnswer = function (messageId) {\n        return new Promise(function (resolve) {\n            var off = on('systemMessage', function (systemMessageData, originalMessage) {\n                if (originalMessage.messageId === messageId &&\n                    (originalMessage.messageName === MessageNames.ANSWER_TO_USER ||\n                        originalMessage.messageName === MessageNames.DO_NOTHING)) {\n                    off();\n                    resolve(systemMessageData);\n                }\n            });\n        });\n    };\n    /** отправляет произвольный systemMessage, не подкладывает мету */\n    var sendData = function (data, messageName) {\n        if (messageName === void 0) { messageName = ''; }\n        var messageId = protocol.getMessageId();\n        protocol.sendSystemMessage({\n            data: data,\n            messageName: messageName,\n        }, true, messageId);\n        return messageId;\n    };\n    /** отправляет cancel на сообщение */\n    var sendCancel = function (messageId) {\n        protocol.sendCancel({}, true, messageId);\n    };\n    /** отправляет приветствие */\n    var sendOpenAssistant = function (_a) {\n        var isFirstSession = (_a === void 0 ? { isFirstSession: false } : _a).isFirstSession;\n        return __awaiter(void 0, void 0, void 0, function () {\n            var data, meta, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        data = isFirstSession ? { is_first_session: true } : {};\n                        if (!provideMeta) return [3 /*break*/, 2];\n                        return [4 /*yield*/, provideMeta()];\n                    case 1:\n                        _b = _c.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        _b = {};\n                        _c.label = 3;\n                    case 3:\n                        meta = _b;\n                        return [2 /*return*/, waitForAnswer(sendData(__assign(__assign({}, meta), data), 'OPEN_ASSISTANT'))];\n                }\n            });\n        });\n    };\n    /** вызывает sendSystemMessage, куда подкладывает мету */\n    var sendMeta = function (sendSystemMessage) { return __awaiter(void 0, void 0, void 0, function () {\n        var meta, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!provideMeta) return [3 /*break*/, 2];\n                    return [4 /*yield*/, provideMeta()];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = {};\n                    _b.label = 3;\n                case 3:\n                    meta = _a;\n                    if (Object.keys(meta).length) {\n                        sendSystemMessage({\n                            data: meta,\n                            messageName: '',\n                        }, false);\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    /** отправляет server_action и мету */\n    var sendServerAction = function (serverAction, appInfo, messageName) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            var messageId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        messageId = protocol.getMessageId();\n                        // мету и server_action отправляем в одном systemMessage\n                        return [4 /*yield*/, sendMeta(function (_a) {\n                                var data = _a.data;\n                                protocol.sendSystemMessage({\n                                    // eslint-disable-next-line @typescript-eslint/camelcase\n                                    data: __assign(__assign({}, data), { app_info: appInfo, server_action: serverAction }),\n                                    messageName: messageName || 'SERVER_ACTION',\n                                }, true, messageId);\n                            })];\n                    case 1:\n                        // мету и server_action отправляем в одном systemMessage\n                        _a.sent();\n                        return [2 /*return*/, messageId];\n                }\n            });\n        });\n    };\n    /** отправляет текст и текущую мету */\n    var sendText = function (text, isSsml, shouldSendDisableDubbing) {\n        if (isSsml === void 0) { isSsml = false; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (text.trim() === '') {\n                    return [2 /*return*/, undefined];\n                }\n                return [2 /*return*/, protocol.batch(function (_a) {\n                        var sendSystemMessage = _a.sendSystemMessage, clientSendText = _a.sendText, sendSettings = _a.sendSettings, messageId = _a.messageId;\n                        return __awaiter(void 0, void 0, void 0, function () {\n                            var prevDubbing, sendDisableDubbing;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                                    case 1:\n                                        _b.sent();\n                                        prevDubbing = protocol.configuration.settings.dubbing;\n                                        sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                                        if (!sendDisableDubbing) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, sendSettings({ dubbing: -1 }, false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3:\n                                        isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n                                        if (sendDisableDubbing) {\n                                            sendSettings({ dubbing: prevDubbing });\n                                        }\n                                        return [2 /*return*/, messageId];\n                                }\n                            });\n                        });\n                    })];\n            });\n        });\n    };\n    /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n     * отправляет мету */\n    var createVoiceStream = function (callback) {\n        return protocol.batch(function (_a) {\n            var sendSystemMessage = _a.sendSystemMessage, sendVoice = _a.sendVoice, messageId = _a.messageId;\n            return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, callback({\n                                sendVoice: sendVoice,\n                                messageId: messageId,\n                                onMessage: function (cb) { return protocol.on('incoming', cb); },\n                            })];\n                        case 1:\n                            _b.sent();\n                            sendMeta(sendSystemMessage);\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        });\n    };\n    var off = protocol.on('incoming', function (message) {\n        var _a;\n        if (message.voice) {\n            emit('voice', message.voice.data || new Uint8Array(), message);\n        }\n        if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n            emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n        }\n        if (message.status) {\n            emit('status', message.status, message);\n        }\n    });\n    return {\n        destroy: function () {\n            off();\n        },\n        createVoiceStream: createVoiceStream,\n        sendData: sendData,\n        sendMeta: sendMeta,\n        sendOpenAssistant: sendOpenAssistant,\n        sendServerAction: sendServerAction,\n        sendText: sendText,\n        sendCancel: sendCancel,\n        on: on,\n        waitForAnswer: waitForAnswer,\n    };\n};\n\nvar createClientMethods = function (_a) {\n    var getMessageId = _a.getMessageId, sendMessage = _a.sendMessage;\n    var send = function (_a) {\n        var payload = _a.payload, messageId = _a.messageId, other = __rest(_a, [\"payload\", \"messageId\"]);\n        sendMessage(__assign(__assign(__assign({ messageName: '' }, payload), { messageId: messageId }), other));\n    };\n    var sendDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                device: proto.Device.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendInitialSettings = function (data, last, messageId, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ initialSettings: proto.InitialSettings.create(data), last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendCancel = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                cancel: proto.Cancel.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendLegacyDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                legacyDevice: proto.LegacyDevice.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendSettings = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                settings: proto.Settings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendText = function (data, params, type, messageId) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        if (type === void 0) { type = ''; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var text = type ? { data: data, type: type } : { data: data };\n        send(__assign({ payload: {\n                text: proto.Text.create(text),\n                last: (_a = params.last) !== null && _a !== void 0 ? _a : 1,\n            }, messageId: messageId }, params));\n    };\n    var sendSystemMessage = function (_a, last, messageId, params) {\n        var data = _a.data, _b = _a.messageName, mesName = _b === void 0 ? '' : _b;\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        send({\n            payload: __assign({ systemMessage: proto.SystemMessage.create({\n                    data: JSON.stringify(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendVoice = function (data, last, messageId, mesName, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ voice: proto.Voice.create({\n                    data: new Uint8Array(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var batch = function (cb) {\n        var batchingMessageId = getMessageId();\n        var lastMessageSent = false;\n        var checkLastMessageStatus = function (last) {\n            if (lastMessageSent) {\n                if (last) {\n                    throw new Error(\"Can't send two last items in batch\");\n                }\n                else {\n                    throw new Error(\"Can't send messages in batch after last message have been sent\");\n                }\n            }\n            else if (last) {\n                lastMessageSent = true;\n            }\n        };\n        var upgradedSendText = function () {\n            var _a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                _a[_i] = arguments[_i];\n            }\n            var data = _a[0], params = _a[1], type = _a[2];\n            checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n            return sendText(data, params, type, batchingMessageId);\n        };\n        var upgradedSendSystemMessage = function (data, last, params) {\n            checkLastMessageStatus(last);\n            return sendSystemMessage(data, last, batchingMessageId, params);\n        };\n        var upgradedSendVoice = function (data, last, mesName, params) {\n            checkLastMessageStatus(last);\n            return sendVoice(data, last, batchingMessageId, mesName, params);\n        };\n        var upgradedSendSettings = function (data, last, messageId) {\n            checkLastMessageStatus(last);\n            return sendSettings(data, last, messageId);\n        };\n        return cb({\n            sendText: upgradedSendText,\n            sendSystemMessage: upgradedSendSystemMessage,\n            sendVoice: upgradedSendVoice,\n            sendSettings: upgradedSendSettings,\n            messageId: batchingMessageId,\n        });\n    };\n    return {\n        sendDevice: sendDevice,\n        sendInitialSettings: sendInitialSettings,\n        sendCancel: sendCancel,\n        sendLegacyDevice: sendLegacyDevice,\n        sendSettings: sendSettings,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        batch: batch,\n    };\n};\n\nvar safeJSONParse = function (str, defaultValue) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (err) {\n        return defaultValue;\n    }\n};\nvar compileBasePayload = function (_a) {\n    var userId = _a.userId, token = _a.token, userChannel = _a.userChannel, version = _a.version, messageName = _a.messageName, vpsToken = _a.vpsToken;\n    if (version < 3) {\n        return {\n            userId: userId,\n            token: token,\n            userChannel: userChannel,\n            messageName: messageName,\n            vpsToken: vpsToken,\n            version: version,\n        };\n    }\n    return {\n        token: token,\n        messageName: messageName,\n        version: version,\n    };\n};\nvar appendHeader = function (uint8Array) {\n    // Добавляем 4 байта в начало с длинной сообщения\n    var arrayBuffer = new ArrayBuffer(4);\n    var dataView = new DataView(arrayBuffer, 0);\n    dataView.setInt32(0, uint8Array.length, true);\n    var newUint8Array = new Uint8Array(4 + uint8Array.length);\n    newUint8Array.set(new Uint8Array(arrayBuffer));\n    newUint8Array.set(uint8Array, 4);\n    return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n    // Убираем 4 байта в начале с длинной сообщения\n    var newUint8Array = new Uint8Array(uint8Array).slice(4);\n    return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n    var logger = _a.logger, getToken = _a.getToken, params = __rest(_a, [\"logger\", \"getToken\"]);\n    var configuration = __assign(__assign({}, params), { token: '' });\n    var url = configuration.url, userId = configuration.userId, userChannel = configuration.userChannel, locale = configuration.locale, device = configuration.device, settings = configuration.settings, legacyDevice = configuration.legacyDevice, version = configuration.version, messageName = configuration.messageName, vpsToken = configuration.vpsToken, meta = configuration.meta;\n    var basePayload = compileBasePayload({ userId: userId, token: '', messageName: messageName, vpsToken: vpsToken, userChannel: userChannel, version: version });\n    var _b = createNanoEvents(), on = _b.on, emit = _b.emit;\n    var subscriptions = [];\n    var messageQueue = [];\n    var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n    var currentSettings = { device: device, legacyDevice: legacyDevice, settings: settings, locale: locale };\n    var currentMessageId = Date.now();\n    var status = 'closed';\n    var destroyed = false;\n    var clearReadyTimer; // ид таймера установки состояния ready\n    var getMessageId = function () {\n        return currentMessageId++;\n    };\n    var send = function (message) {\n        var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'outcoming', message: createdMessage });\n        var encodedMessage = proto.Message.encode(createdMessage).finish();\n        var encodedMessageWithHeader = appendHeader(encodedMessage);\n        transport.send(encodedMessageWithHeader);\n        emit('outcoming', createdMessage);\n    };\n    var sendMessage = function (message) {\n        // отправляем инициализационные сообщения или все, когда сессия = ready\n        if (status === 'ready' || (typeof initMessageId !== undefined && message.messageId === initMessageId)) {\n            send(message);\n        }\n        else {\n            // накапливаем сообщения, отправим после успешного коннекта\n            messageQueue.push(message);\n            if (status === 'closed' && !destroyed) {\n                transport.open(url);\n            }\n        }\n    };\n    var _c = createClientMethods({ getMessageId: getMessageId, sendMessage: sendMessage }), sendDeviceOriginal = _c.sendDevice, sendInitialSettingsOriginal = _c.sendInitialSettings, sendCancel = _c.sendCancel, sendLegacyDeviceOriginal = _c.sendLegacyDevice, sendSettingsOriginal = _c.sendSettings, sendText = _c.sendText, sendSystemMessage = _c.sendSystemMessage, sendVoice = _c.sendVoice, batch = _c.batch;\n    var sendDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { device: data });\n        return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var sendInitialSettings = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (data.device && data.settings) {\n            currentSettings = __assign(__assign({}, currentSettings), { device: data.device, settings: data.settings, locale: data.locale || undefined });\n        }\n        return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var sendLegacyDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { legacyDevice: data });\n        return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var updateDefaults = function (obj) {\n        Object.assign(basePayload, obj);\n        Object.assign(configuration, obj);\n    };\n    var updateDevice = function (obj) {\n        var _a, _b;\n        if (obj) {\n            var additionalInfo = obj.additionalInfo, deviceOptions = __rest(obj, [\"additionalInfo\"]);\n            var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {})\n                : {};\n            var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n            currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), { additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo)) });\n        }\n    };\n    var updateSettings = function (obj) {\n        Object.assign(currentSettings.settings, obj);\n        if (status === 'connected' || status === 'ready') {\n            sendSettingsOriginal(obj);\n        }\n    };\n    subscriptions.push(transport.on('connecting', function () {\n        status = 'connecting';\n    }));\n    subscriptions.push(transport.on('close', function () {\n        status = 'closed';\n    }));\n    subscriptions.push(transport.on('ready', function () { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, _b, _c, _d, e_1;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _e.trys.push([0, 2, , 3]);\n                    _b = (_a = Object).assign;\n                    _c = [basePayload];\n                    _d = {};\n                    return [4 /*yield*/, getToken()];\n                case 1:\n                    _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n                    return [3 /*break*/, 3];\n                case 2:\n                    e_1 = _e.sent();\n                    emit('error', {\n                        type: 'GET_TOKEN_ERROR',\n                        message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message,\n                    });\n                    return [2 /*return*/];\n                case 3:\n                    Object.assign(configuration, { token: basePayload.token });\n                    initMessageId = getMessageId();\n                    if (version < 3) {\n                        if (version === 1 && currentSettings.legacyDevice) {\n                            sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n                        }\n                        else if (version === 2 && currentSettings.device) {\n                            sendDevice(currentSettings.device, false, initMessageId);\n                        }\n                        sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n                    }\n                    else {\n                        sendInitialSettings({\n                            userId: userId,\n                            userChannel: userChannel,\n                            device: currentSettings.device,\n                            settings: currentSettings.settings,\n                            locale: version > 3 ? currentSettings.locale : undefined,\n                        }, true, initMessageId, { meta: meta });\n                    }\n                    status = 'connected';\n                    clearTimeout(clearReadyTimer);\n                    /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n                    /// т.к бек может разрывать сокет, если с settings что-то не так\n                    clearReadyTimer = window.setTimeout(function () {\n                        if (status !== 'connected') {\n                            return;\n                        }\n                        status = 'ready';\n                        while (messageQueue.length > 0) {\n                            var message = messageQueue.shift();\n                            if (message) {\n                                send(message);\n                            }\n                        }\n                        emit('ready');\n                    }, 500);\n                    logger === null || logger === void 0 ? void 0 : logger({ type: 'init', params: __assign(__assign({}, configuration), currentSettings) });\n                    return [2 /*return*/];\n            }\n        });\n    }); }));\n    subscriptions.push(transport.on('message', function (message) {\n        var decodedMessage = proto.Message.decode(removeHeader(message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'incoming', message: decodedMessage });\n        emit('incoming', decodedMessage);\n    }));\n    return {\n        clearQueue: function () {\n            messageQueue.splice(0, messageQueue.length);\n        },\n        destroy: function () {\n            destroyed = true;\n            transport.close();\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        on: on,\n        getMessageId: getMessageId,\n        sendCancel: sendCancel,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        send: sendMessage,\n        batch: batch,\n        changeConfiguration: updateDefaults,\n        changeDevice: updateDevice,\n        changeSettings: updateSettings,\n        reconnect: function () {\n            if (status !== 'closed') {\n                transport.reconnect(url); // даем время случиться close\n            }\n            else {\n                transport.open(url);\n            }\n        },\n        get currentMessageId() {\n            return currentMessageId;\n        },\n        get configuration() {\n            return configuration;\n        },\n    };\n};\n\nvar defaultWSCreator = function (url) { return new WebSocket(url); };\nvar createTransport = function (createWS) {\n    if (createWS === void 0) { createWS = defaultWSCreator; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    var status = 'closed';\n    var stopped = false;\n    var ws;\n    var timeOut; // ид таймера автореконнекта\n    var retries = 0; // количество попыток коннекта при ошибке\n    var close = function () {\n        stopped = true;\n        ws && ws.close(); // статус изменится по подписке\n        clearTimeout(timeOut);\n        timeOut = undefined;\n    };\n    var send = function (data) {\n        if (!navigator.onLine) {\n            close();\n            emit('error');\n            return;\n        }\n        ws.send(data);\n    };\n    var open = function (url) {\n        if (status !== 'closed') {\n            return;\n        }\n        status = 'connecting';\n        emit('connecting');\n        // TODO: нужен таймаут для подключения\n        ws = createWS(url);\n        ws.binaryType = 'arraybuffer';\n        ws.addEventListener('open', function () {\n            if (ws.readyState === 1) {\n                retries = 0; // сбрасываем количество попыток реконнекта\n                status = 'ready';\n                emit('ready');\n            }\n        });\n        ws.addEventListener('close', function () {\n            status = 'closed';\n            emit('close');\n        });\n        ws.addEventListener('error', function (e) {\n            if (status !== 'connecting') {\n                throw e;\n            }\n            // пробуем переподключаться, если возникла ошибка при коннекте\n            if (!ws || (ws.readyState === 3 && !stopped)) {\n                if (timeOut) {\n                    clearTimeout(timeOut);\n                }\n                if (retries < 3) {\n                    timeOut = window.setTimeout(function () {\n                        open(url);\n                        retries++;\n                    }, 300 * retries);\n                }\n                else {\n                    retries = 0;\n                    emit('error', e);\n                }\n            }\n        });\n        ws.addEventListener('message', function (e) {\n            emit('message', e.data);\n        });\n    };\n    var reconnect = function (url) {\n        if (status === 'closed') {\n            open(url);\n            return;\n        }\n        close();\n        setTimeout(function () { return reconnect(url); });\n    };\n    return {\n        send: send,\n        open: open,\n        close: close,\n        reconnect: reconnect,\n        on: on,\n    };\n};\n\nvar getMetaPermissons = function (permission) {\n    return Object.keys(permission).map(function (key) { return ({\n        type: key,\n        status: permission[key],\n    }); });\n};\nvar getCurrentLocation = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(function (_a) {\n                    var coords = _a.coords, timestamp = _a.timestamp;\n                    resolve({\n                        lat: coords.latitude.toString(),\n                        lon: coords.longitude.toString(),\n                        accuracy: coords.accuracy,\n                        timestamp: timestamp,\n                    });\n                }, reject, { timeout: 5000 });\n            })];\n    });\n}); };\nvar getTime = function () { return ({\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now(),\n}); };\nvar getAnswerForRequestPermissions = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n        permissions = {\n            record_audio: 'denied_once',\n            geo: 'denied_once',\n            read_contacts: 'denied_permanently',\n            push: 'denied_once',\n        };\n        response = {\n            auto_listening: false,\n            app_info: appInfo,\n            meta: {\n                time: getTime(),\n                permissions: [],\n            },\n            server_action: {\n                action_id: 'command_response',\n                request_message_id: requestMessageId,\n                command_response: {\n                    request_permissions: {\n                        permissions: [],\n                    },\n                },\n            },\n        };\n        return [2 /*return*/, Promise.all(items.map(function (permission) { return __awaiter(void 0, void 0, void 0, function () {\n                var _a, location_1, _b;\n                var _c, _d;\n                return __generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            _a = permission;\n                            switch (_a) {\n                                case 'geo': return [3 /*break*/, 1];\n                            }\n                            return [3 /*break*/, 5];\n                        case 1:\n                            _e.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, getCurrentLocation()];\n                        case 2:\n                            location_1 = _e.sent();\n                            permissions.geo = 'granted';\n                            response.meta.location = location_1;\n                            (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                                type: 'geo',\n                                status: 'granted',\n                            });\n                            return [3 /*break*/, 4];\n                        case 3:\n                            _b = _e.sent();\n                            permissions.geo = 'denied_permanently';\n                            (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                                type: 'geo',\n                                status: 'denied_permanently',\n                            });\n                            return [3 /*break*/, 4];\n                        case 4: return [3 /*break*/, 6];\n                        case 5:\n                            // eslint-disable-next-line no-console\n                            console.warn('Unsupported permission request:', permission);\n                            _e.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); })).then(function () {\n                response.meta.permissions = getMetaPermissons(permissions);\n                return response;\n            })];\n    });\n}); };\n\nvar mtt = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Music2TrackProtocol = (function() {\n    \n        /**\n         * Namespace Music2TrackProtocol.\n         * @exports Music2TrackProtocol\n         * @namespace\n         */\n        var Music2TrackProtocol = {};\n    \n        Music2TrackProtocol.DecoderResult = (function() {\n    \n            /**\n             * Properties of a DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @interface IDecoderResult\n             * @property {string|null} [result] DecoderResult result\n             * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n             * @property {boolean|null} [isFinal] DecoderResult isFinal\n             */\n    \n            /**\n             * Constructs a new DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a DecoderResult.\n             * @implements IDecoderResult\n             * @constructor\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             */\n            function DecoderResult(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * DecoderResult result.\n             * @member {string} result\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.result = \"\";\n    \n            /**\n             * DecoderResult isMusicFound.\n             * @member {boolean} isMusicFound\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isMusicFound = false;\n    \n            /**\n             * DecoderResult isFinal.\n             * @member {boolean} isFinal\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isFinal = false;\n    \n            /**\n             * Creates a new DecoderResult instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n             */\n            DecoderResult.create = function create(properties) {\n                return new DecoderResult(properties);\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.result);\n                if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isMusicFound);\n                if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isFinal);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.DecoderResult();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.result = reader.string();\n                        break;\n                    case 2:\n                        message.isMusicFound = reader.bool();\n                        break;\n                    case 3:\n                        message.isFinal = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a DecoderResult message.\n             * @function verify\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DecoderResult.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    if (!$util.isString(message.result))\n                        return \"result: string expected\";\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    if (typeof message.isMusicFound !== \"boolean\")\n                        return \"isMusicFound: boolean expected\";\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    if (typeof message.isFinal !== \"boolean\")\n                        return \"isFinal: boolean expected\";\n                return null;\n            };\n    \n            /**\n             * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             */\n            DecoderResult.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.DecoderResult)\n                    return object;\n                var message = new $root.Music2TrackProtocol.DecoderResult();\n                if (object.result != null)\n                    message.result = String(object.result);\n                if (object.isMusicFound != null)\n                    message.isMusicFound = Boolean(object.isMusicFound);\n                if (object.isFinal != null)\n                    message.isFinal = Boolean(object.isFinal);\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DecoderResult.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.result = \"\";\n                    object.isMusicFound = false;\n                    object.isFinal = false;\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    object.result = message.result;\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    object.isMusicFound = message.isMusicFound;\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    object.isFinal = message.isFinal;\n                return object;\n            };\n    \n            /**\n             * Converts this DecoderResult to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DecoderResult.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return DecoderResult;\n        })();\n    \n        Music2TrackProtocol.ErrorResponse = (function() {\n    \n            /**\n             * Properties of an ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IErrorResponse\n             * @property {string|null} [errorMessage] ErrorResponse errorMessage\n             * @property {number|null} [errorCode] ErrorResponse errorCode\n             */\n    \n            /**\n             * Constructs a new ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents an ErrorResponse.\n             * @implements IErrorResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             */\n            function ErrorResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ErrorResponse errorMessage.\n             * @member {string} errorMessage\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorMessage = \"\";\n    \n            /**\n             * ErrorResponse errorCode.\n             * @member {number} errorCode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorCode = 0;\n    \n            /**\n             * Creates a new ErrorResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n             */\n            ErrorResponse.create = function create(properties) {\n                return new ErrorResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n                if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorCode);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.ErrorResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.errorMessage = reader.string();\n                        break;\n                    case 2:\n                        message.errorCode = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies an ErrorResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ErrorResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    if (!$util.isString(message.errorMessage))\n                        return \"errorMessage: string expected\";\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    if (!$util.isInteger(message.errorCode))\n                        return \"errorCode: integer expected\";\n                return null;\n            };\n    \n            /**\n             * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             */\n            ErrorResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.ErrorResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.ErrorResponse();\n                if (object.errorMessage != null)\n                    message.errorMessage = String(object.errorMessage);\n                if (object.errorCode != null)\n                    message.errorCode = object.errorCode | 0;\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ErrorResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.errorMessage = \"\";\n                    object.errorCode = 0;\n                }\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    object.errorMessage = message.errorMessage;\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    object.errorCode = message.errorCode;\n                return object;\n            };\n    \n            /**\n             * Converts this ErrorResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ErrorResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ErrorResponse;\n        })();\n    \n        Music2TrackProtocol.MttResponse = (function() {\n    \n            /**\n             * Properties of a MttResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IMttResponse\n             * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n             * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n             */\n    \n            /**\n             * Constructs a new MttResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a MttResponse.\n             * @implements IMttResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             */\n            function MttResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * MttResponse decoderResultField.\n             * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.decoderResultField = null;\n    \n            /**\n             * MttResponse errorResponse.\n             * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.errorResponse = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * MttResponse MessageType.\n             * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n                get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Creates a new MttResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n             */\n            MttResponse.create = function create(properties) {\n                return new MttResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                    $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                    $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.MttResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a MttResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MttResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n                        if (error)\n                            return \"decoderResultField.\" + error;\n                    }\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    if (properties.MessageType === 1)\n                        return \"MessageType: multiple values\";\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n                        if (error)\n                            return \"errorResponse.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             */\n            MttResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.MttResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.MttResponse();\n                if (object.decoderResultField != null) {\n                    if (typeof object.decoderResultField !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n                    message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n                }\n                if (object.errorResponse != null) {\n                    if (typeof object.errorResponse !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n                    message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.MttResponse} message MttResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MttResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n                    if (options.oneofs)\n                        object.MessageType = \"decoderResultField\";\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n                    if (options.oneofs)\n                        object.MessageType = \"errorResponse\";\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this MttResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MttResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return MttResponse;\n        })();\n    \n        return Music2TrackProtocol;\n    })();\n\n    return $root;\n});\n});\n\nvar createMusicRecognizer = function (voiceListener) {\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener\n            .listen(function (data, last) { return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION); })\n            .then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId &&\n                    message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n                    if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n                        return;\n                    }\n                    var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data), decoderResultField = _c.decoderResultField, errorResponse = _c.errorResponse;\n                    if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n                        off();\n                        stop();\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar asr = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Variables = (function() {\n    \n        /**\n         * Properties of a Variables.\n         * @exports IVariables\n         * @interface IVariables\n         * @property {Object.<string,string>|null} [variables] Variables variables\n         */\n    \n        /**\n         * Constructs a new Variables.\n         * @exports Variables\n         * @classdesc Represents a Variables.\n         * @implements IVariables\n         * @constructor\n         * @param {IVariables=} [properties] Properties to set\n         */\n        function Variables(properties) {\n            this.variables = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Variables variables.\n         * @member {Object.<string,string>} variables\n         * @memberof Variables\n         * @instance\n         */\n        Variables.prototype.variables = $util.emptyObject;\n    \n        /**\n         * Creates a new Variables instance using the specified properties.\n         * @function create\n         * @memberof Variables\n         * @static\n         * @param {IVariables=} [properties] Properties to set\n         * @returns {Variables} Variables instance\n         */\n        Variables.create = function create(properties) {\n            return new Variables(properties);\n        };\n    \n        /**\n         * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encode\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer.\n         * @function decode\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Variables(), key, value;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (message.variables === $util.emptyObject)\n                        message.variables = {};\n                    var end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = \"\";\n                    while (reader.pos < end2) {\n                        var tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.string();\n                            break;\n                        case 2:\n                            value = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.variables[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Variables message.\n         * @function verify\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Variables.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                if (!$util.isObject(message.variables))\n                    return \"variables: object expected\";\n                var key = Object.keys(message.variables);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variables[key[i]]))\n                        return \"variables: string{k:string} expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Variables} Variables\n         */\n        Variables.fromObject = function fromObject(object) {\n            if (object instanceof $root.Variables)\n                return object;\n            var message = new $root.Variables();\n            if (object.variables) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".Variables.variables: object expected\");\n                message.variables = {};\n                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)\n                    message.variables[keys[i]] = String(object.variables[keys[i]]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Variables message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Variables\n         * @static\n         * @param {Variables} message Variables\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Variables.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variables = {};\n            var keys2;\n            if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n                object.variables = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variables[keys2[j]] = message.variables[keys2[j]];\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this Variables to JSON.\n         * @function toJSON\n         * @memberof Variables\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Variables.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Variables;\n    })();\n    \n    $root.UndecodedSeconds = (function() {\n    \n        /**\n         * Properties of an UndecodedSeconds.\n         * @exports IUndecodedSeconds\n         * @interface IUndecodedSeconds\n         * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n         */\n    \n        /**\n         * Constructs a new UndecodedSeconds.\n         * @exports UndecodedSeconds\n         * @classdesc Represents an UndecodedSeconds.\n         * @implements IUndecodedSeconds\n         * @constructor\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         */\n        function UndecodedSeconds(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * UndecodedSeconds undecodedSeconds.\n         * @member {number} undecodedSeconds\n         * @memberof UndecodedSeconds\n         * @instance\n         */\n        UndecodedSeconds.prototype.undecodedSeconds = 0;\n    \n        /**\n         * Creates a new UndecodedSeconds instance using the specified properties.\n         * @function create\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         * @returns {UndecodedSeconds} UndecodedSeconds instance\n         */\n        UndecodedSeconds.create = function create(properties) {\n            return new UndecodedSeconds(properties);\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.undecodedSeconds);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer.\n         * @function decode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UndecodedSeconds();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSeconds = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an UndecodedSeconds message.\n         * @function verify\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UndecodedSeconds.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                if (typeof message.undecodedSeconds !== \"number\")\n                    return \"undecodedSeconds: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         */\n        UndecodedSeconds.fromObject = function fromObject(object) {\n            if (object instanceof $root.UndecodedSeconds)\n                return object;\n            var message = new $root.UndecodedSeconds();\n            if (object.undecodedSeconds != null)\n                message.undecodedSeconds = Number(object.undecodedSeconds);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {UndecodedSeconds} message UndecodedSeconds\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UndecodedSeconds.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.undecodedSeconds = 0;\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n            return object;\n        };\n    \n        /**\n         * Converts this UndecodedSeconds to JSON.\n         * @function toJSON\n         * @memberof UndecodedSeconds\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UndecodedSeconds.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return UndecodedSeconds;\n    })();\n    \n    $root.FullyFinalized = (function() {\n    \n        /**\n         * Properties of a FullyFinalized.\n         * @exports IFullyFinalized\n         * @interface IFullyFinalized\n         */\n    \n        /**\n         * Constructs a new FullyFinalized.\n         * @exports FullyFinalized\n         * @classdesc Represents a FullyFinalized.\n         * @implements IFullyFinalized\n         * @constructor\n         * @param {IFullyFinalized=} [properties] Properties to set\n         */\n        function FullyFinalized(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Creates a new FullyFinalized instance using the specified properties.\n         * @function create\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized=} [properties] Properties to set\n         * @returns {FullyFinalized} FullyFinalized instance\n         */\n        FullyFinalized.create = function create(properties) {\n            return new FullyFinalized(properties);\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encode\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer.\n         * @function decode\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FullyFinalized();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a FullyFinalized message.\n         * @function verify\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FullyFinalized.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {FullyFinalized} FullyFinalized\n         */\n        FullyFinalized.fromObject = function fromObject(object) {\n            if (object instanceof $root.FullyFinalized)\n                return object;\n            return new $root.FullyFinalized();\n        };\n    \n        /**\n         * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {FullyFinalized} message FullyFinalized\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FullyFinalized.toObject = function toObject() {\n            return {};\n        };\n    \n        /**\n         * Converts this FullyFinalized to JSON.\n         * @function toJSON\n         * @memberof FullyFinalized\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FullyFinalized.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return FullyFinalized;\n    })();\n    \n    $root.EmotionResult = (function() {\n    \n        /**\n         * Properties of an EmotionResult.\n         * @exports IEmotionResult\n         * @interface IEmotionResult\n         * @property {string|null} [name] EmotionResult name\n         * @property {number|null} [confidence] EmotionResult confidence\n         */\n    \n        /**\n         * Constructs a new EmotionResult.\n         * @exports EmotionResult\n         * @classdesc Represents an EmotionResult.\n         * @implements IEmotionResult\n         * @constructor\n         * @param {IEmotionResult=} [properties] Properties to set\n         */\n        function EmotionResult(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * EmotionResult name.\n         * @member {string} name\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.name = \"\";\n    \n        /**\n         * EmotionResult confidence.\n         * @member {number} confidence\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.confidence = 0;\n    \n        /**\n         * Creates a new EmotionResult instance using the specified properties.\n         * @function create\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult=} [properties] Properties to set\n         * @returns {EmotionResult} EmotionResult instance\n         */\n        EmotionResult.create = function create(properties) {\n            return new EmotionResult(properties);\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encode\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EmotionResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.confidence = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an EmotionResult message.\n         * @function verify\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EmotionResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                if (typeof message.confidence !== \"number\")\n                    return \"confidence: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {EmotionResult} EmotionResult\n         */\n        EmotionResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.EmotionResult)\n                return object;\n            var message = new $root.EmotionResult();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.confidence != null)\n                message.confidence = Number(object.confidence);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof EmotionResult\n         * @static\n         * @param {EmotionResult} message EmotionResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmotionResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.confidence = 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n            return object;\n        };\n    \n        /**\n         * Converts this EmotionResult to JSON.\n         * @function toJSON\n         * @memberof EmotionResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmotionResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return EmotionResult;\n    })();\n    \n    $root.Hypothesis = (function() {\n    \n        /**\n         * Properties of a Hypothesis.\n         * @exports IHypothesis\n         * @interface IHypothesis\n         * @property {string|null} [words] Hypothesis words\n         * @property {number|null} [acousticCost] Hypothesis acousticCost\n         * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n         * @property {number|null} [finalCost] Hypothesis finalCost\n         * @property {number|null} [phraseStart] Hypothesis phraseStart\n         * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n         * @property {string|null} [normalizedText] Hypothesis normalizedText\n         */\n    \n        /**\n         * Constructs a new Hypothesis.\n         * @exports Hypothesis\n         * @classdesc Represents a Hypothesis.\n         * @implements IHypothesis\n         * @constructor\n         * @param {IHypothesis=} [properties] Properties to set\n         */\n        function Hypothesis(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Hypothesis words.\n         * @member {string} words\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.words = \"\";\n    \n        /**\n         * Hypothesis acousticCost.\n         * @member {number} acousticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.acousticCost = 0;\n    \n        /**\n         * Hypothesis linguisticCost.\n         * @member {number} linguisticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.linguisticCost = 0;\n    \n        /**\n         * Hypothesis finalCost.\n         * @member {number} finalCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.finalCost = 0;\n    \n        /**\n         * Hypothesis phraseStart.\n         * @member {number} phraseStart\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseStart = 0;\n    \n        /**\n         * Hypothesis phraseEnd.\n         * @member {number} phraseEnd\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseEnd = 0;\n    \n        /**\n         * Hypothesis normalizedText.\n         * @member {string} normalizedText\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.normalizedText = \"\";\n    \n        /**\n         * Creates a new Hypothesis instance using the specified properties.\n         * @function create\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis=} [properties] Properties to set\n         * @returns {Hypothesis} Hypothesis instance\n         */\n        Hypothesis.create = function create(properties) {\n            return new Hypothesis(properties);\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encode\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.words != null && Object.hasOwnProperty.call(message, \"words\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.words);\n            if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.acousticCost);\n            if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.linguisticCost);\n            if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.finalCost);\n            if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.phraseStart);\n            if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\"))\n                writer.uint32(/* id 6, wireType 5 =*/53).float(message.phraseEnd);\n            if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.normalizedText);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer.\n         * @function decode\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Hypothesis();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.words = reader.string();\n                    break;\n                case 2:\n                    message.acousticCost = reader.float();\n                    break;\n                case 3:\n                    message.linguisticCost = reader.float();\n                    break;\n                case 4:\n                    message.finalCost = reader.float();\n                    break;\n                case 5:\n                    message.phraseStart = reader.float();\n                    break;\n                case 6:\n                    message.phraseEnd = reader.float();\n                    break;\n                case 7:\n                    message.normalizedText = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Hypothesis message.\n         * @function verify\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Hypothesis.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                if (!$util.isString(message.words))\n                    return \"words: string expected\";\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                if (typeof message.acousticCost !== \"number\")\n                    return \"acousticCost: number expected\";\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                if (typeof message.linguisticCost !== \"number\")\n                    return \"linguisticCost: number expected\";\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                if (typeof message.finalCost !== \"number\")\n                    return \"finalCost: number expected\";\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                if (typeof message.phraseStart !== \"number\")\n                    return \"phraseStart: number expected\";\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                if (typeof message.phraseEnd !== \"number\")\n                    return \"phraseEnd: number expected\";\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                if (!$util.isString(message.normalizedText))\n                    return \"normalizedText: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Hypothesis} Hypothesis\n         */\n        Hypothesis.fromObject = function fromObject(object) {\n            if (object instanceof $root.Hypothesis)\n                return object;\n            var message = new $root.Hypothesis();\n            if (object.words != null)\n                message.words = String(object.words);\n            if (object.acousticCost != null)\n                message.acousticCost = Number(object.acousticCost);\n            if (object.linguisticCost != null)\n                message.linguisticCost = Number(object.linguisticCost);\n            if (object.finalCost != null)\n                message.finalCost = Number(object.finalCost);\n            if (object.phraseStart != null)\n                message.phraseStart = Number(object.phraseStart);\n            if (object.phraseEnd != null)\n                message.phraseEnd = Number(object.phraseEnd);\n            if (object.normalizedText != null)\n                message.normalizedText = String(object.normalizedText);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Hypothesis} message Hypothesis\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Hypothesis.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.words = \"\";\n                object.acousticCost = 0;\n                object.linguisticCost = 0;\n                object.finalCost = 0;\n                object.phraseStart = 0;\n                object.phraseEnd = 0;\n                object.normalizedText = \"\";\n            }\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                object.words = message.words;\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                object.normalizedText = message.normalizedText;\n            return object;\n        };\n    \n        /**\n         * Converts this Hypothesis to JSON.\n         * @function toJSON\n         * @memberof Hypothesis\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Hypothesis.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Hypothesis;\n    })();\n    \n    $root.DecoderResult = (function() {\n    \n        /**\n         * Properties of a DecoderResult.\n         * @exports IDecoderResult\n         * @interface IDecoderResult\n         * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n         * @property {number|null} [chunkStart] DecoderResult chunkStart\n         * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n         * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n         * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n         * @property {IVariables|null} [variables] DecoderResult variables\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n         * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n         */\n    \n        /**\n         * Constructs a new DecoderResult.\n         * @exports DecoderResult\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n            this.hypothesis = [];\n            this.emotionResult = [];\n            this.contextAnswer = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * DecoderResult hypothesis.\n         * @member {Array.<IHypothesis>} hypothesis\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.hypothesis = $util.emptyArray;\n    \n        /**\n         * DecoderResult chunkStart.\n         * @member {number} chunkStart\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkStart = 0;\n    \n        /**\n         * DecoderResult chunkEnd.\n         * @member {number} chunkEnd\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkEnd = 0;\n    \n        /**\n         * DecoderResult timeEndpointDetectionMs.\n         * @member {number} timeEndpointDetectionMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeEndpointDetectionMs = 0;\n    \n        /**\n         * DecoderResult timeDecodingMs.\n         * @member {number} timeDecodingMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeDecodingMs = 0;\n    \n        /**\n         * DecoderResult variables.\n         * @member {IVariables|null|undefined} variables\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.variables = null;\n    \n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isFinal = false;\n    \n        /**\n         * DecoderResult emotionResult.\n         * @member {Array.<IEmotionResult>} emotionResult\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.emotionResult = $util.emptyArray;\n    \n        /**\n         * DecoderResult contextAnswer.\n         * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.contextAnswer = $util.emptyArray;\n    \n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult=} [properties] Properties to set\n         * @returns {DecoderResult} DecoderResult instance\n         */\n        DecoderResult.create = function create(properties) {\n            return new DecoderResult(properties);\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hypothesis != null && message.hypothesis.length)\n                for (var i = 0; i < message.hypothesis.length; ++i)\n                    $root.Hypothesis.encode(message.hypothesis[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.chunkStart);\n            if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.chunkEnd);\n            if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.timeEndpointDetectionMs);\n            if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.timeDecodingMs);\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                $root.Variables.encode(message.variables, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isFinal);\n            if (message.emotionResult != null && message.emotionResult.length)\n                for (var i = 0; i < message.emotionResult.length; ++i)\n                    $root.EmotionResult.encode(message.emotionResult[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.contextAnswer != null && message.contextAnswer.length)\n                for (var i = 0; i < message.contextAnswer.length; ++i)\n                    $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.hypothesis && message.hypothesis.length))\n                        message.hypothesis = [];\n                    message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.chunkStart = reader.float();\n                    break;\n                case 3:\n                    message.chunkEnd = reader.float();\n                    break;\n                case 4:\n                    message.timeEndpointDetectionMs = reader.float();\n                    break;\n                case 5:\n                    message.timeDecodingMs = reader.float();\n                    break;\n                case 6:\n                    message.variables = $root.Variables.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.isFinal = reader.bool();\n                    break;\n                case 8:\n                    if (!(message.emotionResult && message.emotionResult.length))\n                        message.emotionResult = [];\n                    message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    if (!(message.contextAnswer && message.contextAnswer.length))\n                        message.contextAnswer = [];\n                    message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecoderResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n                if (!Array.isArray(message.hypothesis))\n                    return \"hypothesis: array expected\";\n                for (var i = 0; i < message.hypothesis.length; ++i) {\n                    var error = $root.Hypothesis.verify(message.hypothesis[i]);\n                    if (error)\n                        return \"hypothesis.\" + error;\n                }\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                if (typeof message.chunkStart !== \"number\")\n                    return \"chunkStart: number expected\";\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                if (typeof message.chunkEnd !== \"number\")\n                    return \"chunkEnd: number expected\";\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                if (typeof message.timeEndpointDetectionMs !== \"number\")\n                    return \"timeEndpointDetectionMs: number expected\";\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                if (typeof message.timeDecodingMs !== \"number\")\n                    return \"timeDecodingMs: number expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                var error = $root.Variables.verify(message.variables);\n                if (error)\n                    return \"variables.\" + error;\n            }\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                if (typeof message.isFinal !== \"boolean\")\n                    return \"isFinal: boolean expected\";\n            if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n                if (!Array.isArray(message.emotionResult))\n                    return \"emotionResult: array expected\";\n                for (var i = 0; i < message.emotionResult.length; ++i) {\n                    var error = $root.EmotionResult.verify(message.emotionResult[i]);\n                    if (error)\n                        return \"emotionResult.\" + error;\n                }\n            }\n            if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n                if (!Array.isArray(message.contextAnswer))\n                    return \"contextAnswer: array expected\";\n                for (var i = 0; i < message.contextAnswer.length; ++i) {\n                    var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n                    if (error)\n                        return \"contextAnswer.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult} DecoderResult\n         */\n        DecoderResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult)\n                return object;\n            var message = new $root.DecoderResult();\n            if (object.hypothesis) {\n                if (!Array.isArray(object.hypothesis))\n                    throw TypeError(\".DecoderResult.hypothesis: array expected\");\n                message.hypothesis = [];\n                for (var i = 0; i < object.hypothesis.length; ++i) {\n                    if (typeof object.hypothesis[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.hypothesis: object expected\");\n                    message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n                }\n            }\n            if (object.chunkStart != null)\n                message.chunkStart = Number(object.chunkStart);\n            if (object.chunkEnd != null)\n                message.chunkEnd = Number(object.chunkEnd);\n            if (object.timeEndpointDetectionMs != null)\n                message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n            if (object.timeDecodingMs != null)\n                message.timeDecodingMs = Number(object.timeDecodingMs);\n            if (object.variables != null) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".DecoderResult.variables: object expected\");\n                message.variables = $root.Variables.fromObject(object.variables);\n            }\n            if (object.isFinal != null)\n                message.isFinal = Boolean(object.isFinal);\n            if (object.emotionResult) {\n                if (!Array.isArray(object.emotionResult))\n                    throw TypeError(\".DecoderResult.emotionResult: array expected\");\n                message.emotionResult = [];\n                for (var i = 0; i < object.emotionResult.length; ++i) {\n                    if (typeof object.emotionResult[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.emotionResult: object expected\");\n                    message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n                }\n            }\n            if (object.contextAnswer) {\n                if (!Array.isArray(object.contextAnswer))\n                    throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n                message.contextAnswer = [];\n                for (var i = 0; i < object.contextAnswer.length; ++i) {\n                    if (typeof object.contextAnswer[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n                    message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult\n         * @static\n         * @param {DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecoderResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.hypothesis = [];\n                object.emotionResult = [];\n                object.contextAnswer = [];\n            }\n            if (options.defaults) {\n                object.chunkStart = 0;\n                object.chunkEnd = 0;\n                object.timeEndpointDetectionMs = 0;\n                object.timeDecodingMs = 0;\n                object.variables = null;\n                object.isFinal = false;\n            }\n            if (message.hypothesis && message.hypothesis.length) {\n                object.hypothesis = [];\n                for (var j = 0; j < message.hypothesis.length; ++j)\n                    object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n            if (message.variables != null && message.hasOwnProperty(\"variables\"))\n                object.variables = $root.Variables.toObject(message.variables, options);\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                object.isFinal = message.isFinal;\n            if (message.emotionResult && message.emotionResult.length) {\n                object.emotionResult = [];\n                for (var j = 0; j < message.emotionResult.length; ++j)\n                    object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n            }\n            if (message.contextAnswer && message.contextAnswer.length) {\n                object.contextAnswer = [];\n                for (var j = 0; j < message.contextAnswer.length; ++j)\n                    object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecoderResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        DecoderResult.ContextAnswer = (function() {\n    \n            /**\n             * Properties of a ContextAnswer.\n             * @memberof DecoderResult\n             * @interface IContextAnswer\n             * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n             */\n    \n            /**\n             * Constructs a new ContextAnswer.\n             * @memberof DecoderResult\n             * @classdesc Represents a ContextAnswer.\n             * @implements IContextAnswer\n             * @constructor\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             */\n            function ContextAnswer(properties) {\n                this.contextResult = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ContextAnswer contextResult.\n             * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             */\n            ContextAnswer.prototype.contextResult = $util.emptyArray;\n    \n            /**\n             * Creates a new ContextAnswer instance using the specified properties.\n             * @function create\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n             */\n            ContextAnswer.create = function create(properties) {\n                return new ContextAnswer(properties);\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.contextResult != null && message.contextResult.length)\n                    for (var i = 0; i < message.contextResult.length; ++i)\n                        $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer.\n             * @function decode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.contextResult && message.contextResult.length))\n                            message.contextResult = [];\n                        message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a ContextAnswer message.\n             * @function verify\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ContextAnswer.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n                    if (!Array.isArray(message.contextResult))\n                        return \"contextResult: array expected\";\n                    for (var i = 0; i < message.contextResult.length; ++i) {\n                        var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n                        if (error)\n                            return \"contextResult.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             */\n            ContextAnswer.fromObject = function fromObject(object) {\n                if (object instanceof $root.DecoderResult.ContextAnswer)\n                    return object;\n                var message = new $root.DecoderResult.ContextAnswer();\n                if (object.contextResult) {\n                    if (!Array.isArray(object.contextResult))\n                        throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n                    message.contextResult = [];\n                    for (var i = 0; i < object.contextResult.length; ++i) {\n                        if (typeof object.contextResult[i] !== \"object\")\n                            throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n                        message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.ContextAnswer} message ContextAnswer\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ContextAnswer.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.contextResult = [];\n                if (message.contextResult && message.contextResult.length) {\n                    object.contextResult = [];\n                    for (var j = 0; j < message.contextResult.length; ++j)\n                        object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this ContextAnswer to JSON.\n             * @function toJSON\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ContextAnswer.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            ContextAnswer.ContextRef = (function() {\n    \n                /**\n                 * Properties of a ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @interface IContextRef\n                 * @property {string|null} [id] ContextRef id\n                 * @property {number|null} [index] ContextRef index\n                 * @property {string|null} [originalValue] ContextRef originalValue\n                 * @property {string|null} [predictedValue] ContextRef predictedValue\n                 * @property {number|null} [score] ContextRef score\n                 */\n    \n                /**\n                 * Constructs a new ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @classdesc Represents a ContextRef.\n                 * @implements IContextRef\n                 * @constructor\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 */\n                function ContextRef(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n    \n                /**\n                 * ContextRef id.\n                 * @member {string} id\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.id = \"\";\n    \n                /**\n                 * ContextRef index.\n                 * @member {number} index\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.index = 0;\n    \n                /**\n                 * ContextRef originalValue.\n                 * @member {string} originalValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.originalValue = \"\";\n    \n                /**\n                 * ContextRef predictedValue.\n                 * @member {string} predictedValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.predictedValue = \"\";\n    \n                /**\n                 * ContextRef score.\n                 * @member {number} score\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.score = 0;\n    \n                /**\n                 * Creates a new ContextRef instance using the specified properties.\n                 * @function create\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n                 */\n                ContextRef.create = function create(properties) {\n                    return new ContextRef(properties);\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);\n                    if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originalValue);\n                    if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.predictedValue);\n                    if (message.score != null && Object.hasOwnProperty.call(message, \"score\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).float(message.score);\n                    return writer;\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.index = reader.int32();\n                            break;\n                        case 3:\n                            message.originalValue = reader.string();\n                            break;\n                        case 4:\n                            message.predictedValue = reader.string();\n                            break;\n                        case 5:\n                            message.score = reader.float();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n    \n                /**\n                 * Verifies a ContextRef message.\n                 * @function verify\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ContextRef.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        if (!$util.isInteger(message.index))\n                            return \"index: integer expected\";\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        if (!$util.isString(message.originalValue))\n                            return \"originalValue: string expected\";\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        if (!$util.isString(message.predictedValue))\n                            return \"predictedValue: string expected\";\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        if (typeof message.score !== \"number\")\n                            return \"score: number expected\";\n                    return null;\n                };\n    \n                /**\n                 * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 */\n                ContextRef.fromObject = function fromObject(object) {\n                    if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef)\n                        return object;\n                    var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.index != null)\n                        message.index = object.index | 0;\n                    if (object.originalValue != null)\n                        message.originalValue = String(object.originalValue);\n                    if (object.predictedValue != null)\n                        message.predictedValue = String(object.predictedValue);\n                    if (object.score != null)\n                        message.score = Number(object.score);\n                    return message;\n                };\n    \n                /**\n                 * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ContextRef.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.index = 0;\n                        object.originalValue = \"\";\n                        object.predictedValue = \"\";\n                        object.score = 0;\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        object.index = message.index;\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        object.originalValue = message.originalValue;\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        object.predictedValue = message.predictedValue;\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n                    return object;\n                };\n    \n                /**\n                 * Converts this ContextRef to JSON.\n                 * @function toJSON\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ContextRef.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n    \n                return ContextRef;\n            })();\n    \n            return ContextAnswer;\n        })();\n    \n        return DecoderResult;\n    })();\n    \n    $root.ErrorResponse = (function() {\n    \n        /**\n         * Properties of an ErrorResponse.\n         * @exports IErrorResponse\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         */\n    \n        /**\n         * Constructs a new ErrorResponse.\n         * @exports ErrorResponse\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorMessage = \"\";\n    \n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse=} [properties] Properties to set\n         * @returns {ErrorResponse} ErrorResponse instance\n         */\n        ErrorResponse.create = function create(properties) {\n            return new ErrorResponse(properties);\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ErrorResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.errorMessage = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrorResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                if (!$util.isString(message.errorMessage))\n                    return \"errorMessage: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.ErrorResponse)\n                return object;\n            var message = new $root.ErrorResponse();\n            if (object.errorMessage != null)\n                message.errorMessage = String(object.errorMessage);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.errorMessage = \"\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                object.errorMessage = message.errorMessage;\n            return object;\n        };\n    \n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return ErrorResponse;\n    })();\n    \n    $root.PacketWrapperFromServer = (function() {\n    \n        /**\n         * Properties of a PacketWrapperFromServer.\n         * @exports IPacketWrapperFromServer\n         * @interface IPacketWrapperFromServer\n         * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n         * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n         * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n         * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n         */\n    \n        /**\n         * Constructs a new PacketWrapperFromServer.\n         * @exports PacketWrapperFromServer\n         * @classdesc Represents a PacketWrapperFromServer.\n         * @implements IPacketWrapperFromServer\n         * @constructor\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         */\n        function PacketWrapperFromServer(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * PacketWrapperFromServer undecodedSecondsField.\n         * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n    \n        /**\n         * PacketWrapperFromServer fullyFinalizedField.\n         * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n    \n        /**\n         * PacketWrapperFromServer decoderResultField.\n         * @member {IDecoderResult|null|undefined} decoderResultField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.decoderResultField = null;\n    \n        /**\n         * PacketWrapperFromServer errorResponse.\n         * @member {IErrorResponse|null|undefined} errorResponse\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.errorResponse = null;\n    \n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n    \n        /**\n         * PacketWrapperFromServer MessageType.\n         * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n            get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n    \n        /**\n         * Creates a new PacketWrapperFromServer instance using the specified properties.\n         * @function create\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n         */\n        PacketWrapperFromServer.create = function create(properties) {\n            return new PacketWrapperFromServer(properties);\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\"))\n                $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\"))\n                $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                $root.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                $root.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n         * @function decode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PacketWrapperFromServer();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a PacketWrapperFromServer message.\n         * @function verify\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PacketWrapperFromServer.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                properties.MessageType = 1;\n                {\n                    var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n                    if (error)\n                        return \"undecodedSecondsField.\" + error;\n                }\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n                    if (error)\n                        return \"fullyFinalizedField.\" + error;\n                }\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.DecoderResult.verify(message.decoderResultField);\n                    if (error)\n                        return \"decoderResultField.\" + error;\n                }\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.ErrorResponse.verify(message.errorResponse);\n                    if (error)\n                        return \"errorResponse.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         */\n        PacketWrapperFromServer.fromObject = function fromObject(object) {\n            if (object instanceof $root.PacketWrapperFromServer)\n                return object;\n            var message = new $root.PacketWrapperFromServer();\n            if (object.undecodedSecondsField != null) {\n                if (typeof object.undecodedSecondsField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n                message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n            }\n            if (object.fullyFinalizedField != null) {\n                if (typeof object.fullyFinalizedField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n                message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n            }\n            if (object.decoderResultField != null) {\n                if (typeof object.decoderResultField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n                message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n            }\n            if (object.errorResponse != null) {\n                if (typeof object.errorResponse !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n                message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PacketWrapperFromServer.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n                if (options.oneofs)\n                    object.MessageType = \"undecodedSecondsField\";\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n                if (options.oneofs)\n                    object.MessageType = \"fullyFinalizedField\";\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n                if (options.oneofs)\n                    object.MessageType = \"decoderResultField\";\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n                if (options.oneofs)\n                    object.MessageType = \"errorResponse\";\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this PacketWrapperFromServer to JSON.\n         * @function toJSON\n         * @memberof PacketWrapperFromServer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return PacketWrapperFromServer;\n    })();\n\n    return $root;\n});\n});\n\nvar createSpeechRecognizer = function (voiceListener) {\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener.listen(sendVoice).then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n                    if (message.text) {\n                        emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n                        if (message.last === 1) {\n                            off();\n                            stop();\n                        }\n                    }\n                    if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n                        var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n                        if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n                            emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n                            if (decoderResultField.isFinal) {\n                                off();\n                                stop();\n                            }\n                        }\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\nvar createAudioContext = function (options) {\n    if (window.AudioContext) {\n        return new AudioContext(options);\n    }\n    if (window.webkitAudioContext) {\n        // eslint-disable-next-line new-cap\n        return new window.webkitAudioContext();\n    }\n    throw new Error('Audio not supported');\n};\nvar _a = createNanoEvents(), on = _a.on, emit = _a.emit;\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\nvar resolveAudioContext = function (onReady) {\n    if (!audioContext) {\n        var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n        var context_1 = createAudioContext();\n        audioContext = {\n            context: context_1,\n            ready: !isSafari_1 && context_1.state === 'running',\n            on: on,\n        };\n        /// Контекст может быть не готов для использования сразу после создания\n        /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n        if (!audioContext.ready) {\n            var handleClick_1 = function () {\n                document.removeEventListener('click', handleClick_1);\n                document.removeEventListener('touchstart', handleClick_1);\n                if (isSafari_1) {\n                    /// проигрываем тишину, т.к нужно что-то проиграть,\n                    /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n                    var oscillator = audioContext.context.createOscillator();\n                    oscillator.frequency.value = 0;\n                    oscillator.connect(audioContext.context.destination);\n                    oscillator.start(0);\n                    oscillator.stop(0.5);\n                }\n                if (audioContext.context.state === 'suspended') {\n                    /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n                    /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n                    /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n                    audioContext.context.resume();\n                }\n                audioContext.ready = true;\n                emit('ready');\n            };\n            /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n            /// необходимо событие от пользователя\n            // для пк\n            document.addEventListener('click', handleClick_1);\n            // для мобильных устройств\n            document.addEventListener('touchstart', handleClick_1);\n        }\n    }\n    if (audioContext.ready) {\n        onReady && onReady(audioContext.context);\n    }\n    else {\n        var unsubscribe_1 = on('ready', function () {\n            onReady(audioContext.context);\n            unsubscribe_1();\n        });\n    }\n};\n\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\nvar downsampleBuffer = function (buffer, inSampleRate, outSampleRate) {\n    if (outSampleRate > inSampleRate) {\n        throw new Error('downsampling rate show be smaller than original sample rate');\n    }\n    var sampleRateRatio = inSampleRate / outSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Int16Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n        var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n        var accum = 0;\n        var count = 0;\n        for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i];\n            count++;\n        }\n        result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n    }\n    return result.buffer;\n};\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\nvar createAudioRecorder = function (stream, cb) {\n    return new Promise(function (resolve) {\n        var state = 'inactive';\n        var input;\n        var stop = function () {\n            if (state === 'inactive') {\n                throw new Error(\"Can't stop inactive recorder\");\n            }\n            state = 'inactive';\n            stream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n            input.disconnect();\n        };\n        var start = function () {\n            if (state !== 'inactive') {\n                throw new Error(\"Can't start not inactive recorder\");\n            }\n            state = 'recording';\n            if (!context) {\n                context = createAudioContext({\n                    // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n                    sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE,\n                });\n            }\n            input = context.createMediaStreamSource(stream);\n            if (!processor) {\n                processor = context.createScriptProcessor(2048, 1, 1);\n            }\n            var listener = function (e) {\n                var buffer = e.inputBuffer.getChannelData(0);\n                var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n                var last = state === 'inactive';\n                cb(data, last);\n                if (last) {\n                    processor.removeEventListener('audioprocess', listener);\n                }\n            };\n            processor.addEventListener('audioprocess', listener);\n            processor.addEventListener('audioprocess', function () { return resolve(stop); }, { once: true });\n            input.connect(processor);\n            processor.connect(context.destination);\n        };\n        start();\n    });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\nvar createNavigatorAudioProvider = function (cb) {\n    return navigator.mediaDevices\n        .getUserMedia({\n        audio: true,\n    })\n        .then(function (stream) { return createAudioRecorder(stream, cb); });\n};\n\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\nvar createVoiceListener = function (createAudioProvider) {\n    if (createAudioProvider === void 0) { createAudioProvider = createNavigatorAudioProvider; }\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var stopRecord;\n    var status = 'stopped';\n    var stop = function () {\n        status = 'stopped';\n        stopRecord();\n        emit('status', 'stopped');\n    };\n    var listen = function (handleVoice) {\n        status = 'started';\n        emit('status', 'started');\n        return createAudioProvider(function (data, last) { return handleVoice(new Uint8Array(data), last); })\n            .then(function (recStop) {\n            stopRecord = recStop;\n        })\n            .then(function () {\n            status = 'listen';\n            emit('status', 'listen');\n        })\n            .catch(function (err) {\n            status = 'stopped';\n            emit('status', 'stopped');\n            throw err;\n        });\n    };\n    return {\n        listen: listen,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n    };\n};\n\n/** Создает коллекцию треков  */\nvar createTrackCollection = function () {\n    var trackIds;\n    var trackMap;\n    var clear = function () {\n        trackIds = new Array();\n        trackMap = new Map();\n    };\n    var push = function (id, track) {\n        if (trackMap.has(id)) {\n            throw new Error('Track already exists');\n        }\n        trackMap.set(id, track);\n        trackIds.push(id);\n    };\n    var has = function (id) { return trackMap.has(id); };\n    var getById = function (id) {\n        var track = trackMap.get(id);\n        if (track === undefined) {\n            throw new Error('Unknown track id');\n        }\n        return track;\n    };\n    var getByIndex = function (index) {\n        if (index < 0 || index >= trackIds.length) {\n            throw new Error('Index out of bounds');\n        }\n        var track = trackMap.get(trackIds[index]);\n        if (track == null) {\n            throw new Error('Something wrong...');\n        }\n        return track;\n    };\n    var some = function (predicate) { return trackIds.some(function (id) { return predicate(getById(id)); }); };\n    clear();\n    return {\n        clear: clear,\n        has: has,\n        get: getById,\n        getByIndex: getByIndex,\n        push: push,\n        some: some,\n        get length() {\n            return trackIds.length;\n        },\n    };\n};\n\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\nvar createChunkQueue = function () {\n    var buffer = []; // очередь на воспроизведение\n    var chunks = []; // очередь воспроизведения\n    var duration = 0; // продолжительность очереди на воспроизведение, сек\n    var loaded = false; // флаг завершения загрузки\n    /** Добавить чанк в очередь на воспроизведение */\n    var push = function (chunk) {\n        var _a;\n        buffer.push(chunk);\n        duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n    };\n    /** Добавить чанк в очередь воспроизведения */\n    var toPlay = function (chunk) {\n        chunks.push(chunk);\n    };\n    /** Удалить чанк из очереди воспроизведения */\n    var remove = function (chunk) {\n        chunks.splice(chunks.indexOf(chunk), 1);\n    };\n    /** Получить очередь на воспроизведение */\n    var popAll = function () {\n        duration = 0;\n        return buffer.splice(0, buffer.length);\n    };\n    /** Проставляем признак окончания загрузки трека */\n    var allLoaded = function () {\n        loaded = true;\n    };\n    return {\n        get bufferLen() {\n            return buffer.length;\n        },\n        get chunks() {\n            return chunks;\n        },\n        allLoaded: allLoaded,\n        toPlay: toPlay,\n        remove: remove,\n        push: push,\n        popAll: popAll,\n        get length() {\n            return chunks.length;\n        },\n        get duration() {\n            return duration;\n        },\n        get ended() {\n            // считаем трек законченным, когда все загружено и воспроизведено\n            return loaded && chunks.length === 0 && buffer.length === 0;\n        },\n        get loaded() {\n            return loaded;\n        },\n    };\n};\n\nvar from16BitToFloat32 = function (incomingData) {\n    var l = incomingData.length;\n    var outputData = new Float32Array(l);\n    for (var i = 0; i < l; i += 1) {\n        outputData[i] = incomingData[i] / 32768.0;\n    }\n    return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\nvar createTrackStream = function (ctx, _a) {\n    var _b = _a.sampleRate, sampleRate = _b === void 0 ? 24000 : _b, _c = _a.numberOfChannels, numberOfChannels = _c === void 0 ? 1 : _c, _d = _a.delay, delay = _d === void 0 ? 0 : _d, onPlay = _a.onPlay, onEnd = _a.onEnd, trackStatus = _a.trackStatus;\n    // очередь загруженных чанков (кусочков) трека\n    var queue = createChunkQueue();\n    var extraByte = null;\n    var status = trackStatus || 'stop';\n    var lastChunkOffset = 0;\n    var startTime = 0;\n    var firstChunk = true;\n    var end = function () {\n        // останавливаем воспроизведение чанков из очереди воспроизведения\n        queue.chunks.forEach(function (chunk) {\n            chunk.stop();\n        });\n        status = 'end';\n        onEnd && onEnd();\n        startTime = 0;\n        lastChunkOffset = 0;\n    };\n    var play = function () {\n        if (status === 'end') {\n            return;\n        }\n        if (status !== 'play') {\n            status = 'play';\n            onPlay && onPlay();\n        }\n        if (queue.ended) {\n            end();\n            return;\n        }\n        // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n        if (queue.loaded || queue.duration >= delay) {\n            startTime = queue.length === 0 ? ctx.currentTime : startTime;\n            var chunks = queue.popAll();\n            chunks.forEach(function (chunk) {\n                var _a;\n                queue.toPlay(chunk);\n                chunk.start(startTime + lastChunkOffset);\n                lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n            });\n        }\n    };\n    var getExtraBytes = function (data, bytesArraysSizes) {\n        if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n            extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n            bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n            bytesArraysSizes.sourceLen -= 1;\n        }\n        else if (extraByte != null) {\n            bytesArraysSizes.prepend = extraByte;\n            bytesArraysSizes.start = 1;\n            if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n                bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n                extraByte = null;\n            }\n            else {\n                extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n                bytesArraysSizes.sourceLen -= 1;\n            }\n        }\n    };\n    var createChunk = function (chunk) {\n        var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n        for (var i = 0; i < numberOfChannels; i++) {\n            var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n            var index = 0;\n            for (var j = i; j < chunk.length; j += numberOfChannels) {\n                channelChunk[index++] = chunk[j];\n            }\n            audioBuffer.getChannelData(i).set(channelChunk);\n        }\n        var source = ctx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(ctx.destination);\n        source.onended = function () {\n            queue.remove(source);\n            if (queue.ended) {\n                status = 'end';\n                onEnd && onEnd();\n            }\n        };\n        return source;\n    };\n    /** добавляет чанк в очередь на воспроизведение */\n    var write = function (data) {\n        // 44 байта - заголовок трека\n        var slicePoint = firstChunk ? 44 : 0;\n        var bytesArraysSizes = {\n            incomingMessageVoiceDataLength: data.length,\n            sourceLen: data.length,\n            start: 0,\n            prepend: null,\n        };\n        firstChunk = false;\n        if (slicePoint >= data.length) {\n            return;\n        }\n        getExtraBytes(data, bytesArraysSizes);\n        var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n        var bufferUi8 = new Uint8Array(dataBuffer);\n        var bufferI16 = new Int16Array(dataBuffer);\n        bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n        if (bytesArraysSizes.prepend != null) {\n            bufferUi8[0] = bytesArraysSizes.prepend;\n        }\n        var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n        queue.push(chunk);\n        if (status === 'play') {\n            play();\n        }\n    };\n    return {\n        get loaded() {\n            return queue.loaded;\n        },\n        setLoaded: function () {\n            queue.allLoaded();\n            if (status === 'play') {\n                play();\n            }\n        },\n        write: write,\n        get status() {\n            return status;\n        },\n        play: play,\n        stop: end,\n    };\n};\n\nvar createVoicePlayer = function (actx, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.startVoiceDelay, startVoiceDelay = _c === void 0 ? 0.2 : _c, sampleRate = _b.sampleRate, numberOfChannels = _b.numberOfChannels;\n    var _d = createNanoEvents(), on = _d.on, emit = _d.emit;\n    var tracks = createTrackCollection();\n    // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n    var active = true;\n    // индекс текущего трека в tracks\n    var cursor = 0;\n    var play = function () {\n        if (cursor >= tracks.length) {\n            if (tracks.some(function (track) { return !track.loaded; })) {\n                return;\n            }\n            // очищаем коллекцию, если все треки были воспроизведены\n            cursor = 0;\n            tracks.clear();\n            return;\n        }\n        // рекурсивно последовательно включаем треки из очереди\n        var current = tracks.getByIndex(cursor);\n        if (current.status === 'end') {\n            if (cursor < tracks.length) {\n                cursor++;\n                play();\n            }\n        }\n        else {\n            current.play();\n        }\n    };\n    var append = function (data, trackId, last) {\n        if (last === void 0) { last = false; }\n        var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n        if (current == null) {\n            /// если trackId нет в коллекции - создаем трек\n            /// по окончании проигрывания - запускаем следующий трек, вызывая play\n            current = createTrackStream(actx, {\n                sampleRate: sampleRate,\n                numberOfChannels: numberOfChannels,\n                delay: startVoiceDelay,\n                onPlay: function () { return emit('play', trackId); },\n                onEnd: function () {\n                    emit('end', trackId);\n                    play();\n                },\n                trackStatus: active ? 'stop' : 'end',\n            });\n            tracks.push(trackId, current);\n        }\n        if (current.status !== 'end' && data.length) {\n            current.write(data);\n        }\n        if (last) {\n            // все чанки трека загружены\n            current.setLoaded();\n        }\n        play();\n    };\n    var stop = function () {\n        while (cursor < tracks.length) {\n            var cur = cursor;\n            cursor++;\n            tracks.getByIndex(cur).stop();\n        }\n    };\n    return {\n        append: append,\n        setActive: function (value) {\n            active = value;\n            if (value) {\n                play();\n            }\n            else {\n                stop();\n            }\n        },\n        on: on,\n        stop: stop,\n    };\n};\n\nvar createVoice = function (client, emit, \n/// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n    var voicePlayer;\n    var listener = createVoiceListener();\n    var musicRecognizer = createMusicRecognizer(listener);\n    var speechRecognizer = createSpeechRecognizer(listener);\n    var subscriptions = [];\n    var settings = {\n        disableDubbing: false,\n        disableListening: false,\n    };\n    var isPlaying = false; // проигрывается/не проигрывается озвучка\n    var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n    var wasDisabledDubbing = false; // состояние озвучки на момент включения слушания\n    /** останавливает слушание голоса, возвращает true - если слушание было активно */\n    var stopListening = function () {\n        var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n        autolistenMesId = null;\n        if (speechRecognizer.status === 'active') {\n            speechRecognizer.stop();\n            client.sendCancel(speechRecognizer.messageId);\n            return true;\n        }\n        if (musicRecognizer.status === 'active') {\n            musicRecognizer.stop();\n            client.sendCancel(musicRecognizer.messageId);\n            return true;\n        }\n        return result;\n    };\n    /** Останавливает слушание и воспроизведение */\n    var stop = function () {\n        // здесь важен порядок остановки голоса\n        stopListening();\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    };\n    /** Активирует слушание голоса\n     * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n     */\n    var listen = function (_a) {\n        var begin = (_a === void 0 ? {} : _a).begin;\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                if (stopListening()) {\n                    return [2 /*return*/];\n                }\n                if (isPlaying) {\n                    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n                    return [2 /*return*/];\n                }\n                if (settings.disableListening) {\n                    return [2 /*return*/];\n                }\n                // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n                if (listener.status === 'stopped') {\n                    wasDisabledDubbing = settings.disableDubbing;\n                    return [2 /*return*/, client.createVoiceStream(function (_a) {\n                            var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                            begin === null || begin === void 0 ? void 0 : begin.forEach(function (chunk) { return sendVoice(new Uint8Array(chunk), false); });\n                            return speechRecognizer.start({\n                                sendVoice: sendVoice,\n                                messageId: messageId,\n                                onMessage: onMessage,\n                            });\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /** Активирует распознавание музыки\n     * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n     */\n    var shazam = function () {\n        if (stopListening()) {\n            return;\n        }\n        if (isPlaying) {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n        }\n        if (settings.disableListening) {\n            return;\n        }\n        // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n        if (listener.status === 'stopped') {\n            wasDisabledDubbing = settings.disableDubbing;\n            client.createVoiceStream(function (_a) {\n                var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                return musicRecognizer.start({\n                    sendVoice: sendVoice,\n                    messageId: messageId,\n                    onMessage: onMessage,\n                });\n            });\n        }\n    };\n    if (isAudioSupported) {\n        resolveAudioContext(function (context) {\n            /// создаем плеер только если поддерживается аудио\n            /// и только когда готов AudioContext\n            voicePlayer = createVoicePlayer(context, { startVoiceDelay: 1 });\n            // начало проигрывания озвучки\n            subscriptions.push(voicePlayer.on('play', function () {\n                isPlaying = true;\n                emit({ emotion: 'talk' });\n            }));\n            // окончание проигрывания озвучки\n            subscriptions.push(voicePlayer.on('end', function (mesId) {\n                isPlaying = false;\n                emit({ emotion: 'idle' });\n                if (mesId === autolistenMesId) {\n                    listen();\n                }\n            }));\n            // оповещаем о готовности к воспроизведению звука\n            onReady && onReady();\n        });\n    }\n    // обработка входящей озвучки\n    subscriptions.push(client.on('voice', function (data, message) {\n        if (settings.disableDubbing) {\n            return;\n        }\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n    }));\n    // гипотезы распознавания речи\n    subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n        emit({\n            asr: {\n                text: listener.status === 'listen' && !settings.disableListening ? text : '',\n                last: isLast,\n                mid: mid,\n            },\n        });\n    }));\n    // статусы слушания речи\n    subscriptions.push(listener.on('status', function (status) {\n        if (status === 'listen') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            emit({ emotion: 'listen' });\n        }\n        else if (status === 'stopped') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n            emit({ asr: { text: '' }, emotion: 'idle' });\n        }\n    }));\n    // активация автослушания\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        var autoListening = systemMessage.auto_listening;\n        if (autoListening) {\n            /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n            /// если озвучка выключена - включаем слушание сразу\n            if (!wasDisabledDubbing) {\n                autolistenMesId = originalMessage.messageId.toString();\n            }\n            else {\n                listen();\n            }\n        }\n    }));\n    return {\n        destroy: function () {\n            stopListening();\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        change: function (newSettings) {\n            var disableDubbing = newSettings.disableDubbing, disableListening = newSettings.disableListening;\n            /// ниже важен порядок обработки флагов слушания и озвучки\n            /// сначала слушание, потом озвучка\n            // вкл/выкл фичи листенинга\n            if (typeof disableListening !== 'undefined' && settings.disableListening !== disableListening) {\n                settings.disableListening = disableListening;\n                if (disableListening === true) {\n                    stopListening();\n                }\n            }\n            // вкл/выкл фичи озвучки\n            if (typeof disableDubbing !== 'undefined' && settings.disableDubbing !== disableDubbing) {\n                settings.disableDubbing = disableDubbing;\n                voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing);\n            }\n            Object.assign(settings, newSettings);\n        },\n        listen: listen,\n        shazam: shazam,\n        stop: stop,\n        stopPlaying: function () {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n        },\n    };\n};\n\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n    projectId: DEFAULT_PROJECT_ID,\n    applicationId: DEFAULT_APPLICATION_ID,\n    appversionId: DEFAULT_APP_VERSION_ID,\n    frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n    frontendType: 'DIALOG',\n    systemName: 'assistant',\n    frontendEndpoint: 'None',\n};\nvar isDefaultApp = function (appInfo) { return appInfo.frontendStateId === DEFAULT_APP.frontendStateId; };\nvar promiseTimeout = function (promise, timeout) {\n    var timeoutId;\n    return Promise.race([\n        promise.then(function (v) {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            return v;\n        }),\n        new Promise(function (_, reject) {\n            timeoutId = window.setTimeout(function () {\n                reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n            }, timeout);\n        }),\n    ]);\n};\nvar createAssistant = function (_a) {\n    var _b;\n    var getMeta = _a.getMeta, configuration = __rest(_a, [\"getMeta\"]);\n    var _c = createNanoEvents(), on = _c.on, emit = _c.emit;\n    var subscriptions = [];\n    // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n    var requestIdMap = {};\n    // готов/не готов воспроизводить озвучку\n    var voiceReady = false;\n    // текущий апп\n    var app = { info: DEFAULT_APP };\n    var settings = {\n        disableDubbing: configuration.settings.dubbing === -1,\n        disableListening: false,\n        sendTextAsSsml: false,\n    };\n    var backgroundApps = {};\n    var metaProvider = function () { return __awaiter(void 0, void 0, void 0, function () {\n        var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!(app !== null && app.info.frontendType === 'WEB_APP' && app.getState)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n                            // eslint-disable-next-line no-console\n                            console.error('App-state wasn`t resolved, timeout had been expired');\n                            return undefined;\n                        })];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = undefined;\n                    _b.label = 3;\n                case 3:\n                    appState = _a;\n                    current_app = {\n                        app_info: app.info,\n                        state: appState || {},\n                    };\n                    getBackgroundAppsMeta = function () { return __awaiter(void 0, void 0, void 0, function () {\n                        var apps, backgroundAppsIds, backgroundAppsMeta;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    apps = __assign({}, backgroundApps);\n                                    backgroundAppsIds = Object.keys(apps);\n                                    backgroundAppsMeta = [];\n                                    return [4 /*yield*/, Promise.all(backgroundAppsIds.map(function (applicationId) { return __awaiter(void 0, void 0, void 0, function () {\n                                            var _a, getState;\n                                            return __generator(this, function (_b) {\n                                                _a = apps[applicationId].getState, getState = _a === void 0 ? function () { return Promise.resolve({}); } : _a;\n                                                return [2 /*return*/, promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) { return state; }, function () { return ({}); })];\n                                            });\n                                        }); })).then(function (results) {\n                                            results.forEach(function (appResult, index) {\n                                                var state = appResult;\n                                                var applicationId = backgroundAppsIds[index];\n                                                backgroundAppsMeta.push({\n                                                    app_info: apps[applicationId].appInfo,\n                                                    state: state,\n                                                });\n                                            });\n                                        })];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/, backgroundAppsMeta];\n                            }\n                        });\n                    }); };\n                    return [4 /*yield*/, getBackgroundAppsMeta()];\n                case 4:\n                    background_apps = _b.sent();\n                    return [2 /*return*/, {\n                            meta: __assign({ time: getTime(), current_app: current_app,\n                                background_apps: background_apps }, (getMeta ? getMeta() : {})),\n                        }];\n            }\n        });\n    }); };\n    var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n    var protocol = createProtocol(transport, __assign(__assign({}, configuration), { \n        // выключаем озвучку, пока голос не готов\n        settings: __assign(__assign({}, configuration.settings), { dubbing: !voiceReady ? -1 : configuration.settings.dubbing }) }));\n    var client = createClient(protocol, metaProvider);\n    var voice = createVoice(client, function (event) { return emit('assistant', event); }, function () {\n        voiceReady = true;\n        // когда голос готов, возвращаем первоначальное состояние\n        protocol.changeSettings({ dubbing: settings.disableDubbing ? -1 : 1 });\n    });\n    /** завершает текущий апп */\n    var closeApp = function () {\n        var current = app;\n        app = {\n            info: DEFAULT_APP,\n        };\n        if (!isDefaultApp(current.info)) {\n            emit('app', { type: 'close', app: current.info });\n        }\n    };\n    /** отправляет текст */\n    var sendText = function (text, shouldSendDisableDubbing) {\n        if (shouldSendDisableDubbing === void 0) { shouldSendDisableDubbing = false; }\n        voice.stop();\n        client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n    };\n    /** отправляет server_action */\n    var sendServerAction = function (serverAction, messageName, requestId, actionApp) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        if (requestId === void 0) { requestId = undefined; }\n        if (actionApp === void 0) { actionApp = app.info; }\n        voice.stop();\n        client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n            if (requestId && messageId) {\n                requestIdMap[messageId.toString()] = requestId;\n            }\n        });\n    };\n    /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n    var sendMetaForPermissionRequest = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n        var data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n                case 1:\n                    data = _a.sent();\n                    client.sendData(data, 'SERVER_ACTION');\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    subscriptions.push(protocol.on('ready', function () { return emit('vps', { type: 'ready' }); }));\n    // при неудачном переподключении к сокету\n    subscriptions.push(transport.on('error', function (error) {\n        emit('vps', { type: 'error', error: error });\n    }));\n    // обработка исходящих сообщений\n    subscriptions.push(protocol.on('outcoming', function (message) {\n        emit('vps', { type: 'outcoming', message: message });\n    }));\n    // обработка ошибок\n    subscriptions.push(protocol.on('error', function (error) {\n        emit('error', error);\n    }));\n    // оповещение о статусах\n    subscriptions.push(client.on('status', function (status) {\n        emit('status', status);\n    }));\n    // обработка входящих команд, и событий аппа\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        if (originalMessage.messageName === 'ANSWER_TO_USER') {\n            var activate_app_info = systemMessage.activate_app_info, items = systemMessage.items, mesAppInfo = systemMessage.app_info, character = systemMessage.character;\n            if (character) {\n                emit('assistant', { character: character.id });\n            }\n            // по-умолчанию activate_app_info: true\n            if (mesAppInfo && activate_app_info !== false) {\n                emit('app', { type: 'run', app: mesAppInfo });\n            }\n            if (items) {\n                var _loop_1 = function (i) {\n                    var command = items[i].command;\n                    if (typeof command !== 'undefined') {\n                        setTimeout(function () { return emit('command', command); });\n                        if (command.type === 'start_music_recognition') {\n                            voice.shazam();\n                            return { value: void 0 };\n                        }\n                        if (command.type === 'request_permissions' && mesAppInfo) {\n                            sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n                            return { value: void 0 };\n                        }\n                        if (command.type === 'action') {\n                            emit('actionCommand', {\n                                type: 'command',\n                                command: command,\n                            });\n                            return { value: void 0 };\n                        }\n                        if ((command.type === 'smart_app_data' ||\n                            command.type === 'smart_app_error' ||\n                            command.type === 'start_smart_search' ||\n                            command.type === 'navigation') &&\n                            mesAppInfo) {\n                            // эмитим все команды, т.к бывают фоновые команды\n                            emit('app', {\n                                type: 'command',\n                                command: __assign(__assign({}, command), { sdk_meta: {\n                                        mid: originalMessage.messageId.toString(),\n                                        requestId: requestIdMap[originalMessage.messageId.toString()],\n                                    } }),\n                                app: mesAppInfo,\n                            });\n                        }\n                        if (command.type === 'close_app') {\n                            closeApp();\n                        }\n                    }\n                };\n                for (var i = 0; i < (items || []).length; i++) {\n                    var state_1 = _loop_1(i);\n                    if (typeof state_1 === \"object\")\n                        return state_1.value;\n                }\n            }\n            emit('vps', { type: 'incoming', systemMessage: systemMessage, originalMessage: originalMessage });\n        }\n    }));\n    // прокидывает команды backgroundApp'ов в их подписчики\n    on('app', function (event) {\n        var _a;\n        if (event.type === 'command') {\n            var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n            if (Array.isArray(backgroundAppOnCommand)) {\n                backgroundAppOnCommand.forEach(function (onCommand) {\n                    var _a;\n                    onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n                });\n            }\n        }\n    });\n    /** уничтожает ассистент, очищает подписки */\n    var destroy = function () {\n        voice.destroy();\n        client.destroy();\n        protocol.destroy();\n        subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n    };\n    /** запускает ассистент (приветствие) */\n    var start = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.disableGreetings, disableGreetings = _c === void 0 ? false : _c, _d = _b.initPhrase, initPhrase = _d === void 0 ? undefined : _d, _e = _b.isFirstSession, isFirstSession = _e === void 0 ? false : _e;\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        if (!(!disableGreetings && isDefaultApp(app.info))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, client.sendOpenAssistant({ isFirstSession: isFirstSession })];\n                    case 1:\n                        _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        if (initPhrase) {\n                            return [2 /*return*/, client\n                                    .sendText(initPhrase)\n                                    .then(function (messageId) { return (messageId ? client.waitForAnswer(messageId) : undefined); })];\n                        }\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    return {\n        get activeApp() {\n            return !isDefaultApp(app.info) ? app.info : null;\n        },\n        get settings() {\n            return settings;\n        },\n        destroy: destroy,\n        closeApp: closeApp,\n        listen: voice.listen,\n        sendServerAction: sendServerAction,\n        sendText: sendText,\n        start: start,\n        stop: function () {\n            voice.stop();\n            protocol.clearQueue();\n            transport.close();\n        },\n        stopTts: voice.stopPlaying,\n        stopVoice: voice.stop,\n        emit: emit,\n        on: on,\n        changeConfiguration: protocol.changeConfiguration,\n        changeSettings: function (newSettings) {\n            var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n            settings = __assign(__assign({}, settings), newSettings);\n            voice.change({ disableDubbing: settings.disableDubbing, disableListening: settings.disableListening });\n            if (!dubbingChanged) {\n                return;\n            }\n            protocol.changeSettings({ dubbing: settings.disableDubbing || !voiceReady ? -1 : 1 });\n        },\n        reconnect: protocol.reconnect,\n        get protocol() {\n            return protocol;\n        },\n        setActiveApp: function (info, getState) {\n            app = { info: info, getState: getState };\n        },\n        addBackgroundApp: function (_a) {\n            var appInfo = _a.appInfo, getState = _a.getState;\n            backgroundApps[appInfo.applicationId] = {\n                appInfo: appInfo,\n                getState: getState,\n                commandsSubscribers: [],\n            };\n            var remove = function () {\n                delete backgroundApps[appInfo.applicationId];\n            };\n            var onCommand = function (subscriber) {\n                var _a;\n                (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n                return {\n                    clearSubscribers: function () {\n                        if (backgroundApps[appInfo.applicationId]) {\n                            backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n                        }\n                    },\n                };\n            };\n            var sendServerActionToBackgroundApp = function (serverAction, messageName, requestId) {\n                var _a;\n                if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n                if (requestId === void 0) { requestId = undefined; }\n                return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n            };\n            return {\n                remove: remove,\n                onCommand: onCommand,\n                sendServerAction: sendServerActionToBackgroundApp,\n            };\n        },\n    };\n};\n\nexport { appendHeader as a, createNavigatorAudioProvider as b, createAssistant as c };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}