{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khalo\\\\Desktop\\\\Pomodoro_CanvasApp-main\\\\src\\\\Timer.js\",\n  _s = $RefreshSig$();\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\nfunction Timer() {\n  _s();\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: mode === 'work' ? red : green,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"5KbPEj6LI6608NHqWAQ/12PD3T0=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","red","green","Timer","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","settingsInfo","workMinutes","breakMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textColor","pathColor","tailColor","marginTop","setShowSettings"],"sources":["C:/Users/khalo/Desktop/Pomodoro_CanvasApp-main/src/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport SettingsContext from \"./SettingsContext\";\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        tailColor:'rgba(255,255,255,.2)',\n      })} />\n      <div style={{marginTop:'20px'}}>\n        {isPaused\n          ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\n          : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\n      </div>\n      <div style={{marginTop:'20px'}}>\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}