{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\nvar createNanoEvents = function () {\n  var events = {};\n  var emit = function (event) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, _b = events[event] || []; _a < _b.length; _a++) {\n      var listener = _b[_a];\n      listener.apply(void 0, args);\n    }\n  };\n  var on = function (event, cb) {\n    (events[event] = events[event] || []).push(cb);\n    return function () {\n      events[event] = events[event].filter(function (i) {\n        return i !== cb;\n      });\n    };\n  };\n  var once = function (event, cb) {\n    // eslint-disable-next-line\n    // @ts-ignore И вот тут я сдался\n    var off = on(event, function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      cb.apply(void 0, args);\n      off();\n    });\n    return off;\n  };\n  var clear = function () {\n    events = {};\n  };\n  return {\n    events: events,\n    emit: emit,\n    on: on,\n    once: once,\n    clear: clear\n  };\n};\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function (path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\nvar aspromise = asPromise;\n\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\nfunction asPromise(fn, ctx /*, varargs */) {\n  var params = new Array(arguments.length - 1),\n    offset = 0,\n    index = 2,\n    pending = true;\n  while (index < arguments.length) params[offset++] = arguments[index++];\n  return new Promise(function executor(resolve, reject) {\n    params[offset] = function callback(err /*, varargs */) {\n      if (pending) {\n        pending = false;\n        if (err) reject(err);else {\n          var params = new Array(arguments.length - 1),\n            offset = 0;\n          while (offset < params.length) params[offset++] = arguments[offset];\n          resolve.apply(null, params);\n        }\n      }\n    };\n    try {\n      fn.apply(ctx || null, params);\n    } catch (err) {\n      if (pending) {\n        pending = false;\n        reject(err);\n      }\n    }\n  });\n}\nvar base64_1 = createCommonjsModule(function (module, exports) {\n  /**\r\n   * A minimal base64 implementation for number arrays.\r\n   * @memberof util\r\n   * @namespace\r\n   */\n  var base64 = exports;\n\n  /**\r\n   * Calculates the byte length of a base64 encoded string.\r\n   * @param {string} string Base64 encoded string\r\n   * @returns {number} Byte length\r\n   */\n  base64.length = function length(string) {\n    var p = string.length;\n    if (!p) return 0;\n    var n = 0;\n    while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n    return Math.ceil(string.length * 3) / 4 - n;\n  };\n\n  // Base64 encoding table\n  var b64 = new Array(64);\n\n  // Base64 decoding table\n  var s64 = new Array(123);\n\n  // 65..90, 97..122, 48..57, 43, 47\n  for (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n  /**\r\n   * Encodes a buffer to a base64 encoded string.\r\n   * @param {Uint8Array} buffer Source buffer\r\n   * @param {number} start Source start\r\n   * @param {number} end Source end\r\n   * @returns {string} Base64 encoded string\r\n   */\n  base64.encode = function encode(buffer, start, end) {\n    var parts = null,\n      chunk = [];\n    var i = 0,\n      // output index\n      j = 0,\n      // goto index\n      t; // temporary\n    while (start < end) {\n      var b = buffer[start++];\n      switch (j) {\n        case 0:\n          chunk[i++] = b64[b >> 2];\n          t = (b & 3) << 4;\n          j = 1;\n          break;\n        case 1:\n          chunk[i++] = b64[t | b >> 4];\n          t = (b & 15) << 2;\n          j = 2;\n          break;\n        case 2:\n          chunk[i++] = b64[t | b >> 6];\n          chunk[i++] = b64[b & 63];\n          j = 0;\n          break;\n      }\n      if (i > 8191) {\n        (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n        i = 0;\n      }\n    }\n    if (j) {\n      chunk[i++] = b64[t];\n      chunk[i++] = 61;\n      if (j === 1) chunk[i++] = 61;\n    }\n    if (parts) {\n      if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n      return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n  };\n  var invalidEncoding = \"invalid encoding\";\n\n  /**\r\n   * Decodes a base64 encoded string to a buffer.\r\n   * @param {string} string Source string\r\n   * @param {Uint8Array} buffer Destination buffer\r\n   * @param {number} offset Destination offset\r\n   * @returns {number} Number of bytes written\r\n   * @throws {Error} If encoding is invalid\r\n   */\n  base64.decode = function decode(string, buffer, offset) {\n    var start = offset;\n    var j = 0,\n      // goto index\n      t; // temporary\n    for (var i = 0; i < string.length;) {\n      var c = string.charCodeAt(i++);\n      if (c === 61 && j > 1) break;\n      if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n      switch (j) {\n        case 0:\n          t = c;\n          j = 1;\n          break;\n        case 1:\n          buffer[offset++] = t << 2 | (c & 48) >> 4;\n          t = c;\n          j = 2;\n          break;\n        case 2:\n          buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n          t = c;\n          j = 3;\n          break;\n        case 3:\n          buffer[offset++] = (t & 3) << 6 | c;\n          j = 0;\n          break;\n      }\n    }\n    if (j === 1) throw Error(invalidEncoding);\n    return offset - start;\n  };\n\n  /**\r\n   * Tests if the specified string appears to be base64 encoded.\r\n   * @param {string} string String to test\r\n   * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n   */\n  base64.test = function test(string) {\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n  };\n});\nvar eventemitter = EventEmitter;\n\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\nfunction EventEmitter() {\n  /**\r\n   * Registered listeners.\r\n   * @type {Object.<string,*>}\r\n   * @private\r\n   */\n  this._listeners = {};\n}\n\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n  (this._listeners[evt] || (this._listeners[evt] = [])).push({\n    fn: fn,\n    ctx: ctx || this\n  });\n  return this;\n};\n\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n  if (evt === undefined) this._listeners = {};else {\n    if (fn === undefined) this._listeners[evt] = [];else {\n      var listeners = this._listeners[evt];\n      for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n    }\n  }\n  return this;\n};\n\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.emit = function emit(evt) {\n  var listeners = this._listeners[evt];\n  if (listeners) {\n    var args = [],\n      i = 1;\n    for (; i < arguments.length;) args.push(arguments[i++]);\n    for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n  }\n  return this;\n};\nvar float_1 = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n      f8b = new Uint8Array(f32.buffer),\n      le = f8b[3] === 128;\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n    // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n        // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n        // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n          mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n        sign = (uint >> 31) * 2 + 1,\n        exponent = uint >>> 23 & 255,\n        mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })();\n\n  // double: typed array\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n      f8b = new Uint8Array(f64.buffer),\n      le = f8b[7] === 128;\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n    // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n        hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n        exponent = hi >>> 20 & 2047,\n        mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}\nvar inquire_1 = inquire;\n\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\nfunction inquire(moduleName) {\n  try {\n    var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n    if (mod && (mod.length || Object.keys(mod).length)) return mod;\n  } catch (e) {} // eslint-disable-line no-empty\n  return null;\n}\nvar utf8_1 = createCommonjsModule(function (module, exports) {\n  /**\r\n   * A minimal UTF8 implementation for number arrays.\r\n   * @memberof util\r\n   * @namespace\r\n   */\n  var utf8 = exports;\n\n  /**\r\n   * Calculates the UTF8 byte length of a string.\r\n   * @param {string} string String\r\n   * @returns {number} Byte length\r\n   */\n  utf8.length = function utf8_length(string) {\n    var len = 0,\n      c = 0;\n    for (var i = 0; i < string.length; ++i) {\n      c = string.charCodeAt(i);\n      if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n        ++i;\n        len += 4;\n      } else len += 3;\n    }\n    return len;\n  };\n\n  /**\r\n   * Reads UTF8 bytes as a string.\r\n   * @param {Uint8Array} buffer Source buffer\r\n   * @param {number} start Source start\r\n   * @param {number} end Source end\r\n   * @returns {string} String read\r\n   */\n  utf8.read = function utf8_read(buffer, start, end) {\n    var len = end - start;\n    if (len < 1) return \"\";\n    var parts = null,\n      chunk = [],\n      i = 0,\n      // char offset\n      t; // temporary\n    while (start < end) {\n      t = buffer[start++];\n      if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n        t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n        chunk[i++] = 0xD800 + (t >> 10);\n        chunk[i++] = 0xDC00 + (t & 1023);\n      } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n      if (i > 8191) {\n        (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n        i = 0;\n      }\n    }\n    if (parts) {\n      if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n      return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n  };\n\n  /**\r\n   * Writes a string as UTF8 bytes.\r\n   * @param {string} string Source string\r\n   * @param {Uint8Array} buffer Destination buffer\r\n   * @param {number} offset Destination offset\r\n   * @returns {number} Bytes written\r\n   */\n  utf8.write = function utf8_write(string, buffer, offset) {\n    var start = offset,\n      c1,\n      // character 1\n      c2; // character 2\n    for (var i = 0; i < string.length; ++i) {\n      c1 = string.charCodeAt(i);\n      if (c1 < 128) {\n        buffer[offset++] = c1;\n      } else if (c1 < 2048) {\n        buffer[offset++] = c1 >> 6 | 192;\n        buffer[offset++] = c1 & 63 | 128;\n      } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n        c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n        ++i;\n        buffer[offset++] = c1 >> 18 | 240;\n        buffer[offset++] = c1 >> 12 & 63 | 128;\n        buffer[offset++] = c1 >> 6 & 63 | 128;\n        buffer[offset++] = c1 & 63 | 128;\n      } else {\n        buffer[offset++] = c1 >> 12 | 224;\n        buffer[offset++] = c1 >> 6 & 63 | 128;\n        buffer[offset++] = c1 & 63 | 128;\n      }\n    }\n    return offset - start;\n  };\n});\nvar pool_1 = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7)\n      // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}\nvar longbits = LongBits;\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n  // note that the casts below are theoretically unnecessary as of today, but older statically\n  // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n  /**\n   * Low bits.\n   * @type {number}\n   */\n  this.lo = lo >>> 0;\n\n  /**\n   * High bits.\n   * @type {number}\n   */\n  this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function () {\n  return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n  return this;\n};\nzero.length = function () {\n  return 1;\n};\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n  if (value === 0) return zero;\n  var sign = value < 0;\n  if (sign) value = -value;\n  var lo = value >>> 0,\n    hi = (value - lo) / 4294967296 >>> 0;\n  if (sign) {\n    hi = ~hi >>> 0;\n    lo = ~lo >>> 0;\n    if (++lo > 4294967295) {\n      lo = 0;\n      if (++hi > 4294967295) hi = 0;\n    }\n  }\n  return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n  if (typeof value === \"number\") return LongBits.fromNumber(value);\n  if (minimal.isString(value)) {\n    /* istanbul ignore else */\n    if (minimal.Long) value = minimal.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n  }\n  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n  if (!unsigned && this.hi >>> 31) {\n    var lo = ~this.lo + 1 >>> 0,\n      hi = ~this.hi >>> 0;\n    if (!lo) hi = hi + 1 >>> 0;\n    return -(lo + hi * 4294967296);\n  }\n  return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n  return minimal.Long ? new minimal.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n  /* istanbul ignore next */ : {\n    low: this.lo | 0,\n    high: this.hi | 0,\n    unsigned: Boolean(unsigned)\n  };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n  if (hash === zeroHash) return zero;\n  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n  var mask = this.hi >> 31;\n  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n  this.lo = (this.lo << 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n  var mask = -(this.lo & 1);\n  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n  this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n  var part0 = this.lo,\n    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n    part2 = this.hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};\nvar minimal = createCommonjsModule(function (module, exports) {\n  var util = exports;\n\n  // used to return a Promise where callback is omitted\n  util.asPromise = aspromise;\n\n  // converts to / from base64 encoded strings\n  util.base64 = base64_1;\n\n  // base class of rpc.Service\n  util.EventEmitter = eventemitter;\n\n  // float handling accross browsers\n  util.float = float_1;\n\n  // requires modules optionally and hides the call from bundlers\n  util.inquire = inquire_1;\n\n  // converts to / from utf8 encoded strings\n  util.utf8 = utf8_1;\n\n  // provides a node-like buffer pool in the browser\n  util.pool = pool_1;\n\n  // utility to work with the low and high bits of a 64 bit value\n  util.LongBits = longbits;\n\n  /**\n   * Whether running within node or not.\n   * @memberof util\n   * @type {boolean}\n   */\n  util.isNode = Boolean(typeof commonjsGlobal !== \"undefined\" && commonjsGlobal && commonjsGlobal.process && commonjsGlobal.process.versions && commonjsGlobal.process.versions.node);\n\n  /**\n   * Global object reference.\n   * @memberof util\n   * @type {Object}\n   */\n  util.global = util.isNode && commonjsGlobal || typeof window !== \"undefined\" && window || typeof self !== \"undefined\" && self || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n  /**\n   * An immuable empty array.\n   * @memberof util\n   * @type {Array.<*>}\n   * @const\n   */\n  util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n  /**\n   * An immutable empty object.\n   * @type {Object}\n   * @const\n   */\n  util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n  /**\n   * Tests if the specified value is an integer.\n   * @function\n   * @param {*} value Value to test\n   * @returns {boolean} `true` if the value is an integer\n   */\n  util.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n  };\n\n  /**\n   * Tests if the specified value is a string.\n   * @param {*} value Value to test\n   * @returns {boolean} `true` if the value is a string\n   */\n  util.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n  };\n\n  /**\n   * Tests if the specified value is a non-null object.\n   * @param {*} value Value to test\n   * @returns {boolean} `true` if the value is a non-null object\n   */\n  util.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n  };\n\n  /**\n   * Checks if a property on a message is considered to be present.\n   * This is an alias of {@link util.isSet}.\n   * @function\n   * @param {Object} obj Plain object or message instance\n   * @param {string} prop Property name\n   * @returns {boolean} `true` if considered to be present, otherwise `false`\n   */\n  util.isset =\n  /**\n   * Checks if a property on a message is considered to be present.\n   * @param {Object} obj Plain object or message instance\n   * @param {string} prop Property name\n   * @returns {boolean} `true` if considered to be present, otherwise `false`\n   */\n  util.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop))\n      // eslint-disable-line eqeqeq, no-prototype-builtins\n      return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n  };\n\n  /**\n   * Any compatible Buffer instance.\n   * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n   * @interface Buffer\n   * @extends Uint8Array\n   */\n\n  /**\n   * Node's Buffer class if available.\n   * @type {Constructor<Buffer>}\n   */\n  util.Buffer = function () {\n    try {\n      var Buffer = util.inquire(\"buffer\").Buffer;\n      // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n      return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n    } catch (e) {\n      /* istanbul ignore next */\n      return null;\n    }\n  }();\n\n  // Internal alias of or polyfull for Buffer.from.\n  util._Buffer_from = null;\n\n  // Internal alias of or polyfill for Buffer.allocUnsafe.\n  util._Buffer_allocUnsafe = null;\n\n  /**\n   * Creates a new buffer of whatever type supported by the environment.\n   * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n   * @returns {Uint8Array|Buffer} Buffer\n   */\n  util.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n  };\n\n  /**\n   * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n   * @type {Constructor<Uint8Array>}\n   */\n  util.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n  /**\n   * Any compatible Long instance.\n   * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n   * @interface Long\n   * @property {number} low Low bits\n   * @property {number} high High bits\n   * @property {boolean} unsigned Whether unsigned or not\n   */\n\n  /**\n   * Long.js's Long class if available.\n   * @type {Constructor<Long>}\n   */\n  util.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n  /**\n   * Regular expression used to verify 2 bit (`bool`) map keys.\n   * @type {RegExp}\n   * @const\n   */\n  util.key2Re = /^true|false|0|1$/;\n\n  /**\n   * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n   * @type {RegExp}\n   * @const\n   */\n  util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n  /**\n   * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n   * @type {RegExp}\n   * @const\n   */\n  util.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n  /**\n   * Converts a number or long to an 8 characters long hash string.\n   * @param {Long|number} value Value to convert\n   * @returns {string} Hash\n   */\n  util.longToHash = function longToHash(value) {\n    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n  };\n\n  /**\n   * Converts an 8 characters long hash string to a long or number.\n   * @param {string} hash Hash\n   * @param {boolean} [unsigned=false] Whether unsigned or not\n   * @returns {Long|number} Original value\n   */\n  util.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n  };\n\n  /**\n   * Merges the properties of the source object into the destination object.\n   * @memberof util\n   * @param {Object.<string,*>} dst Destination object\n   * @param {Object.<string,*>} src Source object\n   * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n   * @returns {Object.<string,*>} Destination object\n   */\n  function merge(dst, src, ifNotSet) {\n    // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n    return dst;\n  }\n  util.merge = merge;\n\n  /**\n   * Converts the first character of a string to lower case.\n   * @param {string} str String to convert\n   * @returns {string} Converted string\n   */\n  util.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n  };\n\n  /**\n   * Creates a custom error constructor.\n   * @memberof util\n   * @param {string} name Error name\n   * @returns {Constructor<Error>} Custom error constructor\n   */\n  function newError(name) {\n    function CustomError(message, properties) {\n      if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n      // Error.call(this, message);\n      // ^ just returns a new error instance because the ctor can be called as a function\n\n      Object.defineProperty(this, \"message\", {\n        get: function () {\n          return message;\n        }\n      });\n\n      /* istanbul ignore next */\n      if (Error.captureStackTrace)\n        // node\n        Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n        value: new Error().stack || \"\"\n      });\n      if (properties) merge(this, properties);\n    }\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n    Object.defineProperty(CustomError.prototype, \"name\", {\n      get: function () {\n        return name;\n      }\n    });\n    CustomError.prototype.toString = function toString() {\n      return this.name + \": \" + this.message;\n    };\n    return CustomError;\n  }\n  util.newError = newError;\n\n  /**\n   * Constructs a new protocol error.\n   * @classdesc Error subclass indicating a protocol specifc error.\n   * @memberof util\n   * @extends Error\n   * @template T extends Message<T>\n   * @constructor\n   * @param {string} message Error message\n   * @param {Object.<string,*>} [properties] Additional properties\n   * @example\n   * try {\n   *     MyMessage.decode(someBuffer); // throws if required fields are missing\n   * } catch (e) {\n   *     if (e instanceof ProtocolError && e.instance)\n   *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n   * }\n   */\n  util.ProtocolError = newError(\"ProtocolError\");\n\n  /**\n   * So far decoded message instance.\n   * @name util.ProtocolError#instance\n   * @type {Message<T>}\n   */\n\n  /**\n   * A OneOf getter as returned by {@link util.oneOfGetter}.\n   * @typedef OneOfGetter\n   * @type {function}\n   * @returns {string|undefined} Set field name, if any\n   */\n\n  /**\n   * Builds a getter for a oneof's present field name.\n   * @param {string[]} fieldNames Field names\n   * @returns {OneOfGetter} Unbound getter\n   */\n  util.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function () {\n      // eslint-disable-line consistent-return\n      for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n    };\n  };\n\n  /**\n   * A OneOf setter as returned by {@link util.oneOfSetter}.\n   * @typedef OneOfSetter\n   * @type {function}\n   * @param {string|undefined} value Field name\n   * @returns {undefined}\n   */\n\n  /**\n   * Builds a setter for a oneof's present field name.\n   * @param {string[]} fieldNames Field names\n   * @returns {OneOfSetter} Unbound setter\n   */\n  util.oneOfSetter = function setOneOf(fieldNames) {\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function (name) {\n      for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n    };\n  };\n\n  /**\n   * Default conversion options used for {@link Message#toJSON} implementations.\n   *\n   * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n   *\n   * - Longs become strings\n   * - Enums become string keys\n   * - Bytes become base64 encoded strings\n   * - (Sub-)Messages become plain objects\n   * - Maps become plain objects with all string keys\n   * - Repeated fields become arrays\n   * - NaN and Infinity for float and double fields become strings\n   *\n   * @type {IConversionOptions}\n   * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n   */\n  util.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n  };\n\n  // Sets up buffer utility according to the environment (called in index-minimal)\n  util._configure = function () {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n      util._Buffer_from = util._Buffer_allocUnsafe = null;\n      return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n    function Buffer_from(value, encoding) {\n      return new Buffer(value, encoding);\n    };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n    function Buffer_allocUnsafe(size) {\n      return new Buffer(size);\n    };\n  };\n});\nvar writer = Writer;\nvar BufferWriter; // cyclic\n\nvar LongBits$1 = minimal.LongBits,\n  base64 = minimal.base64,\n  utf8 = minimal.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n  /**\n   * Function to call.\n   * @type {function(Uint8Array, number, *)}\n   */\n  this.fn = fn;\n\n  /**\n   * Value byte length.\n   * @type {number}\n   */\n  this.len = len;\n\n  /**\n   * Next operation.\n   * @type {Writer.Op|undefined}\n   */\n  this.next = undefined;\n\n  /**\n   * Value to write.\n   * @type {*}\n   */\n  this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n  /**\n   * Current head.\n   * @type {Writer.Op}\n   */\n  this.head = writer.head;\n\n  /**\n   * Current tail.\n   * @type {Writer.Op}\n   */\n  this.tail = writer.tail;\n\n  /**\n   * Current buffer length.\n   * @type {number}\n   */\n  this.len = writer.len;\n\n  /**\n   * Next state.\n   * @type {State|null}\n   */\n  this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n  /**\n   * Current length.\n   * @type {number}\n   */\n  this.len = 0;\n\n  /**\n   * Operations head.\n   * @type {Object}\n   */\n  this.head = new Op(noop, 0, 0);\n\n  /**\n   * Operations tail\n   * @type {Object}\n   */\n  this.tail = this.head;\n\n  /**\n   * Linked forked states.\n   * @type {Object|null}\n   */\n  this.states = null;\n\n  // When a value is written, the writer calculates its byte length and puts it into a linked\n  // list of operations to perform when finish() is called. This both allows us to allocate\n  // buffers of the exact required size and reduces the amount of work we have to do compared\n  // to first calculating over objects and then encoding over objects. In our case, the encoding\n  // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n  return minimal.Buffer ? function create_buffer_setup() {\n    return (Writer.create = function create_buffer() {\n      return new BufferWriter();\n    })();\n  }\n  /* istanbul ignore next */ : function create_array() {\n    return new Writer();\n  };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n  return new minimal.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (minimal.Array !== Array) Writer.alloc = minimal.pool(Writer.alloc, minimal.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n  this.tail = this.tail.next = new Op(fn, len, val);\n  this.len += len;\n  return this;\n};\nfunction writeByte(val, buf, pos) {\n  buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128;\n    val >>>= 7;\n  }\n  buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n  this.len = len;\n  this.next = undefined;\n  this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n  // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n  // uint32 is by far the most frequently used operation and benefits significantly from this.\n  this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n  return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n  return value < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec\n  : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n  return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n  while (val.hi) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n    val.hi >>>= 7;\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = val.lo >>> 7;\n  }\n  buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n  var bits = LongBits$1.from(value);\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n  var bits = LongBits$1.from(value).zzEncode();\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n  return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n  return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n  var bits = LongBits$1.from(value);\n  return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n  return this._push(minimal.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n  return this._push(minimal.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = minimal.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n  buf.set(val, pos); // also works for plain array values\n}\n/* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n  for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n};\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n  var len = value.length >>> 0;\n  if (!len) return this._push(writeByte, 1, 0);\n  if (minimal.isString(value)) {\n    var buf = Writer.alloc(len = base64.length(value));\n    base64.decode(value, buf, 0);\n    value = buf;\n  }\n  return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n  var len = utf8.length(value);\n  return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n  this.states = new State(this);\n  this.head = this.tail = new Op(noop, 0, 0);\n  this.len = 0;\n  return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n  if (this.states) {\n    this.head = this.states.head;\n    this.tail = this.states.tail;\n    this.len = this.states.len;\n    this.states = this.states.next;\n  } else {\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n  }\n  return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n  var head = this.head,\n    tail = this.tail,\n    len = this.len;\n  this.reset().uint32(len);\n  if (len) {\n    this.tail.next = head.next; // skip noop\n    this.tail = tail;\n    this.len += len;\n  }\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n  var head = this.head.next,\n    // skip noop\n    buf = this.constructor.alloc(this.len),\n    pos = 0;\n  while (head) {\n    head.fn(head.val, buf, pos);\n    pos += head.len;\n    head = head.next;\n  }\n  // this.head = this.tail = null;\n  return buf;\n};\nWriter._configure = function (BufferWriter_) {\n  BufferWriter = BufferWriter_;\n  Writer.create = create();\n  BufferWriter._configure();\n};\nvar writer_buffer = BufferWriter$1;\n\n// extends Writer\n\n(BufferWriter$1.prototype = Object.create(writer.prototype)).constructor = BufferWriter$1;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter$1() {\n  writer.call(this);\n}\nBufferWriter$1._configure = function () {\n  /**\n   * Allocates a buffer of the specified size.\n   * @function\n   * @param {number} size Buffer size\n   * @returns {Buffer} Buffer\n   */\n  BufferWriter$1.alloc = minimal._Buffer_allocUnsafe;\n  BufferWriter$1.writeBytesBuffer = minimal.Buffer && minimal.Buffer.prototype instanceof Uint8Array && minimal.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy)\n      // Buffer values\n      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n    // plain array values\n    buf[pos++] = val[i++];\n  };\n};\n\n/**\n * @override\n */\nBufferWriter$1.prototype.bytes = function write_bytes_buffer(value) {\n  if (minimal.isString(value)) value = minimal._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(BufferWriter$1.writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    minimal.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter$1.prototype.string = function write_string_buffer(value) {\n  var len = minimal.Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter$1._configure();\nvar reader = Reader;\nvar BufferReader; // cyclic\n\nvar LongBits$2 = minimal.LongBits,\n  utf8$1 = minimal.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n  return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n  /**\n   * Read buffer.\n   * @type {Uint8Array}\n   */\n  this.buf = buffer;\n\n  /**\n   * Read buffer position.\n   * @type {number}\n   */\n  this.pos = 0;\n\n  /**\n   * Read buffer length.\n   * @type {number}\n   */\n  this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n  if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */ : function create_array(buffer) {\n  if (Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n};\nvar create$1 = function create() {\n  return minimal.Buffer ? function create_buffer_setup(buffer) {\n    return (Reader.create = function create_buffer(buffer) {\n      return minimal.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n      /* istanbul ignore next */ : create_array(buffer);\n    })(buffer);\n  }\n  /* istanbul ignore next */ : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create$1();\nReader.prototype._slice = minimal.Array.prototype.subarray || /* istanbul ignore next */minimal.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = function read_uint32_setup() {\n  var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n  return function read_uint32() {\n    value = (this.buf[this.pos] & 127) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n\n    /* istanbul ignore if */\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len;\n      throw indexOutOfRange(this, 10);\n    }\n    return value;\n  };\n}();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n  return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n  var value = this.uint32();\n  return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n  // tends to deopt with local vars for octet etc.\n  var bits = new LongBits$2(0, 0);\n  var i = 0;\n  if (this.len - this.pos > 4) {\n    // fast route (lo)\n    for (; i < 4; ++i) {\n      // 1st..4th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 5th\n    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n    if (this.buf[this.pos++] < 128) return bits;\n    i = 0;\n  } else {\n    for (; i < 3; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 1st..3th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 4th\n    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n    return bits;\n  }\n  if (this.len - this.pos > 4) {\n    // fast route (hi)\n    for (; i < 5; ++i) {\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  } else {\n    for (; i < 5; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  }\n  /* istanbul ignore next */\n  throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n  return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n  // note that this uses `end`, not `pos`\n  return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64( /* this: Reader */\n) {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n  return new LongBits$2(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  var value = minimal.float.readFloatLE(this.buf, this.pos);\n  this.pos += 4;\n  return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n  var value = minimal.float.readDoubleLE(this.buf, this.pos);\n  this.pos += 8;\n  return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n  var length = this.uint32(),\n    start = this.pos,\n    end = this.pos + length;\n\n  /* istanbul ignore if */\n  if (end > this.len) throw indexOutOfRange(this, length);\n  this.pos += length;\n  if (Array.isArray(this.buf))\n    // plain array\n    return this.buf.slice(start, end);\n  return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n  ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n  var bytes = this.bytes();\n  return utf8$1.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n  if (typeof length === \"number\") {\n    /* istanbul ignore if */\n    if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n  } else {\n    do {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n    } while (this.buf[this.pos++] & 128);\n  }\n  return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function (wireType) {\n  switch (wireType) {\n    case 0:\n      this.skip();\n      break;\n    case 1:\n      this.skip(8);\n      break;\n    case 2:\n      this.skip(this.uint32());\n      break;\n    case 3:\n      while ((wireType = this.uint32() & 7) !== 4) {\n        this.skipType(wireType);\n      }\n      break;\n    case 5:\n      this.skip(4);\n      break;\n\n    /* istanbul ignore next */\n    default:\n      throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  }\n  return this;\n};\nReader._configure = function (BufferReader_) {\n  BufferReader = BufferReader_;\n  Reader.create = create$1();\n  BufferReader._configure();\n  var fn = minimal.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n  minimal.merge(Reader.prototype, {\n    int64: function read_int64() {\n      return readLongVarint.call(this)[fn](false);\n    },\n    uint64: function read_uint64() {\n      return readLongVarint.call(this)[fn](true);\n    },\n    sint64: function read_sint64() {\n      return readLongVarint.call(this).zzDecode()[fn](false);\n    },\n    fixed64: function read_fixed64() {\n      return readFixed64.call(this)[fn](true);\n    },\n    sfixed64: function read_sfixed64() {\n      return readFixed64.call(this)[fn](false);\n    }\n  });\n};\nvar reader_buffer = BufferReader$1;\n\n// extends Reader\n\n(BufferReader$1.prototype = Object.create(reader.prototype)).constructor = BufferReader$1;\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader$1(buffer) {\n  reader.call(this, buffer);\n\n  /**\n   * Read buffer.\n   * @name BufferReader#buf\n   * @type {Buffer}\n   */\n}\n\nBufferReader$1._configure = function () {\n  /* istanbul ignore else */\n  if (minimal.Buffer) BufferReader$1.prototype._slice = minimal.Buffer.prototype.slice;\n};\n\n/**\n * @override\n */\nBufferReader$1.prototype.string = function read_string_buffer() {\n  var len = this.uint32(); // modifies pos\n  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader$1._configure();\nvar service = Service;\n\n// Extends EventEmitter\n(Service.prototype = Object.create(minimal.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n  minimal.EventEmitter.call(this);\n\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n  if (!request) throw TypeError(\"request must be specified\");\n  var self = this;\n  if (!callback) return minimal.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n  if (!self.rpcImpl) {\n    setTimeout(function () {\n      callback(Error(\"already ended\"));\n    }, 0);\n    return undefined;\n  }\n  try {\n    return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n      if (err) {\n        self.emit(\"error\", err, method);\n        return callback(err);\n      }\n      if (response === null) {\n        self.end( /* endedByRPC */true);\n        return undefined;\n      }\n      if (!(response instanceof responseCtor)) {\n        try {\n          response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n        } catch (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n      }\n      self.emit(\"data\", response, method);\n      return callback(null, response);\n    });\n  } catch (err) {\n    self.emit(\"error\", err, method);\n    setTimeout(function () {\n      callback(err);\n    }, 0);\n    return undefined;\n  }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};\nvar rpc_1 = createCommonjsModule(function (module, exports) {\n  /**\n   * Streaming RPC helpers.\n   * @namespace\n   */\n  var rpc = exports;\n\n  /**\n   * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n   * @typedef RPCImpl\n   * @type {function}\n   * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n   * @param {Uint8Array} requestData Request data\n   * @param {RPCImplCallback} callback Callback function\n   * @returns {undefined}\n   * @example\n   * function rpcImpl(method, requestData, callback) {\n   *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n   *         throw Error(\"no such method\");\n   *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n   *         callback(err, responseData);\n   *     });\n   * }\n   */\n\n  /**\n   * Node-style callback as used by {@link RPCImpl}.\n   * @typedef RPCImplCallback\n   * @type {function}\n   * @param {Error|null} error Error, if any, otherwise `null`\n   * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n   * @returns {undefined}\n   */\n\n  rpc.Service = service;\n});\nvar roots = {};\nvar indexMinimal = createCommonjsModule(function (module, exports) {\n  var protobuf = exports;\n\n  /**\n   * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n   * @name build\n   * @type {string}\n   * @const\n   */\n  protobuf.build = \"minimal\";\n\n  // Serialization\n  protobuf.Writer = writer;\n  protobuf.BufferWriter = writer_buffer;\n  protobuf.Reader = reader;\n  protobuf.BufferReader = reader_buffer;\n\n  // Utility\n  protobuf.util = minimal;\n  protobuf.rpc = rpc_1;\n  protobuf.roots = roots;\n  protobuf.configure = configure;\n\n  /* istanbul ignore next */\n  /**\n   * Reconfigures the library according to the environment.\n   * @returns {undefined}\n   */\n  function configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n  }\n\n  // Set up buffer utility according to the environment\n  configure();\n});\nvar minimal$1 = indexMinimal;\nvar proto = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal$1);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Message = function () {\n      /**\n       * Properties of a Message.\n       * @exports IMessage\n       * @interface IMessage\n       * @property {string|null} [userId] Message userId\n       * @property {number|Long|null} [messageId] Message messageId\n       * @property {number|null} [last] Message last\n       * @property {string|null} [token] Message token\n       * @property {string|null} [userChannel] Message userChannel\n       * @property {string|null} [vpsToken] Message vpsToken\n       * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n       * @property {string|null} [messageName] Message messageName\n       * @property {number|null} [version] Message version\n       * @property {IVoice|null} [voice] Message voice\n       * @property {IText|null} [text] Message text\n       * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n       * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n       * @property {ISettings|null} [settings] Message settings\n       * @property {IStatus|null} [status] Message status\n       * @property {IDevice|null} [device] Message device\n       * @property {IBytes|null} [bytes] Message bytes\n       * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n       * @property {ICancel|null} [cancel] Message cancel\n       * @property {number|Long|null} [timestamp] Message timestamp\n       * @property {Object.<string,string>|null} [meta] Message meta\n       */\n\n      /**\n       * Constructs a new Message.\n       * @exports Message\n       * @classdesc Represents a Message.\n       * @implements IMessage\n       * @constructor\n       * @param {IMessage=} [properties] Properties to set\n       */\n      function Message(properties) {\n        this.devContext = [];\n        this.meta = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Message userId.\n       * @member {string} userId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userId = \"\";\n\n      /**\n       * Message messageId.\n       * @member {number|Long} messageId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message last.\n       * @member {number} last\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.last = 0;\n\n      /**\n       * Message token.\n       * @member {string} token\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.token = \"\";\n\n      /**\n       * Message userChannel.\n       * @member {string} userChannel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userChannel = \"\";\n\n      /**\n       * Message vpsToken.\n       * @member {string} vpsToken\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.vpsToken = \"\";\n\n      /**\n       * Устарело с версии 3.\n       * @member {Array.<IDevContext>} devContext\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.devContext = $util.emptyArray;\n\n      /**\n       * Message messageName.\n       * @member {string} messageName\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageName = \"\";\n\n      /**\n       * Message version.\n       * @member {number} version\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.version = 0;\n\n      /**\n       * Message voice.\n       * @member {IVoice|null|undefined} voice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.voice = null;\n\n      /**\n       * Message text.\n       * @member {IText|null|undefined} text\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.text = null;\n\n      /**\n       * Message systemMessage.\n       * @member {ISystemMessage|null|undefined} systemMessage\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.systemMessage = null;\n\n      /**\n       * Message legacyDevice.\n       * @member {ILegacyDevice|null|undefined} legacyDevice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.legacyDevice = null;\n\n      /**\n       * Message settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.settings = null;\n\n      /**\n       * Message status.\n       * @member {IStatus|null|undefined} status\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.status = null;\n\n      /**\n       * Message device.\n       * @member {IDevice|null|undefined} device\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.device = null;\n\n      /**\n       * Message bytes.\n       * @member {IBytes|null|undefined} bytes\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.bytes = null;\n\n      /**\n       * Message initialSettings.\n       * @member {IInitialSettings|null|undefined} initialSettings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.initialSettings = null;\n\n      /**\n       * Message cancel.\n       * @member {ICancel|null|undefined} cancel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.cancel = null;\n\n      /**\n       * Message timestamp.\n       * @member {number|Long} timestamp\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message meta.\n       * @member {Object.<string,string>} meta\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.meta = $util.emptyObject;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * Message content.\n       * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|\"cancel\"|undefined} content\n       * @memberof Message\n       * @instance\n       */\n      Object.defineProperty(Message.prototype, \"content\", {\n        get: $util.oneOfGetter($oneOfFields = [\"voice\", \"text\", \"systemMessage\", \"legacyDevice\", \"settings\", \"status\", \"device\", \"bytes\", \"initialSettings\", \"cancel\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new Message instance using the specified properties.\n       * @function create\n       * @memberof Message\n       * @static\n       * @param {IMessage=} [properties] Properties to set\n       * @returns {Message} Message instance\n       */\n      Message.create = function create(properties) {\n        return new Message(properties);\n      };\n\n      /**\n       * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n       * @function encode\n       * @memberof Message\n       * @static\n       * @param {IMessage} message Message message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Message.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.messageId != null && Object.hasOwnProperty.call(message, \"messageId\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.messageId);\n        if (message.last != null && Object.hasOwnProperty.call(message, \"last\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.last);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.token);\n        if (message.voice != null && Object.hasOwnProperty.call(message, \"voice\")) $root.Voice.encode(message.voice, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\")) $root.Text.encode(message.text, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.systemMessage != null && Object.hasOwnProperty.call(message, \"systemMessage\")) $root.SystemMessage.encode(message.systemMessage, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.legacyDevice != null && Object.hasOwnProperty.call(message, \"legacyDevice\")) $root.LegacyDevice.encode(message.legacyDevice, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.status != null && Object.hasOwnProperty.call(message, \"status\")) $root.Status.encode(message.status, writer.uint32( /* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.userChannel);\n        if (message.vpsToken != null && Object.hasOwnProperty.call(message, \"vpsToken\")) writer.uint32( /* id 12, wireType 2 =*/98).string(message.vpsToken);\n        if (message.devContext != null && message.devContext.length) for (var i = 0; i < message.devContext.length; ++i) $root.DevContext.encode(message.devContext[i], writer.uint32( /* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.messageName != null && Object.hasOwnProperty.call(message, \"messageName\")) writer.uint32( /* id 14, wireType 2 =*/114).string(message.messageName);\n        if (message.version != null && Object.hasOwnProperty.call(message, \"version\")) writer.uint32( /* id 15, wireType 0 =*/120).int32(message.version);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.bytes != null && Object.hasOwnProperty.call(message, \"bytes\")) $root.Bytes.encode(message.bytes, writer.uint32( /* id 17, wireType 2 =*/138).fork()).ldelim();\n        if (message.initialSettings != null && Object.hasOwnProperty.call(message, \"initialSettings\")) $root.InitialSettings.encode(message.initialSettings, writer.uint32( /* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\")) writer.uint32( /* id 19, wireType 0 =*/152).int64(message.timestamp);\n        if (message.meta != null && Object.hasOwnProperty.call(message, \"meta\")) for (var keys = Object.keys(message.meta), i = 0; i < keys.length; ++i) writer.uint32( /* id 20, wireType 2 =*/162).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.meta[keys[i]]).ldelim();\n        if (message.cancel != null && Object.hasOwnProperty.call(message, \"cancel\")) $root.Cancel.encode(message.cancel, writer.uint32( /* id 21, wireType 2 =*/170).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Message\n       * @static\n       * @param {IMessage} message Message message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Message.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Message message from the specified reader or buffer.\n       * @function decode\n       * @memberof Message\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Message} Message\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Message.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Message(),\n          key,\n          value;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.userId = reader.string();\n              break;\n            case 2:\n              message.messageId = reader.int64();\n              break;\n            case 3:\n              message.last = reader.int32();\n              break;\n            case 4:\n              message.token = reader.string();\n              break;\n            case 11:\n              message.userChannel = reader.string();\n              break;\n            case 12:\n              message.vpsToken = reader.string();\n              break;\n            case 13:\n              if (!(message.devContext && message.devContext.length)) message.devContext = [];\n              message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n              break;\n            case 14:\n              message.messageName = reader.string();\n              break;\n            case 15:\n              message.version = reader.int32();\n              break;\n            case 5:\n              message.voice = $root.Voice.decode(reader, reader.uint32());\n              break;\n            case 6:\n              message.text = $root.Text.decode(reader, reader.uint32());\n              break;\n            case 7:\n              message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n              break;\n            case 8:\n              message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n              break;\n            case 9:\n              message.settings = $root.Settings.decode(reader, reader.uint32());\n              break;\n            case 10:\n              message.status = $root.Status.decode(reader, reader.uint32());\n              break;\n            case 16:\n              message.device = $root.Device.decode(reader, reader.uint32());\n              break;\n            case 17:\n              message.bytes = $root.Bytes.decode(reader, reader.uint32());\n              break;\n            case 18:\n              message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n              break;\n            case 21:\n              message.cancel = $root.Cancel.decode(reader, reader.uint32());\n              break;\n            case 19:\n              message.timestamp = reader.int64();\n              break;\n            case 20:\n              if (message.meta === $util.emptyObject) message.meta = {};\n              var end2 = reader.uint32() + reader.pos;\n              key = \"\";\n              value = \"\";\n              while (reader.pos < end2) {\n                var tag2 = reader.uint32();\n                switch (tag2 >>> 3) {\n                  case 1:\n                    key = reader.string();\n                    break;\n                  case 2:\n                    value = reader.string();\n                    break;\n                  default:\n                    reader.skipType(tag2 & 7);\n                    break;\n                }\n              }\n              message.meta[key] = value;\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Message message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Message\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Message} Message\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Message.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Message message.\n       * @function verify\n       * @memberof Message\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Message.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n        if (message.userId != null && message.hasOwnProperty(\"userId\")) if (!$util.isString(message.userId)) return \"userId: string expected\";\n        if (message.messageId != null && message.hasOwnProperty(\"messageId\")) if (!$util.isInteger(message.messageId) && !(message.messageId && $util.isInteger(message.messageId.low) && $util.isInteger(message.messageId.high))) return \"messageId: integer|Long expected\";\n        if (message.last != null && message.hasOwnProperty(\"last\")) if (!$util.isInteger(message.last)) return \"last: integer expected\";\n        if (message.token != null && message.hasOwnProperty(\"token\")) if (!$util.isString(message.token)) return \"token: string expected\";\n        if (message.userChannel != null && message.hasOwnProperty(\"userChannel\")) if (!$util.isString(message.userChannel)) return \"userChannel: string expected\";\n        if (message.vpsToken != null && message.hasOwnProperty(\"vpsToken\")) if (!$util.isString(message.vpsToken)) return \"vpsToken: string expected\";\n        if (message.devContext != null && message.hasOwnProperty(\"devContext\")) {\n          if (!Array.isArray(message.devContext)) return \"devContext: array expected\";\n          for (var i = 0; i < message.devContext.length; ++i) {\n            var error = $root.DevContext.verify(message.devContext[i]);\n            if (error) return \"devContext.\" + error;\n          }\n        }\n        if (message.messageName != null && message.hasOwnProperty(\"messageName\")) if (!$util.isString(message.messageName)) return \"messageName: string expected\";\n        if (message.version != null && message.hasOwnProperty(\"version\")) if (!$util.isInteger(message.version)) return \"version: integer expected\";\n        if (message.voice != null && message.hasOwnProperty(\"voice\")) {\n          properties.content = 1;\n          {\n            var error = $root.Voice.verify(message.voice);\n            if (error) return \"voice.\" + error;\n          }\n        }\n        if (message.text != null && message.hasOwnProperty(\"text\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Text.verify(message.text);\n            if (error) return \"text.\" + error;\n          }\n        }\n        if (message.systemMessage != null && message.hasOwnProperty(\"systemMessage\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.SystemMessage.verify(message.systemMessage);\n            if (error) return \"systemMessage.\" + error;\n          }\n        }\n        if (message.legacyDevice != null && message.hasOwnProperty(\"legacyDevice\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.LegacyDevice.verify(message.legacyDevice);\n            if (error) return \"legacyDevice.\" + error;\n          }\n        }\n        if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Settings.verify(message.settings);\n            if (error) return \"settings.\" + error;\n          }\n        }\n        if (message.status != null && message.hasOwnProperty(\"status\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Status.verify(message.status);\n            if (error) return \"status.\" + error;\n          }\n        }\n        if (message.device != null && message.hasOwnProperty(\"device\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Device.verify(message.device);\n            if (error) return \"device.\" + error;\n          }\n        }\n        if (message.bytes != null && message.hasOwnProperty(\"bytes\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Bytes.verify(message.bytes);\n            if (error) return \"bytes.\" + error;\n          }\n        }\n        if (message.initialSettings != null && message.hasOwnProperty(\"initialSettings\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.InitialSettings.verify(message.initialSettings);\n            if (error) return \"initialSettings.\" + error;\n          }\n        }\n        if (message.cancel != null && message.hasOwnProperty(\"cancel\")) {\n          if (properties.content === 1) return \"content: multiple values\";\n          properties.content = 1;\n          {\n            var error = $root.Cancel.verify(message.cancel);\n            if (error) return \"cancel.\" + error;\n          }\n        }\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high))) return \"timestamp: integer|Long expected\";\n        if (message.meta != null && message.hasOwnProperty(\"meta\")) {\n          if (!$util.isObject(message.meta)) return \"meta: object expected\";\n          var key = Object.keys(message.meta);\n          for (var i = 0; i < key.length; ++i) if (!$util.isString(message.meta[key[i]])) return \"meta: string{k:string} expected\";\n        }\n        return null;\n      };\n\n      /**\n       * Creates a Message message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Message\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Message} Message\n       */\n      Message.fromObject = function fromObject(object) {\n        if (object instanceof $root.Message) return object;\n        var message = new $root.Message();\n        if (object.userId != null) message.userId = String(object.userId);\n        if (object.messageId != null) if ($util.Long) (message.messageId = $util.Long.fromValue(object.messageId)).unsigned = false;else if (typeof object.messageId === \"string\") message.messageId = parseInt(object.messageId, 10);else if (typeof object.messageId === \"number\") message.messageId = object.messageId;else if (typeof object.messageId === \"object\") message.messageId = new $util.LongBits(object.messageId.low >>> 0, object.messageId.high >>> 0).toNumber();\n        if (object.last != null) message.last = object.last | 0;\n        if (object.token != null) message.token = String(object.token);\n        if (object.userChannel != null) message.userChannel = String(object.userChannel);\n        if (object.vpsToken != null) message.vpsToken = String(object.vpsToken);\n        if (object.devContext) {\n          if (!Array.isArray(object.devContext)) throw TypeError(\".Message.devContext: array expected\");\n          message.devContext = [];\n          for (var i = 0; i < object.devContext.length; ++i) {\n            if (typeof object.devContext[i] !== \"object\") throw TypeError(\".Message.devContext: object expected\");\n            message.devContext[i] = $root.DevContext.fromObject(object.devContext[i]);\n          }\n        }\n        if (object.messageName != null) message.messageName = String(object.messageName);\n        if (object.version != null) message.version = object.version | 0;\n        if (object.voice != null) {\n          if (typeof object.voice !== \"object\") throw TypeError(\".Message.voice: object expected\");\n          message.voice = $root.Voice.fromObject(object.voice);\n        }\n        if (object.text != null) {\n          if (typeof object.text !== \"object\") throw TypeError(\".Message.text: object expected\");\n          message.text = $root.Text.fromObject(object.text);\n        }\n        if (object.systemMessage != null) {\n          if (typeof object.systemMessage !== \"object\") throw TypeError(\".Message.systemMessage: object expected\");\n          message.systemMessage = $root.SystemMessage.fromObject(object.systemMessage);\n        }\n        if (object.legacyDevice != null) {\n          if (typeof object.legacyDevice !== \"object\") throw TypeError(\".Message.legacyDevice: object expected\");\n          message.legacyDevice = $root.LegacyDevice.fromObject(object.legacyDevice);\n        }\n        if (object.settings != null) {\n          if (typeof object.settings !== \"object\") throw TypeError(\".Message.settings: object expected\");\n          message.settings = $root.Settings.fromObject(object.settings);\n        }\n        if (object.status != null) {\n          if (typeof object.status !== \"object\") throw TypeError(\".Message.status: object expected\");\n          message.status = $root.Status.fromObject(object.status);\n        }\n        if (object.device != null) {\n          if (typeof object.device !== \"object\") throw TypeError(\".Message.device: object expected\");\n          message.device = $root.Device.fromObject(object.device);\n        }\n        if (object.bytes != null) {\n          if (typeof object.bytes !== \"object\") throw TypeError(\".Message.bytes: object expected\");\n          message.bytes = $root.Bytes.fromObject(object.bytes);\n        }\n        if (object.initialSettings != null) {\n          if (typeof object.initialSettings !== \"object\") throw TypeError(\".Message.initialSettings: object expected\");\n          message.initialSettings = $root.InitialSettings.fromObject(object.initialSettings);\n        }\n        if (object.cancel != null) {\n          if (typeof object.cancel !== \"object\") throw TypeError(\".Message.cancel: object expected\");\n          message.cancel = $root.Cancel.fromObject(object.cancel);\n        }\n        if (object.timestamp != null) if ($util.Long) (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;else if (typeof object.timestamp === \"string\") message.timestamp = parseInt(object.timestamp, 10);else if (typeof object.timestamp === \"number\") message.timestamp = object.timestamp;else if (typeof object.timestamp === \"object\") message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n        if (object.meta) {\n          if (typeof object.meta !== \"object\") throw TypeError(\".Message.meta: object expected\");\n          message.meta = {};\n          for (var keys = Object.keys(object.meta), i = 0; i < keys.length; ++i) message.meta[keys[i]] = String(object.meta[keys[i]]);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Message message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Message\n       * @static\n       * @param {Message} message Message\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Message.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.devContext = [];\n        if (options.objects || options.defaults) object.meta = {};\n        if (options.defaults) {\n          object.userId = \"\";\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.messageId = options.longs === String ? \"0\" : 0;\n          object.last = 0;\n          object.token = \"\";\n          object.userChannel = \"\";\n          object.vpsToken = \"\";\n          object.messageName = \"\";\n          object.version = 0;\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.timestamp = options.longs === String ? \"0\" : 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\")) object.userId = message.userId;\n        if (message.messageId != null && message.hasOwnProperty(\"messageId\")) if (typeof message.messageId === \"number\") object.messageId = options.longs === String ? String(message.messageId) : message.messageId;else object.messageId = options.longs === String ? $util.Long.prototype.toString.call(message.messageId) : options.longs === Number ? new $util.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0).toNumber() : message.messageId;\n        if (message.last != null && message.hasOwnProperty(\"last\")) object.last = message.last;\n        if (message.token != null && message.hasOwnProperty(\"token\")) object.token = message.token;\n        if (message.voice != null && message.hasOwnProperty(\"voice\")) {\n          object.voice = $root.Voice.toObject(message.voice, options);\n          if (options.oneofs) object.content = \"voice\";\n        }\n        if (message.text != null && message.hasOwnProperty(\"text\")) {\n          object.text = $root.Text.toObject(message.text, options);\n          if (options.oneofs) object.content = \"text\";\n        }\n        if (message.systemMessage != null && message.hasOwnProperty(\"systemMessage\")) {\n          object.systemMessage = $root.SystemMessage.toObject(message.systemMessage, options);\n          if (options.oneofs) object.content = \"systemMessage\";\n        }\n        if (message.legacyDevice != null && message.hasOwnProperty(\"legacyDevice\")) {\n          object.legacyDevice = $root.LegacyDevice.toObject(message.legacyDevice, options);\n          if (options.oneofs) object.content = \"legacyDevice\";\n        }\n        if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n          object.settings = $root.Settings.toObject(message.settings, options);\n          if (options.oneofs) object.content = \"settings\";\n        }\n        if (message.status != null && message.hasOwnProperty(\"status\")) {\n          object.status = $root.Status.toObject(message.status, options);\n          if (options.oneofs) object.content = \"status\";\n        }\n        if (message.userChannel != null && message.hasOwnProperty(\"userChannel\")) object.userChannel = message.userChannel;\n        if (message.vpsToken != null && message.hasOwnProperty(\"vpsToken\")) object.vpsToken = message.vpsToken;\n        if (message.devContext && message.devContext.length) {\n          object.devContext = [];\n          for (var j = 0; j < message.devContext.length; ++j) object.devContext[j] = $root.DevContext.toObject(message.devContext[j], options);\n        }\n        if (message.messageName != null && message.hasOwnProperty(\"messageName\")) object.messageName = message.messageName;\n        if (message.version != null && message.hasOwnProperty(\"version\")) object.version = message.version;\n        if (message.device != null && message.hasOwnProperty(\"device\")) {\n          object.device = $root.Device.toObject(message.device, options);\n          if (options.oneofs) object.content = \"device\";\n        }\n        if (message.bytes != null && message.hasOwnProperty(\"bytes\")) {\n          object.bytes = $root.Bytes.toObject(message.bytes, options);\n          if (options.oneofs) object.content = \"bytes\";\n        }\n        if (message.initialSettings != null && message.hasOwnProperty(\"initialSettings\")) {\n          object.initialSettings = $root.InitialSettings.toObject(message.initialSettings, options);\n          if (options.oneofs) object.content = \"initialSettings\";\n        }\n        if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) if (typeof message.timestamp === \"number\") object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;else object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n        var keys2;\n        if (message.meta && (keys2 = Object.keys(message.meta)).length) {\n          object.meta = {};\n          for (var j = 0; j < keys2.length; ++j) object.meta[keys2[j]] = message.meta[keys2[j]];\n        }\n        if (message.cancel != null && message.hasOwnProperty(\"cancel\")) {\n          object.cancel = $root.Cancel.toObject(message.cancel, options);\n          if (options.oneofs) object.content = \"cancel\";\n        }\n        return object;\n      };\n\n      /**\n       * Converts this Message to JSON.\n       * @function toJSON\n       * @memberof Message\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Message;\n    }();\n    $root.InitialSettings = function () {\n      /**\n       * Properties of an InitialSettings.\n       * @exports IInitialSettings\n       * @interface IInitialSettings\n       * @property {string|null} [userId] InitialSettings userId\n       * @property {string|null} [userChannel] InitialSettings userChannel\n       * @property {IDevice|null} [device] InitialSettings device\n       * @property {ISettings|null} [settings] InitialSettings settings\n       * @property {string|null} [locale] InitialSettings locale\n       */\n\n      /**\n       * Constructs a new InitialSettings.\n       * @exports InitialSettings\n       * @classdesc Represents an InitialSettings.\n       * @implements IInitialSettings\n       * @constructor\n       * @param {IInitialSettings=} [properties] Properties to set\n       */\n      function InitialSettings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * InitialSettings userId.\n       * @member {string} userId\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userId = \"\";\n\n      /**\n       * InitialSettings userChannel.\n       * @member {string} userChannel\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userChannel = \"\";\n\n      /**\n       * InitialSettings device.\n       * @member {IDevice|null|undefined} device\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.device = null;\n\n      /**\n       * InitialSettings settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.settings = null;\n\n      /**\n       * InitialSettings locale.\n       * @member {string} locale\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.locale = \"\";\n\n      /**\n       * Creates a new InitialSettings instance using the specified properties.\n       * @function create\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings=} [properties] Properties to set\n       * @returns {InitialSettings} InitialSettings instance\n       */\n      InitialSettings.create = function create(properties) {\n        return new InitialSettings(properties);\n      };\n\n      /**\n       * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n       * @function encode\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings} message InitialSettings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      InitialSettings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.userChannel);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.locale != null && Object.hasOwnProperty.call(message, \"locale\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.locale);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified InitialSettings message, length delimited. Does not implicitly {@link InitialSettings.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings} message InitialSettings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      InitialSettings.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an InitialSettings message from the specified reader or buffer.\n       * @function decode\n       * @memberof InitialSettings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {InitialSettings} InitialSettings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      InitialSettings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.InitialSettings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.userId = reader.string();\n              break;\n            case 2:\n              message.userChannel = reader.string();\n              break;\n            case 3:\n              message.device = $root.Device.decode(reader, reader.uint32());\n              break;\n            case 4:\n              message.settings = $root.Settings.decode(reader, reader.uint32());\n              break;\n            case 5:\n              message.locale = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an InitialSettings message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof InitialSettings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {InitialSettings} InitialSettings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      InitialSettings.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an InitialSettings message.\n       * @function verify\n       * @memberof InitialSettings\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      InitialSettings.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\")) if (!$util.isString(message.userId)) return \"userId: string expected\";\n        if (message.userChannel != null && message.hasOwnProperty(\"userChannel\")) if (!$util.isString(message.userChannel)) return \"userChannel: string expected\";\n        if (message.device != null && message.hasOwnProperty(\"device\")) {\n          var error = $root.Device.verify(message.device);\n          if (error) return \"device.\" + error;\n        }\n        if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n          var error = $root.Settings.verify(message.settings);\n          if (error) return \"settings.\" + error;\n        }\n        if (message.locale != null && message.hasOwnProperty(\"locale\")) if (!$util.isString(message.locale)) return \"locale: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates an InitialSettings message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof InitialSettings\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {InitialSettings} InitialSettings\n       */\n      InitialSettings.fromObject = function fromObject(object) {\n        if (object instanceof $root.InitialSettings) return object;\n        var message = new $root.InitialSettings();\n        if (object.userId != null) message.userId = String(object.userId);\n        if (object.userChannel != null) message.userChannel = String(object.userChannel);\n        if (object.device != null) {\n          if (typeof object.device !== \"object\") throw TypeError(\".InitialSettings.device: object expected\");\n          message.device = $root.Device.fromObject(object.device);\n        }\n        if (object.settings != null) {\n          if (typeof object.settings !== \"object\") throw TypeError(\".InitialSettings.settings: object expected\");\n          message.settings = $root.Settings.fromObject(object.settings);\n        }\n        if (object.locale != null) message.locale = String(object.locale);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an InitialSettings message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof InitialSettings\n       * @static\n       * @param {InitialSettings} message InitialSettings\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      InitialSettings.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.userId = \"\";\n          object.userChannel = \"\";\n          object.device = null;\n          object.settings = null;\n          object.locale = \"\";\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\")) object.userId = message.userId;\n        if (message.userChannel != null && message.hasOwnProperty(\"userChannel\")) object.userChannel = message.userChannel;\n        if (message.device != null && message.hasOwnProperty(\"device\")) object.device = $root.Device.toObject(message.device, options);\n        if (message.settings != null && message.hasOwnProperty(\"settings\")) object.settings = $root.Settings.toObject(message.settings, options);\n        if (message.locale != null && message.hasOwnProperty(\"locale\")) object.locale = message.locale;\n        return object;\n      };\n\n      /**\n       * Converts this InitialSettings to JSON.\n       * @function toJSON\n       * @memberof InitialSettings\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      InitialSettings.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return InitialSettings;\n    }();\n    $root.Device = function () {\n      /**\n       * Properties of a Device.\n       * @exports IDevice\n       * @interface IDevice\n       * @property {string|null} [platformType] Device platformType\n       * @property {string|null} [platformVersion] Device platformVersion\n       * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n       * @property {string|null} [surfaceVersion] Device surfaceVersion\n       * @property {string|null} [features] Device features\n       * @property {string|null} [capabilities] Device capabilities\n       * @property {string|null} [deviceId] Device deviceId\n       * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n       * @property {string|null} [deviceModel] Device deviceModel\n       * @property {string|null} [additionalInfo] Device additionalInfo\n       * @property {string|null} [tenant] Device tenant\n       */\n\n      /**\n       * Constructs a new Device.\n       * @exports Device\n       * @classdesc Represents a Device.\n       * @implements IDevice\n       * @constructor\n       * @param {IDevice=} [properties] Properties to set\n       */\n      function Device(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Device platformType.\n       * @member {string} platformType\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformType = \"\";\n\n      /**\n       * Device platformVersion.\n       * @member {string} platformVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformVersion = \"\";\n\n      /**\n       * Обязательно. Пример, SBERBOX\n       * @member {string} surface\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surface = \"\";\n\n      /**\n       * Device surfaceVersion.\n       * @member {string} surfaceVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surfaceVersion = \"\";\n\n      /**\n       * Device features.\n       * @member {string} features\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.features = \"\";\n\n      /**\n       * Device capabilities.\n       * @member {string} capabilities\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.capabilities = \"\";\n\n      /**\n       * Device deviceId.\n       * @member {string} deviceId\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceId = \"\";\n\n      /**\n       * Device deviceManufacturer.\n       * @member {string} deviceManufacturer\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceManufacturer = \"\";\n\n      /**\n       * Device deviceModel.\n       * @member {string} deviceModel\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceModel = \"\";\n\n      /**\n       * Device additionalInfo.\n       * @member {string} additionalInfo\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.additionalInfo = \"\";\n\n      /**\n       * Device tenant.\n       * @member {string} tenant\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.tenant = \"\";\n\n      /**\n       * Creates a new Device instance using the specified properties.\n       * @function create\n       * @memberof Device\n       * @static\n       * @param {IDevice=} [properties] Properties to set\n       * @returns {Device} Device instance\n       */\n      Device.create = function create(properties) {\n        return new Device(properties);\n      };\n\n      /**\n       * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n       * @function encode\n       * @memberof Device\n       * @static\n       * @param {IDevice} message Device message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Device.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.platformType != null && Object.hasOwnProperty.call(message, \"platformType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.platformType);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.platformVersion);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.surface);\n        if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, \"surfaceVersion\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.surfaceVersion);\n        if (message.features != null && Object.hasOwnProperty.call(message, \"features\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.features);\n        if (message.capabilities != null && Object.hasOwnProperty.call(message, \"capabilities\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.capabilities);\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.deviceId);\n        if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, \"deviceManufacturer\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.deviceManufacturer);\n        if (message.deviceModel != null && Object.hasOwnProperty.call(message, \"deviceModel\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.deviceModel);\n        if (message.additionalInfo != null && Object.hasOwnProperty.call(message, \"additionalInfo\")) writer.uint32( /* id 10, wireType 2 =*/82).string(message.additionalInfo);\n        if (message.tenant != null && Object.hasOwnProperty.call(message, \"tenant\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.tenant);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Device\n       * @static\n       * @param {IDevice} message Device message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Device.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Device message from the specified reader or buffer.\n       * @function decode\n       * @memberof Device\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Device} Device\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Device.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Device();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.platformType = reader.string();\n              break;\n            case 2:\n              message.platformVersion = reader.string();\n              break;\n            case 3:\n              message.surface = reader.string();\n              break;\n            case 4:\n              message.surfaceVersion = reader.string();\n              break;\n            case 5:\n              message.features = reader.string();\n              break;\n            case 6:\n              message.capabilities = reader.string();\n              break;\n            case 7:\n              message.deviceId = reader.string();\n              break;\n            case 8:\n              message.deviceManufacturer = reader.string();\n              break;\n            case 9:\n              message.deviceModel = reader.string();\n              break;\n            case 10:\n              message.additionalInfo = reader.string();\n              break;\n            case 11:\n              message.tenant = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Device message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Device\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Device} Device\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Device.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Device message.\n       * @function verify\n       * @memberof Device\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Device.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.platformType != null && message.hasOwnProperty(\"platformType\")) if (!$util.isString(message.platformType)) return \"platformType: string expected\";\n        if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\")) if (!$util.isString(message.platformVersion)) return \"platformVersion: string expected\";\n        if (message.surface != null && message.hasOwnProperty(\"surface\")) if (!$util.isString(message.surface)) return \"surface: string expected\";\n        if (message.surfaceVersion != null && message.hasOwnProperty(\"surfaceVersion\")) if (!$util.isString(message.surfaceVersion)) return \"surfaceVersion: string expected\";\n        if (message.features != null && message.hasOwnProperty(\"features\")) if (!$util.isString(message.features)) return \"features: string expected\";\n        if (message.capabilities != null && message.hasOwnProperty(\"capabilities\")) if (!$util.isString(message.capabilities)) return \"capabilities: string expected\";\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\")) if (!$util.isString(message.deviceId)) return \"deviceId: string expected\";\n        if (message.deviceManufacturer != null && message.hasOwnProperty(\"deviceManufacturer\")) if (!$util.isString(message.deviceManufacturer)) return \"deviceManufacturer: string expected\";\n        if (message.deviceModel != null && message.hasOwnProperty(\"deviceModel\")) if (!$util.isString(message.deviceModel)) return \"deviceModel: string expected\";\n        if (message.additionalInfo != null && message.hasOwnProperty(\"additionalInfo\")) if (!$util.isString(message.additionalInfo)) return \"additionalInfo: string expected\";\n        if (message.tenant != null && message.hasOwnProperty(\"tenant\")) if (!$util.isString(message.tenant)) return \"tenant: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Device message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Device\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Device} Device\n       */\n      Device.fromObject = function fromObject(object) {\n        if (object instanceof $root.Device) return object;\n        var message = new $root.Device();\n        if (object.platformType != null) message.platformType = String(object.platformType);\n        if (object.platformVersion != null) message.platformVersion = String(object.platformVersion);\n        if (object.surface != null) message.surface = String(object.surface);\n        if (object.surfaceVersion != null) message.surfaceVersion = String(object.surfaceVersion);\n        if (object.features != null) message.features = String(object.features);\n        if (object.capabilities != null) message.capabilities = String(object.capabilities);\n        if (object.deviceId != null) message.deviceId = String(object.deviceId);\n        if (object.deviceManufacturer != null) message.deviceManufacturer = String(object.deviceManufacturer);\n        if (object.deviceModel != null) message.deviceModel = String(object.deviceModel);\n        if (object.additionalInfo != null) message.additionalInfo = String(object.additionalInfo);\n        if (object.tenant != null) message.tenant = String(object.tenant);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Device message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Device\n       * @static\n       * @param {Device} message Device\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Device.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.platformType = \"\";\n          object.platformVersion = \"\";\n          object.surface = \"\";\n          object.surfaceVersion = \"\";\n          object.features = \"\";\n          object.capabilities = \"\";\n          object.deviceId = \"\";\n          object.deviceManufacturer = \"\";\n          object.deviceModel = \"\";\n          object.additionalInfo = \"\";\n          object.tenant = \"\";\n        }\n        if (message.platformType != null && message.hasOwnProperty(\"platformType\")) object.platformType = message.platformType;\n        if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\")) object.platformVersion = message.platformVersion;\n        if (message.surface != null && message.hasOwnProperty(\"surface\")) object.surface = message.surface;\n        if (message.surfaceVersion != null && message.hasOwnProperty(\"surfaceVersion\")) object.surfaceVersion = message.surfaceVersion;\n        if (message.features != null && message.hasOwnProperty(\"features\")) object.features = message.features;\n        if (message.capabilities != null && message.hasOwnProperty(\"capabilities\")) object.capabilities = message.capabilities;\n        if (message.deviceId != null && message.hasOwnProperty(\"deviceId\")) object.deviceId = message.deviceId;\n        if (message.deviceManufacturer != null && message.hasOwnProperty(\"deviceManufacturer\")) object.deviceManufacturer = message.deviceManufacturer;\n        if (message.deviceModel != null && message.hasOwnProperty(\"deviceModel\")) object.deviceModel = message.deviceModel;\n        if (message.additionalInfo != null && message.hasOwnProperty(\"additionalInfo\")) object.additionalInfo = message.additionalInfo;\n        if (message.tenant != null && message.hasOwnProperty(\"tenant\")) object.tenant = message.tenant;\n        return object;\n      };\n\n      /**\n       * Converts this Device to JSON.\n       * @function toJSON\n       * @memberof Device\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Device.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Device;\n    }();\n    $root.Settings = function () {\n      /**\n       * Properties of a Settings.\n       * @exports ISettings\n       * @interface ISettings\n       * @property {number|null} [dubbing] Settings dubbing\n       * @property {number|null} [echo] Settings echo\n       * @property {string|null} [ttsEngine] Settings ttsEngine\n       * @property {string|null} [asrEngine] Settings asrEngine\n       * @property {number|null} [asrAutoStop] Settings asrAutoStop\n       * @property {number|null} [devMode] Settings devMode\n       * @property {string|null} [authConnector] Settings authConnector\n       * @property {string|null} [surface] Settings surface\n       */\n\n      /**\n       * Constructs a new Settings.\n       * @exports Settings\n       * @classdesc Represents a Settings.\n       * @implements ISettings\n       * @constructor\n       * @param {ISettings=} [properties] Properties to set\n       */\n      function Settings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Settings dubbing.\n       * @member {number} dubbing\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.dubbing = 0;\n\n      /**\n       * Settings echo.\n       * @member {number} echo\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.echo = 0;\n\n      /**\n       * Settings ttsEngine.\n       * @member {string} ttsEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.ttsEngine = \"\";\n\n      /**\n       * Settings asrEngine.\n       * @member {string} asrEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrEngine = \"\";\n\n      /**\n       * Settings asrAutoStop.\n       * @member {number} asrAutoStop\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrAutoStop = 0;\n\n      /**\n       * Settings devMode.\n       * @member {number} devMode\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.devMode = 0;\n\n      /**\n       * Settings authConnector.\n       * @member {string} authConnector\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.authConnector = \"\";\n\n      /**\n       * Settings surface.\n       * @member {string} surface\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.surface = \"\";\n\n      /**\n       * Creates a new Settings instance using the specified properties.\n       * @function create\n       * @memberof Settings\n       * @static\n       * @param {ISettings=} [properties] Properties to set\n       * @returns {Settings} Settings instance\n       */\n      Settings.create = function create(properties) {\n        return new Settings(properties);\n      };\n\n      /**\n       * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n       * @function encode\n       * @memberof Settings\n       * @static\n       * @param {ISettings} message Settings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Settings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.dubbing != null && Object.hasOwnProperty.call(message, \"dubbing\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.dubbing);\n        if (message.echo != null && Object.hasOwnProperty.call(message, \"echo\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.echo);\n        if (message.ttsEngine != null && Object.hasOwnProperty.call(message, \"ttsEngine\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.ttsEngine);\n        if (message.asrEngine != null && Object.hasOwnProperty.call(message, \"asrEngine\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.asrEngine);\n        if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, \"asrAutoStop\")) writer.uint32( /* id 5, wireType 0 =*/40).int32(message.asrAutoStop);\n        if (message.devMode != null && Object.hasOwnProperty.call(message, \"devMode\")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.devMode);\n        if (message.authConnector != null && Object.hasOwnProperty.call(message, \"authConnector\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.authConnector);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.surface);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Settings message, length delimited. Does not implicitly {@link Settings.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Settings\n       * @static\n       * @param {ISettings} message Settings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Settings.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Settings message from the specified reader or buffer.\n       * @function decode\n       * @memberof Settings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Settings} Settings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Settings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Settings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.dubbing = reader.int32();\n              break;\n            case 2:\n              message.echo = reader.int32();\n              break;\n            case 3:\n              message.ttsEngine = reader.string();\n              break;\n            case 4:\n              message.asrEngine = reader.string();\n              break;\n            case 5:\n              message.asrAutoStop = reader.int32();\n              break;\n            case 6:\n              message.devMode = reader.int32();\n              break;\n            case 7:\n              message.authConnector = reader.string();\n              break;\n            case 8:\n              message.surface = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Settings message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Settings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Settings} Settings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Settings.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Settings message.\n       * @function verify\n       * @memberof Settings\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Settings.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.dubbing != null && message.hasOwnProperty(\"dubbing\")) if (!$util.isInteger(message.dubbing)) return \"dubbing: integer expected\";\n        if (message.echo != null && message.hasOwnProperty(\"echo\")) if (!$util.isInteger(message.echo)) return \"echo: integer expected\";\n        if (message.ttsEngine != null && message.hasOwnProperty(\"ttsEngine\")) if (!$util.isString(message.ttsEngine)) return \"ttsEngine: string expected\";\n        if (message.asrEngine != null && message.hasOwnProperty(\"asrEngine\")) if (!$util.isString(message.asrEngine)) return \"asrEngine: string expected\";\n        if (message.asrAutoStop != null && message.hasOwnProperty(\"asrAutoStop\")) if (!$util.isInteger(message.asrAutoStop)) return \"asrAutoStop: integer expected\";\n        if (message.devMode != null && message.hasOwnProperty(\"devMode\")) if (!$util.isInteger(message.devMode)) return \"devMode: integer expected\";\n        if (message.authConnector != null && message.hasOwnProperty(\"authConnector\")) if (!$util.isString(message.authConnector)) return \"authConnector: string expected\";\n        if (message.surface != null && message.hasOwnProperty(\"surface\")) if (!$util.isString(message.surface)) return \"surface: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Settings message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Settings\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Settings} Settings\n       */\n      Settings.fromObject = function fromObject(object) {\n        if (object instanceof $root.Settings) return object;\n        var message = new $root.Settings();\n        if (object.dubbing != null) message.dubbing = object.dubbing | 0;\n        if (object.echo != null) message.echo = object.echo | 0;\n        if (object.ttsEngine != null) message.ttsEngine = String(object.ttsEngine);\n        if (object.asrEngine != null) message.asrEngine = String(object.asrEngine);\n        if (object.asrAutoStop != null) message.asrAutoStop = object.asrAutoStop | 0;\n        if (object.devMode != null) message.devMode = object.devMode | 0;\n        if (object.authConnector != null) message.authConnector = String(object.authConnector);\n        if (object.surface != null) message.surface = String(object.surface);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Settings message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Settings\n       * @static\n       * @param {Settings} message Settings\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Settings.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.dubbing = 0;\n          object.echo = 0;\n          object.ttsEngine = \"\";\n          object.asrEngine = \"\";\n          object.asrAutoStop = 0;\n          object.devMode = 0;\n          object.authConnector = \"\";\n          object.surface = \"\";\n        }\n        if (message.dubbing != null && message.hasOwnProperty(\"dubbing\")) object.dubbing = message.dubbing;\n        if (message.echo != null && message.hasOwnProperty(\"echo\")) object.echo = message.echo;\n        if (message.ttsEngine != null && message.hasOwnProperty(\"ttsEngine\")) object.ttsEngine = message.ttsEngine;\n        if (message.asrEngine != null && message.hasOwnProperty(\"asrEngine\")) object.asrEngine = message.asrEngine;\n        if (message.asrAutoStop != null && message.hasOwnProperty(\"asrAutoStop\")) object.asrAutoStop = message.asrAutoStop;\n        if (message.devMode != null && message.hasOwnProperty(\"devMode\")) object.devMode = message.devMode;\n        if (message.authConnector != null && message.hasOwnProperty(\"authConnector\")) object.authConnector = message.authConnector;\n        if (message.surface != null && message.hasOwnProperty(\"surface\")) object.surface = message.surface;\n        return object;\n      };\n\n      /**\n       * Converts this Settings to JSON.\n       * @function toJSON\n       * @memberof Settings\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Settings.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Settings;\n    }();\n    $root.LegacyDevice = function () {\n      /**\n       * Properties of a LegacyDevice.\n       * @exports ILegacyDevice\n       * @interface ILegacyDevice\n       * @property {string|null} [clientType] LegacyDevice clientType\n       * @property {string|null} [channel] LegacyDevice channel\n       * @property {string|null} [channelVersion] LegacyDevice channelVersion\n       * @property {string|null} [platformName] LegacyDevice platformName\n       * @property {string|null} [platformVersion] LegacyDevice platformVersion\n       * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n       * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n       */\n\n      /**\n       * Constructs a new LegacyDevice.\n       * @exports LegacyDevice\n       * @classdesc Represents a LegacyDevice.\n       * @implements ILegacyDevice\n       * @constructor\n       * @param {ILegacyDevice=} [properties] Properties to set\n       */\n      function LegacyDevice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * LegacyDevice clientType.\n       * @member {string} clientType\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.clientType = \"\";\n\n      /**\n       * LegacyDevice channel.\n       * @member {string} channel\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channel = \"\";\n\n      /**\n       * LegacyDevice channelVersion.\n       * @member {string} channelVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channelVersion = \"\";\n\n      /**\n       * LegacyDevice platformName.\n       * @member {string} platformName\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformName = \"\";\n\n      /**\n       * LegacyDevice platformVersion.\n       * @member {string} platformVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformVersion = \"\";\n\n      /**\n       * LegacyDevice sdkVersion.\n       * @member {string} sdkVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.sdkVersion = \"\";\n\n      /**\n       * LegacyDevice protocolVersion.\n       * @member {string} protocolVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.protocolVersion = \"\";\n\n      /**\n       * Creates a new LegacyDevice instance using the specified properties.\n       * @function create\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice=} [properties] Properties to set\n       * @returns {LegacyDevice} LegacyDevice instance\n       */\n      LegacyDevice.create = function create(properties) {\n        return new LegacyDevice(properties);\n      };\n\n      /**\n       * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n       * @function encode\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      LegacyDevice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.clientType != null && Object.hasOwnProperty.call(message, \"clientType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.clientType);\n        if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.channel);\n        if (message.channelVersion != null && Object.hasOwnProperty.call(message, \"channelVersion\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.channelVersion);\n        if (message.platformName != null && Object.hasOwnProperty.call(message, \"platformName\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.platformName);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.platformVersion);\n        if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.sdkVersion);\n        if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.protocolVersion);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified LegacyDevice message, length delimited. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      LegacyDevice.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a LegacyDevice message from the specified reader or buffer.\n       * @function decode\n       * @memberof LegacyDevice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {LegacyDevice} LegacyDevice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      LegacyDevice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.LegacyDevice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.clientType = reader.string();\n              break;\n            case 2:\n              message.channel = reader.string();\n              break;\n            case 3:\n              message.channelVersion = reader.string();\n              break;\n            case 4:\n              message.platformName = reader.string();\n              break;\n            case 5:\n              message.platformVersion = reader.string();\n              break;\n            case 6:\n              message.sdkVersion = reader.string();\n              break;\n            case 7:\n              message.protocolVersion = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a LegacyDevice message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof LegacyDevice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {LegacyDevice} LegacyDevice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      LegacyDevice.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a LegacyDevice message.\n       * @function verify\n       * @memberof LegacyDevice\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      LegacyDevice.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.clientType != null && message.hasOwnProperty(\"clientType\")) if (!$util.isString(message.clientType)) return \"clientType: string expected\";\n        if (message.channel != null && message.hasOwnProperty(\"channel\")) if (!$util.isString(message.channel)) return \"channel: string expected\";\n        if (message.channelVersion != null && message.hasOwnProperty(\"channelVersion\")) if (!$util.isString(message.channelVersion)) return \"channelVersion: string expected\";\n        if (message.platformName != null && message.hasOwnProperty(\"platformName\")) if (!$util.isString(message.platformName)) return \"platformName: string expected\";\n        if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\")) if (!$util.isString(message.platformVersion)) return \"platformVersion: string expected\";\n        if (message.sdkVersion != null && message.hasOwnProperty(\"sdkVersion\")) if (!$util.isString(message.sdkVersion)) return \"sdkVersion: string expected\";\n        if (message.protocolVersion != null && message.hasOwnProperty(\"protocolVersion\")) if (!$util.isString(message.protocolVersion)) return \"protocolVersion: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a LegacyDevice message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof LegacyDevice\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {LegacyDevice} LegacyDevice\n       */\n      LegacyDevice.fromObject = function fromObject(object) {\n        if (object instanceof $root.LegacyDevice) return object;\n        var message = new $root.LegacyDevice();\n        if (object.clientType != null) message.clientType = String(object.clientType);\n        if (object.channel != null) message.channel = String(object.channel);\n        if (object.channelVersion != null) message.channelVersion = String(object.channelVersion);\n        if (object.platformName != null) message.platformName = String(object.platformName);\n        if (object.platformVersion != null) message.platformVersion = String(object.platformVersion);\n        if (object.sdkVersion != null) message.sdkVersion = String(object.sdkVersion);\n        if (object.protocolVersion != null) message.protocolVersion = String(object.protocolVersion);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a LegacyDevice message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof LegacyDevice\n       * @static\n       * @param {LegacyDevice} message LegacyDevice\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      LegacyDevice.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.clientType = \"\";\n          object.channel = \"\";\n          object.channelVersion = \"\";\n          object.platformName = \"\";\n          object.platformVersion = \"\";\n          object.sdkVersion = \"\";\n          object.protocolVersion = \"\";\n        }\n        if (message.clientType != null && message.hasOwnProperty(\"clientType\")) object.clientType = message.clientType;\n        if (message.channel != null && message.hasOwnProperty(\"channel\")) object.channel = message.channel;\n        if (message.channelVersion != null && message.hasOwnProperty(\"channelVersion\")) object.channelVersion = message.channelVersion;\n        if (message.platformName != null && message.hasOwnProperty(\"platformName\")) object.platformName = message.platformName;\n        if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\")) object.platformVersion = message.platformVersion;\n        if (message.sdkVersion != null && message.hasOwnProperty(\"sdkVersion\")) object.sdkVersion = message.sdkVersion;\n        if (message.protocolVersion != null && message.hasOwnProperty(\"protocolVersion\")) object.protocolVersion = message.protocolVersion;\n        return object;\n      };\n\n      /**\n       * Converts this LegacyDevice to JSON.\n       * @function toJSON\n       * @memberof LegacyDevice\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      LegacyDevice.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return LegacyDevice;\n    }();\n    $root.Voice = function () {\n      /**\n       * Properties of a Voice.\n       * @exports IVoice\n       * @interface IVoice\n       * @property {Uint8Array|null} [data] Voice data\n       */\n\n      /**\n       * Constructs a new Voice.\n       * @exports Voice\n       * @classdesc Represents a Voice.\n       * @implements IVoice\n       * @constructor\n       * @param {IVoice=} [properties] Properties to set\n       */\n      function Voice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Voice data.\n       * @member {Uint8Array} data\n       * @memberof Voice\n       * @instance\n       */\n      Voice.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Creates a new Voice instance using the specified properties.\n       * @function create\n       * @memberof Voice\n       * @static\n       * @param {IVoice=} [properties] Properties to set\n       * @returns {Voice} Voice instance\n       */\n      Voice.create = function create(properties) {\n        return new Voice(properties);\n      };\n\n      /**\n       * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n       * @function encode\n       * @memberof Voice\n       * @static\n       * @param {IVoice} message Voice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Voice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Voice message, length delimited. Does not implicitly {@link Voice.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Voice\n       * @static\n       * @param {IVoice} message Voice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Voice.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Voice message from the specified reader or buffer.\n       * @function decode\n       * @memberof Voice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Voice} Voice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Voice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Voice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.data = reader.bytes();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Voice message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Voice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Voice} Voice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Voice.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Voice message.\n       * @function verify\n       * @memberof Voice\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Voice.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data))) return \"data: buffer expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Voice message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Voice\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Voice} Voice\n       */\n      Voice.fromObject = function fromObject(object) {\n        if (object instanceof $root.Voice) return object;\n        var message = new $root.Voice();\n        if (object.data != null) if (typeof object.data === \"string\") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Voice message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Voice\n       * @static\n       * @param {Voice} message Voice\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Voice.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) if (options.bytes === String) object.data = \"\";else {\n          object.data = [];\n          if (options.bytes !== Array) object.data = $util.newBuffer(object.data);\n        }\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n        return object;\n      };\n\n      /**\n       * Converts this Voice to JSON.\n       * @function toJSON\n       * @memberof Voice\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Voice.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Voice;\n    }();\n    $root.Text = function () {\n      /**\n       * Properties of a Text.\n       * @exports IText\n       * @interface IText\n       * @property {string|null} [data] Text data\n       * @property {string|null} [type] Text type\n       */\n\n      /**\n       * Constructs a new Text.\n       * @exports Text\n       * @classdesc Represents a Text.\n       * @implements IText\n       * @constructor\n       * @param {IText=} [properties] Properties to set\n       */\n      function Text(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Text data.\n       * @member {string} data\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.data = \"\";\n\n      /**\n       * Text type.\n       * @member {string} type\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.type = \"\";\n\n      /**\n       * Creates a new Text instance using the specified properties.\n       * @function create\n       * @memberof Text\n       * @static\n       * @param {IText=} [properties] Properties to set\n       * @returns {Text} Text instance\n       */\n      Text.create = function create(properties) {\n        return new Text(properties);\n      };\n\n      /**\n       * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n       * @function encode\n       * @memberof Text\n       * @static\n       * @param {IText} message Text message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Text.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.type);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Text message, length delimited. Does not implicitly {@link Text.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Text\n       * @static\n       * @param {IText} message Text message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Text.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Text message from the specified reader or buffer.\n       * @function decode\n       * @memberof Text\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Text} Text\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Text.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Text();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.data = reader.string();\n              break;\n            case 2:\n              message.type = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Text message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Text\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Text} Text\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Text.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Text message.\n       * @function verify\n       * @memberof Text\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Text.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!$util.isString(message.data)) return \"data: string expected\";\n        if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isString(message.type)) return \"type: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Text message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Text\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Text} Text\n       */\n      Text.fromObject = function fromObject(object) {\n        if (object instanceof $root.Text) return object;\n        var message = new $root.Text();\n        if (object.data != null) message.data = String(object.data);\n        if (object.type != null) message.type = String(object.type);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Text message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Text\n       * @static\n       * @param {Text} message Text\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Text.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.data = \"\";\n          object.type = \"\";\n        }\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = message.data;\n        if (message.type != null && message.hasOwnProperty(\"type\")) object.type = message.type;\n        return object;\n      };\n\n      /**\n       * Converts this Text to JSON.\n       * @function toJSON\n       * @memberof Text\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Text.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Text;\n    }();\n    $root.SystemMessage = function () {\n      /**\n       * Properties of a SystemMessage.\n       * @exports ISystemMessage\n       * @interface ISystemMessage\n       * @property {string|null} [data] SystemMessage data\n       */\n\n      /**\n       * Constructs a new SystemMessage.\n       * @exports SystemMessage\n       * @classdesc Represents a SystemMessage.\n       * @implements ISystemMessage\n       * @constructor\n       * @param {ISystemMessage=} [properties] Properties to set\n       */\n      function SystemMessage(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SystemMessage data.\n       * @member {string} data\n       * @memberof SystemMessage\n       * @instance\n       */\n      SystemMessage.prototype.data = \"\";\n\n      /**\n       * Creates a new SystemMessage instance using the specified properties.\n       * @function create\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage=} [properties] Properties to set\n       * @returns {SystemMessage} SystemMessage instance\n       */\n      SystemMessage.create = function create(properties) {\n        return new SystemMessage(properties);\n      };\n\n      /**\n       * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n       * @function encode\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage} message SystemMessage message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SystemMessage.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified SystemMessage message, length delimited. Does not implicitly {@link SystemMessage.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage} message SystemMessage message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SystemMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a SystemMessage message from the specified reader or buffer.\n       * @function decode\n       * @memberof SystemMessage\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {SystemMessage} SystemMessage\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SystemMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.SystemMessage();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.data = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a SystemMessage message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof SystemMessage\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {SystemMessage} SystemMessage\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SystemMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a SystemMessage message.\n       * @function verify\n       * @memberof SystemMessage\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      SystemMessage.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!$util.isString(message.data)) return \"data: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a SystemMessage message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof SystemMessage\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {SystemMessage} SystemMessage\n       */\n      SystemMessage.fromObject = function fromObject(object) {\n        if (object instanceof $root.SystemMessage) return object;\n        var message = new $root.SystemMessage();\n        if (object.data != null) message.data = String(object.data);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a SystemMessage message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof SystemMessage\n       * @static\n       * @param {SystemMessage} message SystemMessage\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      SystemMessage.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.data = \"\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = message.data;\n        return object;\n      };\n\n      /**\n       * Converts this SystemMessage to JSON.\n       * @function toJSON\n       * @memberof SystemMessage\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      SystemMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return SystemMessage;\n    }();\n    $root.Status = function () {\n      /**\n       * Properties of a Status.\n       * @exports IStatus\n       * @interface IStatus\n       * @property {number|null} [code] Status code\n       * @property {string|null} [description] Status description\n       * @property {string|null} [technicalDescription] Status technicalDescription\n       */\n\n      /**\n       * Constructs a new Status.\n       * @exports Status\n       * @classdesc Represents a Status.\n       * @implements IStatus\n       * @constructor\n       * @param {IStatus=} [properties] Properties to set\n       */\n      function Status(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Status code.\n       * @member {number} code\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.code = 0;\n\n      /**\n       * Status description.\n       * @member {string} description\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.description = \"\";\n\n      /**\n       * Status technicalDescription.\n       * @member {string} technicalDescription\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.technicalDescription = \"\";\n\n      /**\n       * Creates a new Status instance using the specified properties.\n       * @function create\n       * @memberof Status\n       * @static\n       * @param {IStatus=} [properties] Properties to set\n       * @returns {Status} Status instance\n       */\n      Status.create = function create(properties) {\n        return new Status(properties);\n      };\n\n      /**\n       * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n       * @function encode\n       * @memberof Status\n       * @static\n       * @param {IStatus} message Status message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Status.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.code);\n        if (message.description != null && Object.hasOwnProperty.call(message, \"description\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.description);\n        if (message.technicalDescription != null && Object.hasOwnProperty.call(message, \"technicalDescription\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.technicalDescription);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Status message, length delimited. Does not implicitly {@link Status.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Status\n       * @static\n       * @param {IStatus} message Status message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Status.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Status message from the specified reader or buffer.\n       * @function decode\n       * @memberof Status\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Status} Status\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Status.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Status();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.code = reader.int32();\n              break;\n            case 2:\n              message.description = reader.string();\n              break;\n            case 3:\n              message.technicalDescription = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Status message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Status\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Status} Status\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Status.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Status message.\n       * @function verify\n       * @memberof Status\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Status.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.code != null && message.hasOwnProperty(\"code\")) if (!$util.isInteger(message.code)) return \"code: integer expected\";\n        if (message.description != null && message.hasOwnProperty(\"description\")) if (!$util.isString(message.description)) return \"description: string expected\";\n        if (message.technicalDescription != null && message.hasOwnProperty(\"technicalDescription\")) if (!$util.isString(message.technicalDescription)) return \"technicalDescription: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Status message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Status\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Status} Status\n       */\n      Status.fromObject = function fromObject(object) {\n        if (object instanceof $root.Status) return object;\n        var message = new $root.Status();\n        if (object.code != null) message.code = object.code | 0;\n        if (object.description != null) message.description = String(object.description);\n        if (object.technicalDescription != null) message.technicalDescription = String(object.technicalDescription);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Status message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Status\n       * @static\n       * @param {Status} message Status\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Status.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.code = 0;\n          object.description = \"\";\n          object.technicalDescription = \"\";\n        }\n        if (message.code != null && message.hasOwnProperty(\"code\")) object.code = message.code;\n        if (message.description != null && message.hasOwnProperty(\"description\")) object.description = message.description;\n        if (message.technicalDescription != null && message.hasOwnProperty(\"technicalDescription\")) object.technicalDescription = message.technicalDescription;\n        return object;\n      };\n\n      /**\n       * Converts this Status to JSON.\n       * @function toJSON\n       * @memberof Status\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Status.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Status;\n    }();\n    $root.Bytes = function () {\n      /**\n       * Properties of a Bytes.\n       * @exports IBytes\n       * @interface IBytes\n       * @property {Uint8Array|null} [data] Bytes data\n       * @property {string|null} [desc] Bytes desc\n       */\n\n      /**\n       * Constructs a new Bytes.\n       * @exports Bytes\n       * @classdesc Represents a Bytes.\n       * @implements IBytes\n       * @constructor\n       * @param {IBytes=} [properties] Properties to set\n       */\n      function Bytes(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Bytes data.\n       * @member {Uint8Array} data\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Bytes desc.\n       * @member {string} desc\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.desc = \"\";\n\n      /**\n       * Creates a new Bytes instance using the specified properties.\n       * @function create\n       * @memberof Bytes\n       * @static\n       * @param {IBytes=} [properties] Properties to set\n       * @returns {Bytes} Bytes instance\n       */\n      Bytes.create = function create(properties) {\n        return new Bytes(properties);\n      };\n\n      /**\n       * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n       * @function encode\n       * @memberof Bytes\n       * @static\n       * @param {IBytes} message Bytes message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Bytes.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        if (message.desc != null && Object.hasOwnProperty.call(message, \"desc\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.desc);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Bytes message, length delimited. Does not implicitly {@link Bytes.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Bytes\n       * @static\n       * @param {IBytes} message Bytes message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Bytes.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Bytes message from the specified reader or buffer.\n       * @function decode\n       * @memberof Bytes\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Bytes} Bytes\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Bytes.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Bytes();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.data = reader.bytes();\n              break;\n            case 2:\n              message.desc = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Bytes message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Bytes\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Bytes} Bytes\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Bytes.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Bytes message.\n       * @function verify\n       * @memberof Bytes\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Bytes.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data))) return \"data: buffer expected\";\n        if (message.desc != null && message.hasOwnProperty(\"desc\")) if (!$util.isString(message.desc)) return \"desc: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Bytes message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Bytes\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Bytes} Bytes\n       */\n      Bytes.fromObject = function fromObject(object) {\n        if (object instanceof $root.Bytes) return object;\n        var message = new $root.Bytes();\n        if (object.data != null) if (typeof object.data === \"string\") $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);else if (object.data.length) message.data = object.data;\n        if (object.desc != null) message.desc = String(object.desc);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a Bytes message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Bytes\n       * @static\n       * @param {Bytes} message Bytes\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Bytes.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          if (options.bytes === String) object.data = \"\";else {\n            object.data = [];\n            if (options.bytes !== Array) object.data = $util.newBuffer(object.data);\n          }\n          object.desc = \"\";\n        }\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n        if (message.desc != null && message.hasOwnProperty(\"desc\")) object.desc = message.desc;\n        return object;\n      };\n\n      /**\n       * Converts this Bytes to JSON.\n       * @function toJSON\n       * @memberof Bytes\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Bytes.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Bytes;\n    }();\n    $root.DevContext = function () {\n      /**\n       * Properties of a DevContext.\n       * @exports IDevContext\n       * @interface IDevContext\n       * @property {string|null} [name] DevContext name\n       * @property {number|Long|null} [timestampMs] DevContext timestampMs\n       * @property {string|null} [data] DevContext data\n       */\n\n      /**\n       * Constructs a new DevContext.\n       * @exports DevContext\n       * @classdesc Represents a DevContext.\n       * @implements IDevContext\n       * @constructor\n       * @param {IDevContext=} [properties] Properties to set\n       */\n      function DevContext(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * DevContext name.\n       * @member {string} name\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.name = \"\";\n\n      /**\n       * DevContext timestampMs.\n       * @member {number|Long} timestampMs\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * DevContext data.\n       * @member {string} data\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.data = \"\";\n\n      /**\n       * Creates a new DevContext instance using the specified properties.\n       * @function create\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext=} [properties] Properties to set\n       * @returns {DevContext} DevContext instance\n       */\n      DevContext.create = function create(properties) {\n        return new DevContext(properties);\n      };\n\n      /**\n       * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n       * @function encode\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext} message DevContext message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DevContext.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n        if (message.timestampMs != null && Object.hasOwnProperty.call(message, \"timestampMs\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.timestampMs);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified DevContext message, length delimited. Does not implicitly {@link DevContext.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext} message DevContext message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DevContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a DevContext message from the specified reader or buffer.\n       * @function decode\n       * @memberof DevContext\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DevContext} DevContext\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DevContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DevContext();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.name = reader.string();\n              break;\n            case 2:\n              message.timestampMs = reader.int64();\n              break;\n            case 3:\n              message.data = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a DevContext message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof DevContext\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {DevContext} DevContext\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DevContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a DevContext message.\n       * @function verify\n       * @memberof DevContext\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      DevContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n        if (message.timestampMs != null && message.hasOwnProperty(\"timestampMs\")) if (!$util.isInteger(message.timestampMs) && !(message.timestampMs && $util.isInteger(message.timestampMs.low) && $util.isInteger(message.timestampMs.high))) return \"timestampMs: integer|Long expected\";\n        if (message.data != null && message.hasOwnProperty(\"data\")) if (!$util.isString(message.data)) return \"data: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates a DevContext message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof DevContext\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {DevContext} DevContext\n       */\n      DevContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.DevContext) return object;\n        var message = new $root.DevContext();\n        if (object.name != null) message.name = String(object.name);\n        if (object.timestampMs != null) if ($util.Long) (message.timestampMs = $util.Long.fromValue(object.timestampMs)).unsigned = false;else if (typeof object.timestampMs === \"string\") message.timestampMs = parseInt(object.timestampMs, 10);else if (typeof object.timestampMs === \"number\") message.timestampMs = object.timestampMs;else if (typeof object.timestampMs === \"object\") message.timestampMs = new $util.LongBits(object.timestampMs.low >>> 0, object.timestampMs.high >>> 0).toNumber();\n        if (object.data != null) message.data = String(object.data);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a DevContext message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof DevContext\n       * @static\n       * @param {DevContext} message DevContext\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      DevContext.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.name = \"\";\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.timestampMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.timestampMs = options.longs === String ? \"0\" : 0;\n          object.data = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n        if (message.timestampMs != null && message.hasOwnProperty(\"timestampMs\")) if (typeof message.timestampMs === \"number\") object.timestampMs = options.longs === String ? String(message.timestampMs) : message.timestampMs;else object.timestampMs = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMs) : options.longs === Number ? new $util.LongBits(message.timestampMs.low >>> 0, message.timestampMs.high >>> 0).toNumber() : message.timestampMs;\n        if (message.data != null && message.hasOwnProperty(\"data\")) object.data = message.data;\n        return object;\n      };\n\n      /**\n       * Converts this DevContext to JSON.\n       * @function toJSON\n       * @memberof DevContext\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      DevContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return DevContext;\n    }();\n    $root.Cancel = function () {\n      /**\n       * Properties of a Cancel.\n       * @exports ICancel\n       * @interface ICancel\n       */\n\n      /**\n       * Constructs a new Cancel.\n       * @exports Cancel\n       * @classdesc Represents a Cancel.\n       * @implements ICancel\n       * @constructor\n       * @param {ICancel=} [properties] Properties to set\n       */\n      function Cancel(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new Cancel instance using the specified properties.\n       * @function create\n       * @memberof Cancel\n       * @static\n       * @param {ICancel=} [properties] Properties to set\n       * @returns {Cancel} Cancel instance\n       */\n      Cancel.create = function create(properties) {\n        return new Cancel(properties);\n      };\n\n      /**\n       * Encodes the specified Cancel message. Does not implicitly {@link Cancel.verify|verify} messages.\n       * @function encode\n       * @memberof Cancel\n       * @static\n       * @param {ICancel} message Cancel message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Cancel.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified Cancel message, length delimited. Does not implicitly {@link Cancel.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Cancel\n       * @static\n       * @param {ICancel} message Cancel message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Cancel.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a Cancel message from the specified reader or buffer.\n       * @function decode\n       * @memberof Cancel\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Cancel} Cancel\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Cancel.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Cancel();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a Cancel message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Cancel\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Cancel} Cancel\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Cancel.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a Cancel message.\n       * @function verify\n       * @memberof Cancel\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      Cancel.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        return null;\n      };\n\n      /**\n       * Creates a Cancel message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Cancel\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Cancel} Cancel\n       */\n      Cancel.fromObject = function fromObject(object) {\n        if (object instanceof $root.Cancel) return object;\n        return new $root.Cancel();\n      };\n\n      /**\n       * Creates a plain object from a Cancel message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Cancel\n       * @static\n       * @param {Cancel} message Cancel\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Cancel.toObject = function toObject() {\n        return {};\n      };\n\n      /**\n       * Converts this Cancel to JSON.\n       * @function toJSON\n       * @memberof Cancel\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Cancel.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Cancel;\n    }();\n    return $root;\n  });\n});\nvar VpsVersion;\n(function (VpsVersion) {\n  VpsVersion[VpsVersion[\"1.0\"] = 1] = \"1.0\";\n  VpsVersion[VpsVersion[\"2.0\"] = 2] = \"2.0\";\n  VpsVersion[VpsVersion[\"3.0\"] = 3] = \"3.0\";\n  VpsVersion[VpsVersion[\"4.0\"] = 4] = \"4.0\";\n  VpsVersion[VpsVersion[\"5.0\"] = 5] = \"5.0\";\n})(VpsVersion || (VpsVersion = {}));\nvar MessageNames = {\n  ANSWER_TO_USER: 'ANSWER_TO_USER',\n  STT: 'STT',\n  MUSIC_RECOGNITION: 'MUSIC_RECOGNITION',\n  DO_NOTHING: 'DO_NOTHING'\n};\nexport { MessageNames as M, VpsVersion as V, __spreadArrays as _, __rest as a, __assign as b, createNanoEvents as c, __awaiter as d, __generator as e, createCommonjsModule as f, commonjsGlobal as g, commonjsRequire as h, minimal$1 as m, proto as p };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","Array","k","a","j","jl","createNanoEvents","events","emit","event","args","_i","_a","_b","listener","on","cb","filter","once","off","clear","commonjsGlobal","globalThis","window","global","self","createCommonjsModule","fn","basedir","module","path","exports","require","base","commonjsRequire","undefined","Error","aspromise","asPromise","ctx","params","offset","index","pending","executor","callback","err","base64_1","base64","string","charAt","Math","ceil","b64","s64","encode","buffer","start","end","parts","chunk","b","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","test","eventemitter","EventEmitter","_listeners","evt","listeners","splice","float_1","factory","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","writeFloatLE","writeFloatBE","readFloat_f32_cpy","readFloat_f32_rev","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","mantissa","pow","bind","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","NaN","Infinity","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDouble_f64_cpy","readDouble_f64_rev","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire_1","inquire","moduleName","mod","eval","replace","keys","utf8_1","utf8","utf8_length","len","read","utf8_read","write","utf8_write","c1","c2","pool_1","pool","alloc","size","SIZE","MAX","slab","pool_alloc","longbits","LongBits","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","from","minimal","isString","Long","fromString","parseInt","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","util","float","isNode","process","versions","node","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","merge","dst","src","ifNotSet","lcFirst","str","toLowerCase","substring","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","create","constructor","toString","ProtocolError","oneOfGetter","getOneOf","fieldNames","fieldMap","oneOfSetter","setOneOf","toJSONOptions","longs","enums","bytes","json","_configure","Buffer_from","encoding","allocUnsafe","Buffer_allocUnsafe","writer","Writer","BufferWriter","LongBits$1","Op","noop","State","head","tail","states","create_buffer_setup","create_buffer","create_array","subarray","_push","writeByte","writeVarint32","VarintOp","uint32","write_uint32","int32","write_int32","writeVarint64","sint32","write_sint32","uint64","write_uint64","int64","sint64","write_sint64","bool","write_bool","writeFixed32","fixed32","write_fixed32","sfixed32","fixed64","write_fixed64","sfixed64","write_float","double","write_double","writeBytes","set","writeBytes_set","writeBytes_for","write_bytes","write_string","fork","reset","ldelim","finish","BufferWriter_","writer_buffer","BufferWriter$1","writeBytesBuffer","writeBytesBuffer_set","writeBytesBuffer_copy","copy","write_bytes_buffer","writeStringBuffer","write_string_buffer","byteLength","reader","Reader","BufferReader","LongBits$2","utf8$1","indexOutOfRange","writeLength","RangeError","create_typed_array","create$1","isBuffer","_slice","read_uint32_setup","read_uint32","read_int32","read_sint32","readLongVarint","read_bool","readFixed32_end","read_fixed32","read_sfixed32","readFixed64","read_float","read_double","read_bytes","read_string","skip","skipType","wireType","BufferReader_","read_int64","read_uint64","read_sint64","read_fixed64","read_sfixed64","reader_buffer","BufferReader$1","read_string_buffer","utf8Slice","min","service","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","setTimeout","rpcCallback","response","endedByRPC","rpc_1","rpc","roots","indexMinimal","protobuf","build","configure","minimal$1","proto","$protobuf","$Reader","$Writer","$util","$root","Message","devContext","meta","userId","messageId","last","token","userChannel","vpsToken","messageName","version","voice","text","systemMessage","legacyDevice","settings","status","device","initialSettings","cancel","timestamp","$oneOfFields","Voice","Text","SystemMessage","LegacyDevice","Settings","Status","DevContext","Device","Bytes","InitialSettings","Cancel","encodeDelimited","key","tag","end2","tag2","decodeDelimited","verify","error","content","fromObject","object","fromValue","toObject","options","arrays","defaults","objects","long","oneofs","keys2","toJSON","locale","platformType","platformVersion","surface","surfaceVersion","features","capabilities","deviceId","deviceManufacturer","deviceModel","additionalInfo","tenant","dubbing","echo","ttsEngine","asrEngine","asrAutoStop","devMode","authConnector","clientType","channel","channelVersion","platformName","sdkVersion","protocolVersion","data","type","code","description","technicalDescription","desc","timestampMs","VpsVersion","MessageNames","ANSWER_TO_USER","STT","MUSIC_RECOGNITION","DO_NOTHING","M","V","d","h","m"],"sources":["C:/Users/khalo/Desktop/Pomodoro_CanvasApp/node_modules/@sberdevices/assistant-client/esm/typings-4aa98dc6.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\nvar createNanoEvents = function () {\n    var events = {};\n    var emit = function (event) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        for (var _a = 0, _b = events[event] || []; _a < _b.length; _a++) {\n            var listener = _b[_a];\n            listener.apply(void 0, args);\n        }\n    };\n    var on = function (event, cb) {\n        (events[event] = events[event] || []).push(cb);\n        return function () {\n            events[event] = events[event].filter(function (i) { return i !== cb; });\n        };\n    };\n    var once = function (event, cb) {\n        // eslint-disable-next-line\n        // @ts-ignore И вот тут я сдался\n        var off = on(event, function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            cb.apply(void 0, args);\n            off();\n        });\n        return off;\n    };\n    var clear = function () {\n        events = {};\n    };\n    return {\n        events: events,\n        emit: emit,\n        on: on,\n        once: once,\n        clear: clear,\n    };\n};\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar aspromise = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\n\nvar base64_1 = createCommonjsModule(function (module, exports) {\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\n});\n\nvar eventemitter = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\n\nvar float_1 = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\n\nvar inquire_1 = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\n\nvar utf8_1 = createCommonjsModule(function (module, exports) {\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\n});\n\nvar pool_1 = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\n\nvar longbits = LongBits;\n\n\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (minimal.isString(value)) {\n        /* istanbul ignore else */\n        if (minimal.Long)\n            value = minimal.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return minimal.Long\n        ? new minimal.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\nvar minimal = createCommonjsModule(function (module, exports) {\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = aspromise;\n\n// converts to / from base64 encoded strings\nutil.base64 = base64_1;\n\n// base class of rpc.Service\nutil.EventEmitter = eventemitter;\n\n// float handling accross browsers\nutil.float = float_1;\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = inquire_1;\n\n// converts to / from utf8 encoded strings\nutil.utf8 = utf8_1;\n\n// provides a node-like buffer pool in the browser\nutil.pool = pool_1;\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = longbits;\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof commonjsGlobal !== \"undefined\"\n                   && commonjsGlobal\n                   && commonjsGlobal.process\n                   && commonjsGlobal.process.versions\n                   && commonjsGlobal.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && commonjsGlobal\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n});\n\nvar writer = Writer;\n\n\n\nvar BufferWriter; // cyclic\n\nvar LongBits$1  = minimal.LongBits,\n    base64    = minimal.base64,\n    utf8      = minimal.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return minimal.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new minimal.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (minimal.Array !== Array)\n    Writer.alloc = minimal.pool(Writer.alloc, minimal.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits$1.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits$1.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits$1.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(minimal.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(minimal.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = minimal.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (minimal.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\nvar writer_buffer = BufferWriter$1;\n\n// extends Writer\n\n(BufferWriter$1.prototype = Object.create(writer.prototype)).constructor = BufferWriter$1;\n\n\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter$1() {\n    writer.call(this);\n}\n\nBufferWriter$1._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter$1.alloc = minimal._Buffer_allocUnsafe;\n\n    BufferWriter$1.writeBytesBuffer = minimal.Buffer && minimal.Buffer.prototype instanceof Uint8Array && minimal.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter$1.prototype.bytes = function write_bytes_buffer(value) {\n    if (minimal.isString(value))\n        value = minimal._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter$1.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        minimal.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter$1.prototype.string = function write_string_buffer(value) {\n    var len = minimal.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter$1._configure();\n\nvar reader = Reader;\n\n\n\nvar BufferReader; // cyclic\n\nvar LongBits$2  = minimal.LongBits,\n    utf8$1      = minimal.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create$1 = function create() {\n    return minimal.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return minimal.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create$1();\n\nReader.prototype._slice = minimal.Array.prototype.subarray || /* istanbul ignore next */ minimal.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits$2(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits$2(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = minimal.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = minimal.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8$1.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create$1();\n    BufferReader._configure();\n\n    var fn = minimal.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    minimal.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\nvar reader_buffer = BufferReader$1;\n\n// extends Reader\n\n(BufferReader$1.prototype = Object.create(reader.prototype)).constructor = BufferReader$1;\n\n\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader$1(buffer) {\n    reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader$1._configure = function () {\n    /* istanbul ignore else */\n    if (minimal.Buffer)\n        BufferReader$1.prototype._slice = minimal.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader$1.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader$1._configure();\n\nvar service = Service;\n\n\n\n// Extends EventEmitter\n(Service.prototype = Object.create(minimal.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    minimal.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return minimal.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\nvar rpc_1 = createCommonjsModule(function (module, exports) {\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = service;\n});\n\nvar roots = {};\n\nvar indexMinimal = createCommonjsModule(function (module, exports) {\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = writer;\nprotobuf.BufferWriter = writer_buffer;\nprotobuf.Reader       = reader;\nprotobuf.BufferReader = reader_buffer;\n\n// Utility\nprotobuf.util         = minimal;\nprotobuf.rpc          = rpc_1;\nprotobuf.roots        = roots;\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n});\n\nvar minimal$1 = indexMinimal;\n\nvar proto = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal$1);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Message = (function() {\n    \n        /**\n         * Properties of a Message.\n         * @exports IMessage\n         * @interface IMessage\n         * @property {string|null} [userId] Message userId\n         * @property {number|Long|null} [messageId] Message messageId\n         * @property {number|null} [last] Message last\n         * @property {string|null} [token] Message token\n         * @property {string|null} [userChannel] Message userChannel\n         * @property {string|null} [vpsToken] Message vpsToken\n         * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n         * @property {string|null} [messageName] Message messageName\n         * @property {number|null} [version] Message version\n         * @property {IVoice|null} [voice] Message voice\n         * @property {IText|null} [text] Message text\n         * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n         * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n         * @property {ISettings|null} [settings] Message settings\n         * @property {IStatus|null} [status] Message status\n         * @property {IDevice|null} [device] Message device\n         * @property {IBytes|null} [bytes] Message bytes\n         * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n         * @property {ICancel|null} [cancel] Message cancel\n         * @property {number|Long|null} [timestamp] Message timestamp\n         * @property {Object.<string,string>|null} [meta] Message meta\n         */\n    \n        /**\n         * Constructs a new Message.\n         * @exports Message\n         * @classdesc Represents a Message.\n         * @implements IMessage\n         * @constructor\n         * @param {IMessage=} [properties] Properties to set\n         */\n        function Message(properties) {\n            this.devContext = [];\n            this.meta = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Message userId.\n         * @member {string} userId\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.userId = \"\";\n    \n        /**\n         * Message messageId.\n         * @member {number|Long} messageId\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n    \n        /**\n         * Message last.\n         * @member {number} last\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.last = 0;\n    \n        /**\n         * Message token.\n         * @member {string} token\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.token = \"\";\n    \n        /**\n         * Message userChannel.\n         * @member {string} userChannel\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.userChannel = \"\";\n    \n        /**\n         * Message vpsToken.\n         * @member {string} vpsToken\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.vpsToken = \"\";\n    \n        /**\n         * Устарело с версии 3.\n         * @member {Array.<IDevContext>} devContext\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.devContext = $util.emptyArray;\n    \n        /**\n         * Message messageName.\n         * @member {string} messageName\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.messageName = \"\";\n    \n        /**\n         * Message version.\n         * @member {number} version\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.version = 0;\n    \n        /**\n         * Message voice.\n         * @member {IVoice|null|undefined} voice\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.voice = null;\n    \n        /**\n         * Message text.\n         * @member {IText|null|undefined} text\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.text = null;\n    \n        /**\n         * Message systemMessage.\n         * @member {ISystemMessage|null|undefined} systemMessage\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.systemMessage = null;\n    \n        /**\n         * Message legacyDevice.\n         * @member {ILegacyDevice|null|undefined} legacyDevice\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.legacyDevice = null;\n    \n        /**\n         * Message settings.\n         * @member {ISettings|null|undefined} settings\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.settings = null;\n    \n        /**\n         * Message status.\n         * @member {IStatus|null|undefined} status\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.status = null;\n    \n        /**\n         * Message device.\n         * @member {IDevice|null|undefined} device\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.device = null;\n    \n        /**\n         * Message bytes.\n         * @member {IBytes|null|undefined} bytes\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.bytes = null;\n    \n        /**\n         * Message initialSettings.\n         * @member {IInitialSettings|null|undefined} initialSettings\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.initialSettings = null;\n    \n        /**\n         * Message cancel.\n         * @member {ICancel|null|undefined} cancel\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.cancel = null;\n    \n        /**\n         * Message timestamp.\n         * @member {number|Long} timestamp\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n    \n        /**\n         * Message meta.\n         * @member {Object.<string,string>} meta\n         * @memberof Message\n         * @instance\n         */\n        Message.prototype.meta = $util.emptyObject;\n    \n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n    \n        /**\n         * Message content.\n         * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|\"cancel\"|undefined} content\n         * @memberof Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"content\", {\n            get: $util.oneOfGetter($oneOfFields = [\"voice\", \"text\", \"systemMessage\", \"legacyDevice\", \"settings\", \"status\", \"device\", \"bytes\", \"initialSettings\", \"cancel\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n    \n        /**\n         * Creates a new Message instance using the specified properties.\n         * @function create\n         * @memberof Message\n         * @static\n         * @param {IMessage=} [properties] Properties to set\n         * @returns {Message} Message instance\n         */\n        Message.create = function create(properties) {\n            return new Message(properties);\n        };\n    \n        /**\n         * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n         * @function encode\n         * @memberof Message\n         * @static\n         * @param {IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.messageId != null && Object.hasOwnProperty.call(message, \"messageId\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.messageId);\n            if (message.last != null && Object.hasOwnProperty.call(message, \"last\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.last);\n            if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.token);\n            if (message.voice != null && Object.hasOwnProperty.call(message, \"voice\"))\n                $root.Voice.encode(message.voice, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n                $root.Text.encode(message.text, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.systemMessage != null && Object.hasOwnProperty.call(message, \"systemMessage\"))\n                $root.SystemMessage.encode(message.systemMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.legacyDevice != null && Object.hasOwnProperty.call(message, \"legacyDevice\"))\n                $root.LegacyDevice.encode(message.legacyDevice, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\"))\n                $root.Settings.encode(message.settings, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                $root.Status.encode(message.status, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\"))\n                writer.uint32(/* id 11, wireType 2 =*/90).string(message.userChannel);\n            if (message.vpsToken != null && Object.hasOwnProperty.call(message, \"vpsToken\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.vpsToken);\n            if (message.devContext != null && message.devContext.length)\n                for (var i = 0; i < message.devContext.length; ++i)\n                    $root.DevContext.encode(message.devContext[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.messageName != null && Object.hasOwnProperty.call(message, \"messageName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.messageName);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.version);\n            if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n                $root.Device.encode(message.device, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n            if (message.bytes != null && Object.hasOwnProperty.call(message, \"bytes\"))\n                $root.Bytes.encode(message.bytes, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            if (message.initialSettings != null && Object.hasOwnProperty.call(message, \"initialSettings\"))\n                $root.InitialSettings.encode(message.initialSettings, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n                writer.uint32(/* id 19, wireType 0 =*/152).int64(message.timestamp);\n            if (message.meta != null && Object.hasOwnProperty.call(message, \"meta\"))\n                for (var keys = Object.keys(message.meta), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 20, wireType 2 =*/162).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.meta[keys[i]]).ldelim();\n            if (message.cancel != null && Object.hasOwnProperty.call(message, \"cancel\"))\n                $root.Cancel.encode(message.cancel, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Message\n         * @static\n         * @param {IMessage} message Message message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Message(), key, value;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.userId = reader.string();\n                    break;\n                case 2:\n                    message.messageId = reader.int64();\n                    break;\n                case 3:\n                    message.last = reader.int32();\n                    break;\n                case 4:\n                    message.token = reader.string();\n                    break;\n                case 11:\n                    message.userChannel = reader.string();\n                    break;\n                case 12:\n                    message.vpsToken = reader.string();\n                    break;\n                case 13:\n                    if (!(message.devContext && message.devContext.length))\n                        message.devContext = [];\n                    message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.messageName = reader.string();\n                    break;\n                case 15:\n                    message.version = reader.int32();\n                    break;\n                case 5:\n                    message.voice = $root.Voice.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.text = $root.Text.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.settings = $root.Settings.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.status = $root.Status.decode(reader, reader.uint32());\n                    break;\n                case 16:\n                    message.device = $root.Device.decode(reader, reader.uint32());\n                    break;\n                case 17:\n                    message.bytes = $root.Bytes.decode(reader, reader.uint32());\n                    break;\n                case 18:\n                    message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n                    break;\n                case 21:\n                    message.cancel = $root.Cancel.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.timestamp = reader.int64();\n                    break;\n                case 20:\n                    if (message.meta === $util.emptyObject)\n                        message.meta = {};\n                    var end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = \"\";\n                    while (reader.pos < end2) {\n                        var tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.string();\n                            break;\n                        case 2:\n                            value = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.meta[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Message message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Message message.\n         * @function verify\n         * @memberof Message\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Message.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.messageId != null && message.hasOwnProperty(\"messageId\"))\n                if (!$util.isInteger(message.messageId) && !(message.messageId && $util.isInteger(message.messageId.low) && $util.isInteger(message.messageId.high)))\n                    return \"messageId: integer|Long expected\";\n            if (message.last != null && message.hasOwnProperty(\"last\"))\n                if (!$util.isInteger(message.last))\n                    return \"last: integer expected\";\n            if (message.token != null && message.hasOwnProperty(\"token\"))\n                if (!$util.isString(message.token))\n                    return \"token: string expected\";\n            if (message.userChannel != null && message.hasOwnProperty(\"userChannel\"))\n                if (!$util.isString(message.userChannel))\n                    return \"userChannel: string expected\";\n            if (message.vpsToken != null && message.hasOwnProperty(\"vpsToken\"))\n                if (!$util.isString(message.vpsToken))\n                    return \"vpsToken: string expected\";\n            if (message.devContext != null && message.hasOwnProperty(\"devContext\")) {\n                if (!Array.isArray(message.devContext))\n                    return \"devContext: array expected\";\n                for (var i = 0; i < message.devContext.length; ++i) {\n                    var error = $root.DevContext.verify(message.devContext[i]);\n                    if (error)\n                        return \"devContext.\" + error;\n                }\n            }\n            if (message.messageName != null && message.hasOwnProperty(\"messageName\"))\n                if (!$util.isString(message.messageName))\n                    return \"messageName: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version))\n                    return \"version: integer expected\";\n            if (message.voice != null && message.hasOwnProperty(\"voice\")) {\n                properties.content = 1;\n                {\n                    var error = $root.Voice.verify(message.voice);\n                    if (error)\n                        return \"voice.\" + error;\n                }\n            }\n            if (message.text != null && message.hasOwnProperty(\"text\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Text.verify(message.text);\n                    if (error)\n                        return \"text.\" + error;\n                }\n            }\n            if (message.systemMessage != null && message.hasOwnProperty(\"systemMessage\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.SystemMessage.verify(message.systemMessage);\n                    if (error)\n                        return \"systemMessage.\" + error;\n                }\n            }\n            if (message.legacyDevice != null && message.hasOwnProperty(\"legacyDevice\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.LegacyDevice.verify(message.legacyDevice);\n                    if (error)\n                        return \"legacyDevice.\" + error;\n                }\n            }\n            if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Settings.verify(message.settings);\n                    if (error)\n                        return \"settings.\" + error;\n                }\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Status.verify(message.status);\n                    if (error)\n                        return \"status.\" + error;\n                }\n            }\n            if (message.device != null && message.hasOwnProperty(\"device\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Device.verify(message.device);\n                    if (error)\n                        return \"device.\" + error;\n                }\n            }\n            if (message.bytes != null && message.hasOwnProperty(\"bytes\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Bytes.verify(message.bytes);\n                    if (error)\n                        return \"bytes.\" + error;\n                }\n            }\n            if (message.initialSettings != null && message.hasOwnProperty(\"initialSettings\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.InitialSettings.verify(message.initialSettings);\n                    if (error)\n                        return \"initialSettings.\" + error;\n                }\n            }\n            if (message.cancel != null && message.hasOwnProperty(\"cancel\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.Cancel.verify(message.cancel);\n                    if (error)\n                        return \"cancel.\" + error;\n                }\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.meta != null && message.hasOwnProperty(\"meta\")) {\n                if (!$util.isObject(message.meta))\n                    return \"meta: object expected\";\n                var key = Object.keys(message.meta);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.meta[key[i]]))\n                        return \"meta: string{k:string} expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Message} Message\n         */\n        Message.fromObject = function fromObject(object) {\n            if (object instanceof $root.Message)\n                return object;\n            var message = new $root.Message();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.messageId != null)\n                if ($util.Long)\n                    (message.messageId = $util.Long.fromValue(object.messageId)).unsigned = false;\n                else if (typeof object.messageId === \"string\")\n                    message.messageId = parseInt(object.messageId, 10);\n                else if (typeof object.messageId === \"number\")\n                    message.messageId = object.messageId;\n                else if (typeof object.messageId === \"object\")\n                    message.messageId = new $util.LongBits(object.messageId.low >>> 0, object.messageId.high >>> 0).toNumber();\n            if (object.last != null)\n                message.last = object.last | 0;\n            if (object.token != null)\n                message.token = String(object.token);\n            if (object.userChannel != null)\n                message.userChannel = String(object.userChannel);\n            if (object.vpsToken != null)\n                message.vpsToken = String(object.vpsToken);\n            if (object.devContext) {\n                if (!Array.isArray(object.devContext))\n                    throw TypeError(\".Message.devContext: array expected\");\n                message.devContext = [];\n                for (var i = 0; i < object.devContext.length; ++i) {\n                    if (typeof object.devContext[i] !== \"object\")\n                        throw TypeError(\".Message.devContext: object expected\");\n                    message.devContext[i] = $root.DevContext.fromObject(object.devContext[i]);\n                }\n            }\n            if (object.messageName != null)\n                message.messageName = String(object.messageName);\n            if (object.version != null)\n                message.version = object.version | 0;\n            if (object.voice != null) {\n                if (typeof object.voice !== \"object\")\n                    throw TypeError(\".Message.voice: object expected\");\n                message.voice = $root.Voice.fromObject(object.voice);\n            }\n            if (object.text != null) {\n                if (typeof object.text !== \"object\")\n                    throw TypeError(\".Message.text: object expected\");\n                message.text = $root.Text.fromObject(object.text);\n            }\n            if (object.systemMessage != null) {\n                if (typeof object.systemMessage !== \"object\")\n                    throw TypeError(\".Message.systemMessage: object expected\");\n                message.systemMessage = $root.SystemMessage.fromObject(object.systemMessage);\n            }\n            if (object.legacyDevice != null) {\n                if (typeof object.legacyDevice !== \"object\")\n                    throw TypeError(\".Message.legacyDevice: object expected\");\n                message.legacyDevice = $root.LegacyDevice.fromObject(object.legacyDevice);\n            }\n            if (object.settings != null) {\n                if (typeof object.settings !== \"object\")\n                    throw TypeError(\".Message.settings: object expected\");\n                message.settings = $root.Settings.fromObject(object.settings);\n            }\n            if (object.status != null) {\n                if (typeof object.status !== \"object\")\n                    throw TypeError(\".Message.status: object expected\");\n                message.status = $root.Status.fromObject(object.status);\n            }\n            if (object.device != null) {\n                if (typeof object.device !== \"object\")\n                    throw TypeError(\".Message.device: object expected\");\n                message.device = $root.Device.fromObject(object.device);\n            }\n            if (object.bytes != null) {\n                if (typeof object.bytes !== \"object\")\n                    throw TypeError(\".Message.bytes: object expected\");\n                message.bytes = $root.Bytes.fromObject(object.bytes);\n            }\n            if (object.initialSettings != null) {\n                if (typeof object.initialSettings !== \"object\")\n                    throw TypeError(\".Message.initialSettings: object expected\");\n                message.initialSettings = $root.InitialSettings.fromObject(object.initialSettings);\n            }\n            if (object.cancel != null) {\n                if (typeof object.cancel !== \"object\")\n                    throw TypeError(\".Message.cancel: object expected\");\n                message.cancel = $root.Cancel.fromObject(object.cancel);\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.meta) {\n                if (typeof object.meta !== \"object\")\n                    throw TypeError(\".Message.meta: object expected\");\n                message.meta = {};\n                for (var keys = Object.keys(object.meta), i = 0; i < keys.length; ++i)\n                    message.meta[keys[i]] = String(object.meta[keys[i]]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message\n         * @static\n         * @param {Message} message Message\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Message.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.devContext = [];\n            if (options.objects || options.defaults)\n                object.meta = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.messageId = options.longs === String ? \"0\" : 0;\n                object.last = 0;\n                object.token = \"\";\n                object.userChannel = \"\";\n                object.vpsToken = \"\";\n                object.messageName = \"\";\n                object.version = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.messageId != null && message.hasOwnProperty(\"messageId\"))\n                if (typeof message.messageId === \"number\")\n                    object.messageId = options.longs === String ? String(message.messageId) : message.messageId;\n                else\n                    object.messageId = options.longs === String ? $util.Long.prototype.toString.call(message.messageId) : options.longs === Number ? new $util.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0).toNumber() : message.messageId;\n            if (message.last != null && message.hasOwnProperty(\"last\"))\n                object.last = message.last;\n            if (message.token != null && message.hasOwnProperty(\"token\"))\n                object.token = message.token;\n            if (message.voice != null && message.hasOwnProperty(\"voice\")) {\n                object.voice = $root.Voice.toObject(message.voice, options);\n                if (options.oneofs)\n                    object.content = \"voice\";\n            }\n            if (message.text != null && message.hasOwnProperty(\"text\")) {\n                object.text = $root.Text.toObject(message.text, options);\n                if (options.oneofs)\n                    object.content = \"text\";\n            }\n            if (message.systemMessage != null && message.hasOwnProperty(\"systemMessage\")) {\n                object.systemMessage = $root.SystemMessage.toObject(message.systemMessage, options);\n                if (options.oneofs)\n                    object.content = \"systemMessage\";\n            }\n            if (message.legacyDevice != null && message.hasOwnProperty(\"legacyDevice\")) {\n                object.legacyDevice = $root.LegacyDevice.toObject(message.legacyDevice, options);\n                if (options.oneofs)\n                    object.content = \"legacyDevice\";\n            }\n            if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n                object.settings = $root.Settings.toObject(message.settings, options);\n                if (options.oneofs)\n                    object.content = \"settings\";\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\")) {\n                object.status = $root.Status.toObject(message.status, options);\n                if (options.oneofs)\n                    object.content = \"status\";\n            }\n            if (message.userChannel != null && message.hasOwnProperty(\"userChannel\"))\n                object.userChannel = message.userChannel;\n            if (message.vpsToken != null && message.hasOwnProperty(\"vpsToken\"))\n                object.vpsToken = message.vpsToken;\n            if (message.devContext && message.devContext.length) {\n                object.devContext = [];\n                for (var j = 0; j < message.devContext.length; ++j)\n                    object.devContext[j] = $root.DevContext.toObject(message.devContext[j], options);\n            }\n            if (message.messageName != null && message.hasOwnProperty(\"messageName\"))\n                object.messageName = message.messageName;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.device != null && message.hasOwnProperty(\"device\")) {\n                object.device = $root.Device.toObject(message.device, options);\n                if (options.oneofs)\n                    object.content = \"device\";\n            }\n            if (message.bytes != null && message.hasOwnProperty(\"bytes\")) {\n                object.bytes = $root.Bytes.toObject(message.bytes, options);\n                if (options.oneofs)\n                    object.content = \"bytes\";\n            }\n            if (message.initialSettings != null && message.hasOwnProperty(\"initialSettings\")) {\n                object.initialSettings = $root.InitialSettings.toObject(message.initialSettings, options);\n                if (options.oneofs)\n                    object.content = \"initialSettings\";\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            var keys2;\n            if (message.meta && (keys2 = Object.keys(message.meta)).length) {\n                object.meta = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.meta[keys2[j]] = message.meta[keys2[j]];\n            }\n            if (message.cancel != null && message.hasOwnProperty(\"cancel\")) {\n                object.cancel = $root.Cancel.toObject(message.cancel, options);\n                if (options.oneofs)\n                    object.content = \"cancel\";\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this Message to JSON.\n         * @function toJSON\n         * @memberof Message\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Message.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Message;\n    })();\n    \n    $root.InitialSettings = (function() {\n    \n        /**\n         * Properties of an InitialSettings.\n         * @exports IInitialSettings\n         * @interface IInitialSettings\n         * @property {string|null} [userId] InitialSettings userId\n         * @property {string|null} [userChannel] InitialSettings userChannel\n         * @property {IDevice|null} [device] InitialSettings device\n         * @property {ISettings|null} [settings] InitialSettings settings\n         * @property {string|null} [locale] InitialSettings locale\n         */\n    \n        /**\n         * Constructs a new InitialSettings.\n         * @exports InitialSettings\n         * @classdesc Represents an InitialSettings.\n         * @implements IInitialSettings\n         * @constructor\n         * @param {IInitialSettings=} [properties] Properties to set\n         */\n        function InitialSettings(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * InitialSettings userId.\n         * @member {string} userId\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.userId = \"\";\n    \n        /**\n         * InitialSettings userChannel.\n         * @member {string} userChannel\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.userChannel = \"\";\n    \n        /**\n         * InitialSettings device.\n         * @member {IDevice|null|undefined} device\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.device = null;\n    \n        /**\n         * InitialSettings settings.\n         * @member {ISettings|null|undefined} settings\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.settings = null;\n    \n        /**\n         * InitialSettings locale.\n         * @member {string} locale\n         * @memberof InitialSettings\n         * @instance\n         */\n        InitialSettings.prototype.locale = \"\";\n    \n        /**\n         * Creates a new InitialSettings instance using the specified properties.\n         * @function create\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings=} [properties] Properties to set\n         * @returns {InitialSettings} InitialSettings instance\n         */\n        InitialSettings.create = function create(properties) {\n            return new InitialSettings(properties);\n        };\n    \n        /**\n         * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n         * @function encode\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings} message InitialSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InitialSettings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userChannel);\n            if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n                $root.Device.encode(message.device, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\"))\n                $root.Settings.encode(message.settings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.locale != null && Object.hasOwnProperty.call(message, \"locale\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locale);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified InitialSettings message, length delimited. Does not implicitly {@link InitialSettings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof InitialSettings\n         * @static\n         * @param {IInitialSettings} message InitialSettings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InitialSettings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an InitialSettings message from the specified reader or buffer.\n         * @function decode\n         * @memberof InitialSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {InitialSettings} InitialSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InitialSettings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InitialSettings();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.userId = reader.string();\n                    break;\n                case 2:\n                    message.userChannel = reader.string();\n                    break;\n                case 3:\n                    message.device = $root.Device.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.settings = $root.Settings.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.locale = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an InitialSettings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof InitialSettings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {InitialSettings} InitialSettings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InitialSettings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an InitialSettings message.\n         * @function verify\n         * @memberof InitialSettings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InitialSettings.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.userChannel != null && message.hasOwnProperty(\"userChannel\"))\n                if (!$util.isString(message.userChannel))\n                    return \"userChannel: string expected\";\n            if (message.device != null && message.hasOwnProperty(\"device\")) {\n                var error = $root.Device.verify(message.device);\n                if (error)\n                    return \"device.\" + error;\n            }\n            if (message.settings != null && message.hasOwnProperty(\"settings\")) {\n                var error = $root.Settings.verify(message.settings);\n                if (error)\n                    return \"settings.\" + error;\n            }\n            if (message.locale != null && message.hasOwnProperty(\"locale\"))\n                if (!$util.isString(message.locale))\n                    return \"locale: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an InitialSettings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof InitialSettings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {InitialSettings} InitialSettings\n         */\n        InitialSettings.fromObject = function fromObject(object) {\n            if (object instanceof $root.InitialSettings)\n                return object;\n            var message = new $root.InitialSettings();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.userChannel != null)\n                message.userChannel = String(object.userChannel);\n            if (object.device != null) {\n                if (typeof object.device !== \"object\")\n                    throw TypeError(\".InitialSettings.device: object expected\");\n                message.device = $root.Device.fromObject(object.device);\n            }\n            if (object.settings != null) {\n                if (typeof object.settings !== \"object\")\n                    throw TypeError(\".InitialSettings.settings: object expected\");\n                message.settings = $root.Settings.fromObject(object.settings);\n            }\n            if (object.locale != null)\n                message.locale = String(object.locale);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an InitialSettings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof InitialSettings\n         * @static\n         * @param {InitialSettings} message InitialSettings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InitialSettings.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.userChannel = \"\";\n                object.device = null;\n                object.settings = null;\n                object.locale = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.userChannel != null && message.hasOwnProperty(\"userChannel\"))\n                object.userChannel = message.userChannel;\n            if (message.device != null && message.hasOwnProperty(\"device\"))\n                object.device = $root.Device.toObject(message.device, options);\n            if (message.settings != null && message.hasOwnProperty(\"settings\"))\n                object.settings = $root.Settings.toObject(message.settings, options);\n            if (message.locale != null && message.hasOwnProperty(\"locale\"))\n                object.locale = message.locale;\n            return object;\n        };\n    \n        /**\n         * Converts this InitialSettings to JSON.\n         * @function toJSON\n         * @memberof InitialSettings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InitialSettings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return InitialSettings;\n    })();\n    \n    $root.Device = (function() {\n    \n        /**\n         * Properties of a Device.\n         * @exports IDevice\n         * @interface IDevice\n         * @property {string|null} [platformType] Device platformType\n         * @property {string|null} [platformVersion] Device platformVersion\n         * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n         * @property {string|null} [surfaceVersion] Device surfaceVersion\n         * @property {string|null} [features] Device features\n         * @property {string|null} [capabilities] Device capabilities\n         * @property {string|null} [deviceId] Device deviceId\n         * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n         * @property {string|null} [deviceModel] Device deviceModel\n         * @property {string|null} [additionalInfo] Device additionalInfo\n         * @property {string|null} [tenant] Device tenant\n         */\n    \n        /**\n         * Constructs a new Device.\n         * @exports Device\n         * @classdesc Represents a Device.\n         * @implements IDevice\n         * @constructor\n         * @param {IDevice=} [properties] Properties to set\n         */\n        function Device(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Device platformType.\n         * @member {string} platformType\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.platformType = \"\";\n    \n        /**\n         * Device platformVersion.\n         * @member {string} platformVersion\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.platformVersion = \"\";\n    \n        /**\n         * Обязательно. Пример, SBERBOX\n         * @member {string} surface\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.surface = \"\";\n    \n        /**\n         * Device surfaceVersion.\n         * @member {string} surfaceVersion\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.surfaceVersion = \"\";\n    \n        /**\n         * Device features.\n         * @member {string} features\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.features = \"\";\n    \n        /**\n         * Device capabilities.\n         * @member {string} capabilities\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.capabilities = \"\";\n    \n        /**\n         * Device deviceId.\n         * @member {string} deviceId\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceId = \"\";\n    \n        /**\n         * Device deviceManufacturer.\n         * @member {string} deviceManufacturer\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceManufacturer = \"\";\n    \n        /**\n         * Device deviceModel.\n         * @member {string} deviceModel\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.deviceModel = \"\";\n    \n        /**\n         * Device additionalInfo.\n         * @member {string} additionalInfo\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.additionalInfo = \"\";\n    \n        /**\n         * Device tenant.\n         * @member {string} tenant\n         * @memberof Device\n         * @instance\n         */\n        Device.prototype.tenant = \"\";\n    \n        /**\n         * Creates a new Device instance using the specified properties.\n         * @function create\n         * @memberof Device\n         * @static\n         * @param {IDevice=} [properties] Properties to set\n         * @returns {Device} Device instance\n         */\n        Device.create = function create(properties) {\n            return new Device(properties);\n        };\n    \n        /**\n         * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n         * @function encode\n         * @memberof Device\n         * @static\n         * @param {IDevice} message Device message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Device.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.platformType != null && Object.hasOwnProperty.call(message, \"platformType\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.platformType);\n            if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.platformVersion);\n            if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.surface);\n            if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, \"surfaceVersion\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.surfaceVersion);\n            if (message.features != null && Object.hasOwnProperty.call(message, \"features\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.features);\n            if (message.capabilities != null && Object.hasOwnProperty.call(message, \"capabilities\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.capabilities);\n            if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.deviceId);\n            if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, \"deviceManufacturer\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.deviceManufacturer);\n            if (message.deviceModel != null && Object.hasOwnProperty.call(message, \"deviceModel\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.deviceModel);\n            if (message.additionalInfo != null && Object.hasOwnProperty.call(message, \"additionalInfo\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.additionalInfo);\n            if (message.tenant != null && Object.hasOwnProperty.call(message, \"tenant\"))\n                writer.uint32(/* id 11, wireType 2 =*/90).string(message.tenant);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Device message, length delimited. Does not implicitly {@link Device.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Device\n         * @static\n         * @param {IDevice} message Device message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Device.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Device message from the specified reader or buffer.\n         * @function decode\n         * @memberof Device\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Device} Device\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Device.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Device();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.platformType = reader.string();\n                    break;\n                case 2:\n                    message.platformVersion = reader.string();\n                    break;\n                case 3:\n                    message.surface = reader.string();\n                    break;\n                case 4:\n                    message.surfaceVersion = reader.string();\n                    break;\n                case 5:\n                    message.features = reader.string();\n                    break;\n                case 6:\n                    message.capabilities = reader.string();\n                    break;\n                case 7:\n                    message.deviceId = reader.string();\n                    break;\n                case 8:\n                    message.deviceManufacturer = reader.string();\n                    break;\n                case 9:\n                    message.deviceModel = reader.string();\n                    break;\n                case 10:\n                    message.additionalInfo = reader.string();\n                    break;\n                case 11:\n                    message.tenant = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Device message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Device\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Device} Device\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Device.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Device message.\n         * @function verify\n         * @memberof Device\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Device.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.platformType != null && message.hasOwnProperty(\"platformType\"))\n                if (!$util.isString(message.platformType))\n                    return \"platformType: string expected\";\n            if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\"))\n                if (!$util.isString(message.platformVersion))\n                    return \"platformVersion: string expected\";\n            if (message.surface != null && message.hasOwnProperty(\"surface\"))\n                if (!$util.isString(message.surface))\n                    return \"surface: string expected\";\n            if (message.surfaceVersion != null && message.hasOwnProperty(\"surfaceVersion\"))\n                if (!$util.isString(message.surfaceVersion))\n                    return \"surfaceVersion: string expected\";\n            if (message.features != null && message.hasOwnProperty(\"features\"))\n                if (!$util.isString(message.features))\n                    return \"features: string expected\";\n            if (message.capabilities != null && message.hasOwnProperty(\"capabilities\"))\n                if (!$util.isString(message.capabilities))\n                    return \"capabilities: string expected\";\n            if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n                if (!$util.isString(message.deviceId))\n                    return \"deviceId: string expected\";\n            if (message.deviceManufacturer != null && message.hasOwnProperty(\"deviceManufacturer\"))\n                if (!$util.isString(message.deviceManufacturer))\n                    return \"deviceManufacturer: string expected\";\n            if (message.deviceModel != null && message.hasOwnProperty(\"deviceModel\"))\n                if (!$util.isString(message.deviceModel))\n                    return \"deviceModel: string expected\";\n            if (message.additionalInfo != null && message.hasOwnProperty(\"additionalInfo\"))\n                if (!$util.isString(message.additionalInfo))\n                    return \"additionalInfo: string expected\";\n            if (message.tenant != null && message.hasOwnProperty(\"tenant\"))\n                if (!$util.isString(message.tenant))\n                    return \"tenant: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Device message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Device\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Device} Device\n         */\n        Device.fromObject = function fromObject(object) {\n            if (object instanceof $root.Device)\n                return object;\n            var message = new $root.Device();\n            if (object.platformType != null)\n                message.platformType = String(object.platformType);\n            if (object.platformVersion != null)\n                message.platformVersion = String(object.platformVersion);\n            if (object.surface != null)\n                message.surface = String(object.surface);\n            if (object.surfaceVersion != null)\n                message.surfaceVersion = String(object.surfaceVersion);\n            if (object.features != null)\n                message.features = String(object.features);\n            if (object.capabilities != null)\n                message.capabilities = String(object.capabilities);\n            if (object.deviceId != null)\n                message.deviceId = String(object.deviceId);\n            if (object.deviceManufacturer != null)\n                message.deviceManufacturer = String(object.deviceManufacturer);\n            if (object.deviceModel != null)\n                message.deviceModel = String(object.deviceModel);\n            if (object.additionalInfo != null)\n                message.additionalInfo = String(object.additionalInfo);\n            if (object.tenant != null)\n                message.tenant = String(object.tenant);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Device message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Device\n         * @static\n         * @param {Device} message Device\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Device.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.platformType = \"\";\n                object.platformVersion = \"\";\n                object.surface = \"\";\n                object.surfaceVersion = \"\";\n                object.features = \"\";\n                object.capabilities = \"\";\n                object.deviceId = \"\";\n                object.deviceManufacturer = \"\";\n                object.deviceModel = \"\";\n                object.additionalInfo = \"\";\n                object.tenant = \"\";\n            }\n            if (message.platformType != null && message.hasOwnProperty(\"platformType\"))\n                object.platformType = message.platformType;\n            if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\"))\n                object.platformVersion = message.platformVersion;\n            if (message.surface != null && message.hasOwnProperty(\"surface\"))\n                object.surface = message.surface;\n            if (message.surfaceVersion != null && message.hasOwnProperty(\"surfaceVersion\"))\n                object.surfaceVersion = message.surfaceVersion;\n            if (message.features != null && message.hasOwnProperty(\"features\"))\n                object.features = message.features;\n            if (message.capabilities != null && message.hasOwnProperty(\"capabilities\"))\n                object.capabilities = message.capabilities;\n            if (message.deviceId != null && message.hasOwnProperty(\"deviceId\"))\n                object.deviceId = message.deviceId;\n            if (message.deviceManufacturer != null && message.hasOwnProperty(\"deviceManufacturer\"))\n                object.deviceManufacturer = message.deviceManufacturer;\n            if (message.deviceModel != null && message.hasOwnProperty(\"deviceModel\"))\n                object.deviceModel = message.deviceModel;\n            if (message.additionalInfo != null && message.hasOwnProperty(\"additionalInfo\"))\n                object.additionalInfo = message.additionalInfo;\n            if (message.tenant != null && message.hasOwnProperty(\"tenant\"))\n                object.tenant = message.tenant;\n            return object;\n        };\n    \n        /**\n         * Converts this Device to JSON.\n         * @function toJSON\n         * @memberof Device\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Device.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Device;\n    })();\n    \n    $root.Settings = (function() {\n    \n        /**\n         * Properties of a Settings.\n         * @exports ISettings\n         * @interface ISettings\n         * @property {number|null} [dubbing] Settings dubbing\n         * @property {number|null} [echo] Settings echo\n         * @property {string|null} [ttsEngine] Settings ttsEngine\n         * @property {string|null} [asrEngine] Settings asrEngine\n         * @property {number|null} [asrAutoStop] Settings asrAutoStop\n         * @property {number|null} [devMode] Settings devMode\n         * @property {string|null} [authConnector] Settings authConnector\n         * @property {string|null} [surface] Settings surface\n         */\n    \n        /**\n         * Constructs a new Settings.\n         * @exports Settings\n         * @classdesc Represents a Settings.\n         * @implements ISettings\n         * @constructor\n         * @param {ISettings=} [properties] Properties to set\n         */\n        function Settings(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Settings dubbing.\n         * @member {number} dubbing\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.dubbing = 0;\n    \n        /**\n         * Settings echo.\n         * @member {number} echo\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.echo = 0;\n    \n        /**\n         * Settings ttsEngine.\n         * @member {string} ttsEngine\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.ttsEngine = \"\";\n    \n        /**\n         * Settings asrEngine.\n         * @member {string} asrEngine\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.asrEngine = \"\";\n    \n        /**\n         * Settings asrAutoStop.\n         * @member {number} asrAutoStop\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.asrAutoStop = 0;\n    \n        /**\n         * Settings devMode.\n         * @member {number} devMode\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.devMode = 0;\n    \n        /**\n         * Settings authConnector.\n         * @member {string} authConnector\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.authConnector = \"\";\n    \n        /**\n         * Settings surface.\n         * @member {string} surface\n         * @memberof Settings\n         * @instance\n         */\n        Settings.prototype.surface = \"\";\n    \n        /**\n         * Creates a new Settings instance using the specified properties.\n         * @function create\n         * @memberof Settings\n         * @static\n         * @param {ISettings=} [properties] Properties to set\n         * @returns {Settings} Settings instance\n         */\n        Settings.create = function create(properties) {\n            return new Settings(properties);\n        };\n    \n        /**\n         * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n         * @function encode\n         * @memberof Settings\n         * @static\n         * @param {ISettings} message Settings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Settings.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dubbing != null && Object.hasOwnProperty.call(message, \"dubbing\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.dubbing);\n            if (message.echo != null && Object.hasOwnProperty.call(message, \"echo\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.echo);\n            if (message.ttsEngine != null && Object.hasOwnProperty.call(message, \"ttsEngine\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.ttsEngine);\n            if (message.asrEngine != null && Object.hasOwnProperty.call(message, \"asrEngine\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.asrEngine);\n            if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, \"asrAutoStop\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.asrAutoStop);\n            if (message.devMode != null && Object.hasOwnProperty.call(message, \"devMode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.devMode);\n            if (message.authConnector != null && Object.hasOwnProperty.call(message, \"authConnector\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.authConnector);\n            if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.surface);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Settings message, length delimited. Does not implicitly {@link Settings.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Settings\n         * @static\n         * @param {ISettings} message Settings message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Settings.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Settings message from the specified reader or buffer.\n         * @function decode\n         * @memberof Settings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Settings} Settings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Settings.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Settings();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.dubbing = reader.int32();\n                    break;\n                case 2:\n                    message.echo = reader.int32();\n                    break;\n                case 3:\n                    message.ttsEngine = reader.string();\n                    break;\n                case 4:\n                    message.asrEngine = reader.string();\n                    break;\n                case 5:\n                    message.asrAutoStop = reader.int32();\n                    break;\n                case 6:\n                    message.devMode = reader.int32();\n                    break;\n                case 7:\n                    message.authConnector = reader.string();\n                    break;\n                case 8:\n                    message.surface = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Settings message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Settings\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Settings} Settings\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Settings.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Settings message.\n         * @function verify\n         * @memberof Settings\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Settings.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dubbing != null && message.hasOwnProperty(\"dubbing\"))\n                if (!$util.isInteger(message.dubbing))\n                    return \"dubbing: integer expected\";\n            if (message.echo != null && message.hasOwnProperty(\"echo\"))\n                if (!$util.isInteger(message.echo))\n                    return \"echo: integer expected\";\n            if (message.ttsEngine != null && message.hasOwnProperty(\"ttsEngine\"))\n                if (!$util.isString(message.ttsEngine))\n                    return \"ttsEngine: string expected\";\n            if (message.asrEngine != null && message.hasOwnProperty(\"asrEngine\"))\n                if (!$util.isString(message.asrEngine))\n                    return \"asrEngine: string expected\";\n            if (message.asrAutoStop != null && message.hasOwnProperty(\"asrAutoStop\"))\n                if (!$util.isInteger(message.asrAutoStop))\n                    return \"asrAutoStop: integer expected\";\n            if (message.devMode != null && message.hasOwnProperty(\"devMode\"))\n                if (!$util.isInteger(message.devMode))\n                    return \"devMode: integer expected\";\n            if (message.authConnector != null && message.hasOwnProperty(\"authConnector\"))\n                if (!$util.isString(message.authConnector))\n                    return \"authConnector: string expected\";\n            if (message.surface != null && message.hasOwnProperty(\"surface\"))\n                if (!$util.isString(message.surface))\n                    return \"surface: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Settings message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Settings\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Settings} Settings\n         */\n        Settings.fromObject = function fromObject(object) {\n            if (object instanceof $root.Settings)\n                return object;\n            var message = new $root.Settings();\n            if (object.dubbing != null)\n                message.dubbing = object.dubbing | 0;\n            if (object.echo != null)\n                message.echo = object.echo | 0;\n            if (object.ttsEngine != null)\n                message.ttsEngine = String(object.ttsEngine);\n            if (object.asrEngine != null)\n                message.asrEngine = String(object.asrEngine);\n            if (object.asrAutoStop != null)\n                message.asrAutoStop = object.asrAutoStop | 0;\n            if (object.devMode != null)\n                message.devMode = object.devMode | 0;\n            if (object.authConnector != null)\n                message.authConnector = String(object.authConnector);\n            if (object.surface != null)\n                message.surface = String(object.surface);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Settings message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Settings\n         * @static\n         * @param {Settings} message Settings\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Settings.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.dubbing = 0;\n                object.echo = 0;\n                object.ttsEngine = \"\";\n                object.asrEngine = \"\";\n                object.asrAutoStop = 0;\n                object.devMode = 0;\n                object.authConnector = \"\";\n                object.surface = \"\";\n            }\n            if (message.dubbing != null && message.hasOwnProperty(\"dubbing\"))\n                object.dubbing = message.dubbing;\n            if (message.echo != null && message.hasOwnProperty(\"echo\"))\n                object.echo = message.echo;\n            if (message.ttsEngine != null && message.hasOwnProperty(\"ttsEngine\"))\n                object.ttsEngine = message.ttsEngine;\n            if (message.asrEngine != null && message.hasOwnProperty(\"asrEngine\"))\n                object.asrEngine = message.asrEngine;\n            if (message.asrAutoStop != null && message.hasOwnProperty(\"asrAutoStop\"))\n                object.asrAutoStop = message.asrAutoStop;\n            if (message.devMode != null && message.hasOwnProperty(\"devMode\"))\n                object.devMode = message.devMode;\n            if (message.authConnector != null && message.hasOwnProperty(\"authConnector\"))\n                object.authConnector = message.authConnector;\n            if (message.surface != null && message.hasOwnProperty(\"surface\"))\n                object.surface = message.surface;\n            return object;\n        };\n    \n        /**\n         * Converts this Settings to JSON.\n         * @function toJSON\n         * @memberof Settings\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Settings.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Settings;\n    })();\n    \n    $root.LegacyDevice = (function() {\n    \n        /**\n         * Properties of a LegacyDevice.\n         * @exports ILegacyDevice\n         * @interface ILegacyDevice\n         * @property {string|null} [clientType] LegacyDevice clientType\n         * @property {string|null} [channel] LegacyDevice channel\n         * @property {string|null} [channelVersion] LegacyDevice channelVersion\n         * @property {string|null} [platformName] LegacyDevice platformName\n         * @property {string|null} [platformVersion] LegacyDevice platformVersion\n         * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n         * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n         */\n    \n        /**\n         * Constructs a new LegacyDevice.\n         * @exports LegacyDevice\n         * @classdesc Represents a LegacyDevice.\n         * @implements ILegacyDevice\n         * @constructor\n         * @param {ILegacyDevice=} [properties] Properties to set\n         */\n        function LegacyDevice(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * LegacyDevice clientType.\n         * @member {string} clientType\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.clientType = \"\";\n    \n        /**\n         * LegacyDevice channel.\n         * @member {string} channel\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.channel = \"\";\n    \n        /**\n         * LegacyDevice channelVersion.\n         * @member {string} channelVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.channelVersion = \"\";\n    \n        /**\n         * LegacyDevice platformName.\n         * @member {string} platformName\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.platformName = \"\";\n    \n        /**\n         * LegacyDevice platformVersion.\n         * @member {string} platformVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.platformVersion = \"\";\n    \n        /**\n         * LegacyDevice sdkVersion.\n         * @member {string} sdkVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.sdkVersion = \"\";\n    \n        /**\n         * LegacyDevice protocolVersion.\n         * @member {string} protocolVersion\n         * @memberof LegacyDevice\n         * @instance\n         */\n        LegacyDevice.prototype.protocolVersion = \"\";\n    \n        /**\n         * Creates a new LegacyDevice instance using the specified properties.\n         * @function create\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice=} [properties] Properties to set\n         * @returns {LegacyDevice} LegacyDevice instance\n         */\n        LegacyDevice.create = function create(properties) {\n            return new LegacyDevice(properties);\n        };\n    \n        /**\n         * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n         * @function encode\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LegacyDevice.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.clientType != null && Object.hasOwnProperty.call(message, \"clientType\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.clientType);\n            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);\n            if (message.channelVersion != null && Object.hasOwnProperty.call(message, \"channelVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channelVersion);\n            if (message.platformName != null && Object.hasOwnProperty.call(message, \"platformName\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.platformName);\n            if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.platformVersion);\n            if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.sdkVersion);\n            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.protocolVersion);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified LegacyDevice message, length delimited. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof LegacyDevice\n         * @static\n         * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LegacyDevice.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a LegacyDevice message from the specified reader or buffer.\n         * @function decode\n         * @memberof LegacyDevice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {LegacyDevice} LegacyDevice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LegacyDevice.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LegacyDevice();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.clientType = reader.string();\n                    break;\n                case 2:\n                    message.channel = reader.string();\n                    break;\n                case 3:\n                    message.channelVersion = reader.string();\n                    break;\n                case 4:\n                    message.platformName = reader.string();\n                    break;\n                case 5:\n                    message.platformVersion = reader.string();\n                    break;\n                case 6:\n                    message.sdkVersion = reader.string();\n                    break;\n                case 7:\n                    message.protocolVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a LegacyDevice message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof LegacyDevice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {LegacyDevice} LegacyDevice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LegacyDevice.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a LegacyDevice message.\n         * @function verify\n         * @memberof LegacyDevice\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LegacyDevice.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.clientType != null && message.hasOwnProperty(\"clientType\"))\n                if (!$util.isString(message.clientType))\n                    return \"clientType: string expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                if (!$util.isString(message.channel))\n                    return \"channel: string expected\";\n            if (message.channelVersion != null && message.hasOwnProperty(\"channelVersion\"))\n                if (!$util.isString(message.channelVersion))\n                    return \"channelVersion: string expected\";\n            if (message.platformName != null && message.hasOwnProperty(\"platformName\"))\n                if (!$util.isString(message.platformName))\n                    return \"platformName: string expected\";\n            if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\"))\n                if (!$util.isString(message.platformVersion))\n                    return \"platformVersion: string expected\";\n            if (message.sdkVersion != null && message.hasOwnProperty(\"sdkVersion\"))\n                if (!$util.isString(message.sdkVersion))\n                    return \"sdkVersion: string expected\";\n            if (message.protocolVersion != null && message.hasOwnProperty(\"protocolVersion\"))\n                if (!$util.isString(message.protocolVersion))\n                    return \"protocolVersion: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a LegacyDevice message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof LegacyDevice\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {LegacyDevice} LegacyDevice\n         */\n        LegacyDevice.fromObject = function fromObject(object) {\n            if (object instanceof $root.LegacyDevice)\n                return object;\n            var message = new $root.LegacyDevice();\n            if (object.clientType != null)\n                message.clientType = String(object.clientType);\n            if (object.channel != null)\n                message.channel = String(object.channel);\n            if (object.channelVersion != null)\n                message.channelVersion = String(object.channelVersion);\n            if (object.platformName != null)\n                message.platformName = String(object.platformName);\n            if (object.platformVersion != null)\n                message.platformVersion = String(object.platformVersion);\n            if (object.sdkVersion != null)\n                message.sdkVersion = String(object.sdkVersion);\n            if (object.protocolVersion != null)\n                message.protocolVersion = String(object.protocolVersion);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a LegacyDevice message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof LegacyDevice\n         * @static\n         * @param {LegacyDevice} message LegacyDevice\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LegacyDevice.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.clientType = \"\";\n                object.channel = \"\";\n                object.channelVersion = \"\";\n                object.platformName = \"\";\n                object.platformVersion = \"\";\n                object.sdkVersion = \"\";\n                object.protocolVersion = \"\";\n            }\n            if (message.clientType != null && message.hasOwnProperty(\"clientType\"))\n                object.clientType = message.clientType;\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = message.channel;\n            if (message.channelVersion != null && message.hasOwnProperty(\"channelVersion\"))\n                object.channelVersion = message.channelVersion;\n            if (message.platformName != null && message.hasOwnProperty(\"platformName\"))\n                object.platformName = message.platformName;\n            if (message.platformVersion != null && message.hasOwnProperty(\"platformVersion\"))\n                object.platformVersion = message.platformVersion;\n            if (message.sdkVersion != null && message.hasOwnProperty(\"sdkVersion\"))\n                object.sdkVersion = message.sdkVersion;\n            if (message.protocolVersion != null && message.hasOwnProperty(\"protocolVersion\"))\n                object.protocolVersion = message.protocolVersion;\n            return object;\n        };\n    \n        /**\n         * Converts this LegacyDevice to JSON.\n         * @function toJSON\n         * @memberof LegacyDevice\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LegacyDevice.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return LegacyDevice;\n    })();\n    \n    $root.Voice = (function() {\n    \n        /**\n         * Properties of a Voice.\n         * @exports IVoice\n         * @interface IVoice\n         * @property {Uint8Array|null} [data] Voice data\n         */\n    \n        /**\n         * Constructs a new Voice.\n         * @exports Voice\n         * @classdesc Represents a Voice.\n         * @implements IVoice\n         * @constructor\n         * @param {IVoice=} [properties] Properties to set\n         */\n        function Voice(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Voice data.\n         * @member {Uint8Array} data\n         * @memberof Voice\n         * @instance\n         */\n        Voice.prototype.data = $util.newBuffer([]);\n    \n        /**\n         * Creates a new Voice instance using the specified properties.\n         * @function create\n         * @memberof Voice\n         * @static\n         * @param {IVoice=} [properties] Properties to set\n         * @returns {Voice} Voice instance\n         */\n        Voice.create = function create(properties) {\n            return new Voice(properties);\n        };\n    \n        /**\n         * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n         * @function encode\n         * @memberof Voice\n         * @static\n         * @param {IVoice} message Voice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Voice.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Voice message, length delimited. Does not implicitly {@link Voice.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Voice\n         * @static\n         * @param {IVoice} message Voice message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Voice.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Voice message from the specified reader or buffer.\n         * @function decode\n         * @memberof Voice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Voice} Voice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Voice.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Voice();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Voice message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Voice\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Voice} Voice\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Voice.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Voice message.\n         * @function verify\n         * @memberof Voice\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Voice.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                    return \"data: buffer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Voice message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Voice\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Voice} Voice\n         */\n        Voice.fromObject = function fromObject(object) {\n            if (object instanceof $root.Voice)\n                return object;\n            var message = new $root.Voice();\n            if (object.data != null)\n                if (typeof object.data === \"string\")\n                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                else if (object.data.length)\n                    message.data = object.data;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Voice message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Voice\n         * @static\n         * @param {Voice} message Voice\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Voice.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.data = \"\";\n                else {\n                    object.data = [];\n                    if (options.bytes !== Array)\n                        object.data = $util.newBuffer(object.data);\n                }\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n            return object;\n        };\n    \n        /**\n         * Converts this Voice to JSON.\n         * @function toJSON\n         * @memberof Voice\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Voice.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Voice;\n    })();\n    \n    $root.Text = (function() {\n    \n        /**\n         * Properties of a Text.\n         * @exports IText\n         * @interface IText\n         * @property {string|null} [data] Text data\n         * @property {string|null} [type] Text type\n         */\n    \n        /**\n         * Constructs a new Text.\n         * @exports Text\n         * @classdesc Represents a Text.\n         * @implements IText\n         * @constructor\n         * @param {IText=} [properties] Properties to set\n         */\n        function Text(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Text data.\n         * @member {string} data\n         * @memberof Text\n         * @instance\n         */\n        Text.prototype.data = \"\";\n    \n        /**\n         * Text type.\n         * @member {string} type\n         * @memberof Text\n         * @instance\n         */\n        Text.prototype.type = \"\";\n    \n        /**\n         * Creates a new Text instance using the specified properties.\n         * @function create\n         * @memberof Text\n         * @static\n         * @param {IText=} [properties] Properties to set\n         * @returns {Text} Text instance\n         */\n        Text.create = function create(properties) {\n            return new Text(properties);\n        };\n    \n        /**\n         * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n         * @function encode\n         * @memberof Text\n         * @static\n         * @param {IText} message Text message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Text.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Text message, length delimited. Does not implicitly {@link Text.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Text\n         * @static\n         * @param {IText} message Text message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Text.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Text message from the specified reader or buffer.\n         * @function decode\n         * @memberof Text\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Text} Text\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Text.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Text();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.string();\n                    break;\n                case 2:\n                    message.type = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Text message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Text\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Text} Text\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Text.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Text message.\n         * @function verify\n         * @memberof Text\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Text.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!$util.isString(message.data))\n                    return \"data: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Text message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Text\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Text} Text\n         */\n        Text.fromObject = function fromObject(object) {\n            if (object instanceof $root.Text)\n                return object;\n            var message = new $root.Text();\n            if (object.data != null)\n                message.data = String(object.data);\n            if (object.type != null)\n                message.type = String(object.type);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Text message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Text\n         * @static\n         * @param {Text} message Text\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Text.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.data = \"\";\n                object.type = \"\";\n            }\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            return object;\n        };\n    \n        /**\n         * Converts this Text to JSON.\n         * @function toJSON\n         * @memberof Text\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Text.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Text;\n    })();\n    \n    $root.SystemMessage = (function() {\n    \n        /**\n         * Properties of a SystemMessage.\n         * @exports ISystemMessage\n         * @interface ISystemMessage\n         * @property {string|null} [data] SystemMessage data\n         */\n    \n        /**\n         * Constructs a new SystemMessage.\n         * @exports SystemMessage\n         * @classdesc Represents a SystemMessage.\n         * @implements ISystemMessage\n         * @constructor\n         * @param {ISystemMessage=} [properties] Properties to set\n         */\n        function SystemMessage(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * SystemMessage data.\n         * @member {string} data\n         * @memberof SystemMessage\n         * @instance\n         */\n        SystemMessage.prototype.data = \"\";\n    \n        /**\n         * Creates a new SystemMessage instance using the specified properties.\n         * @function create\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage=} [properties] Properties to set\n         * @returns {SystemMessage} SystemMessage instance\n         */\n        SystemMessage.create = function create(properties) {\n            return new SystemMessage(properties);\n        };\n    \n        /**\n         * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n         * @function encode\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage} message SystemMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified SystemMessage message, length delimited. Does not implicitly {@link SystemMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof SystemMessage\n         * @static\n         * @param {ISystemMessage} message SystemMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a SystemMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof SystemMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {SystemMessage} SystemMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SystemMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a SystemMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof SystemMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {SystemMessage} SystemMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a SystemMessage message.\n         * @function verify\n         * @memberof SystemMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SystemMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!$util.isString(message.data))\n                    return \"data: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a SystemMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof SystemMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {SystemMessage} SystemMessage\n         */\n        SystemMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.SystemMessage)\n                return object;\n            var message = new $root.SystemMessage();\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a SystemMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof SystemMessage\n         * @static\n         * @param {SystemMessage} message SystemMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SystemMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.data = \"\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n    \n        /**\n         * Converts this SystemMessage to JSON.\n         * @function toJSON\n         * @memberof SystemMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SystemMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return SystemMessage;\n    })();\n    \n    $root.Status = (function() {\n    \n        /**\n         * Properties of a Status.\n         * @exports IStatus\n         * @interface IStatus\n         * @property {number|null} [code] Status code\n         * @property {string|null} [description] Status description\n         * @property {string|null} [technicalDescription] Status technicalDescription\n         */\n    \n        /**\n         * Constructs a new Status.\n         * @exports Status\n         * @classdesc Represents a Status.\n         * @implements IStatus\n         * @constructor\n         * @param {IStatus=} [properties] Properties to set\n         */\n        function Status(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Status code.\n         * @member {number} code\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.code = 0;\n    \n        /**\n         * Status description.\n         * @member {string} description\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.description = \"\";\n    \n        /**\n         * Status technicalDescription.\n         * @member {string} technicalDescription\n         * @memberof Status\n         * @instance\n         */\n        Status.prototype.technicalDescription = \"\";\n    \n        /**\n         * Creates a new Status instance using the specified properties.\n         * @function create\n         * @memberof Status\n         * @static\n         * @param {IStatus=} [properties] Properties to set\n         * @returns {Status} Status instance\n         */\n        Status.create = function create(properties) {\n            return new Status(properties);\n        };\n    \n        /**\n         * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n         * @function encode\n         * @memberof Status\n         * @static\n         * @param {IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);\n            if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n            if (message.technicalDescription != null && Object.hasOwnProperty.call(message, \"technicalDescription\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.technicalDescription);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Status message, length delimited. Does not implicitly {@link Status.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Status\n         * @static\n         * @param {IStatus} message Status message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Status.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Status message from the specified reader or buffer.\n         * @function decode\n         * @memberof Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Status();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.code = reader.int32();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.technicalDescription = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Status message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Status\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Status} Status\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Status.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Status message.\n         * @function verify\n         * @memberof Status\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Status.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                if (!$util.isInteger(message.code))\n                    return \"code: integer expected\";\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                if (!$util.isString(message.description))\n                    return \"description: string expected\";\n            if (message.technicalDescription != null && message.hasOwnProperty(\"technicalDescription\"))\n                if (!$util.isString(message.technicalDescription))\n                    return \"technicalDescription: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Status message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Status\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Status} Status\n         */\n        Status.fromObject = function fromObject(object) {\n            if (object instanceof $root.Status)\n                return object;\n            var message = new $root.Status();\n            if (object.code != null)\n                message.code = object.code | 0;\n            if (object.description != null)\n                message.description = String(object.description);\n            if (object.technicalDescription != null)\n                message.technicalDescription = String(object.technicalDescription);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Status message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Status\n         * @static\n         * @param {Status} message Status\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Status.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.code = 0;\n                object.description = \"\";\n                object.technicalDescription = \"\";\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n                object.code = message.code;\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                object.description = message.description;\n            if (message.technicalDescription != null && message.hasOwnProperty(\"technicalDescription\"))\n                object.technicalDescription = message.technicalDescription;\n            return object;\n        };\n    \n        /**\n         * Converts this Status to JSON.\n         * @function toJSON\n         * @memberof Status\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Status.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Status;\n    })();\n    \n    $root.Bytes = (function() {\n    \n        /**\n         * Properties of a Bytes.\n         * @exports IBytes\n         * @interface IBytes\n         * @property {Uint8Array|null} [data] Bytes data\n         * @property {string|null} [desc] Bytes desc\n         */\n    \n        /**\n         * Constructs a new Bytes.\n         * @exports Bytes\n         * @classdesc Represents a Bytes.\n         * @implements IBytes\n         * @constructor\n         * @param {IBytes=} [properties] Properties to set\n         */\n        function Bytes(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Bytes data.\n         * @member {Uint8Array} data\n         * @memberof Bytes\n         * @instance\n         */\n        Bytes.prototype.data = $util.newBuffer([]);\n    \n        /**\n         * Bytes desc.\n         * @member {string} desc\n         * @memberof Bytes\n         * @instance\n         */\n        Bytes.prototype.desc = \"\";\n    \n        /**\n         * Creates a new Bytes instance using the specified properties.\n         * @function create\n         * @memberof Bytes\n         * @static\n         * @param {IBytes=} [properties] Properties to set\n         * @returns {Bytes} Bytes instance\n         */\n        Bytes.create = function create(properties) {\n            return new Bytes(properties);\n        };\n    \n        /**\n         * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n         * @function encode\n         * @memberof Bytes\n         * @static\n         * @param {IBytes} message Bytes message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Bytes.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);\n            if (message.desc != null && Object.hasOwnProperty.call(message, \"desc\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.desc);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Bytes message, length delimited. Does not implicitly {@link Bytes.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Bytes\n         * @static\n         * @param {IBytes} message Bytes message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Bytes.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Bytes message from the specified reader or buffer.\n         * @function decode\n         * @memberof Bytes\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Bytes} Bytes\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Bytes.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bytes();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                case 2:\n                    message.desc = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Bytes message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Bytes\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Bytes} Bytes\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Bytes.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Bytes message.\n         * @function verify\n         * @memberof Bytes\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Bytes.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\n                    return \"data: buffer expected\";\n            if (message.desc != null && message.hasOwnProperty(\"desc\"))\n                if (!$util.isString(message.desc))\n                    return \"desc: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Bytes message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Bytes\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Bytes} Bytes\n         */\n        Bytes.fromObject = function fromObject(object) {\n            if (object instanceof $root.Bytes)\n                return object;\n            var message = new $root.Bytes();\n            if (object.data != null)\n                if (typeof object.data === \"string\")\n                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\n                else if (object.data.length)\n                    message.data = object.data;\n            if (object.desc != null)\n                message.desc = String(object.desc);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Bytes message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Bytes\n         * @static\n         * @param {Bytes} message Bytes\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Bytes.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.data = \"\";\n                else {\n                    object.data = [];\n                    if (options.bytes !== Array)\n                        object.data = $util.newBuffer(object.data);\n                }\n                object.desc = \"\";\n            }\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\n            if (message.desc != null && message.hasOwnProperty(\"desc\"))\n                object.desc = message.desc;\n            return object;\n        };\n    \n        /**\n         * Converts this Bytes to JSON.\n         * @function toJSON\n         * @memberof Bytes\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Bytes.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Bytes;\n    })();\n    \n    $root.DevContext = (function() {\n    \n        /**\n         * Properties of a DevContext.\n         * @exports IDevContext\n         * @interface IDevContext\n         * @property {string|null} [name] DevContext name\n         * @property {number|Long|null} [timestampMs] DevContext timestampMs\n         * @property {string|null} [data] DevContext data\n         */\n    \n        /**\n         * Constructs a new DevContext.\n         * @exports DevContext\n         * @classdesc Represents a DevContext.\n         * @implements IDevContext\n         * @constructor\n         * @param {IDevContext=} [properties] Properties to set\n         */\n        function DevContext(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * DevContext name.\n         * @member {string} name\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.name = \"\";\n    \n        /**\n         * DevContext timestampMs.\n         * @member {number|Long} timestampMs\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n    \n        /**\n         * DevContext data.\n         * @member {string} data\n         * @memberof DevContext\n         * @instance\n         */\n        DevContext.prototype.data = \"\";\n    \n        /**\n         * Creates a new DevContext instance using the specified properties.\n         * @function create\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext=} [properties] Properties to set\n         * @returns {DevContext} DevContext instance\n         */\n        DevContext.create = function create(properties) {\n            return new DevContext(properties);\n        };\n    \n        /**\n         * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n         * @function encode\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext} message DevContext message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DevContext.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.timestampMs != null && Object.hasOwnProperty.call(message, \"timestampMs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestampMs);\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.data);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified DevContext message, length delimited. Does not implicitly {@link DevContext.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DevContext\n         * @static\n         * @param {IDevContext} message DevContext message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DevContext.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a DevContext message from the specified reader or buffer.\n         * @function decode\n         * @memberof DevContext\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DevContext} DevContext\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DevContext.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DevContext();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.timestampMs = reader.int64();\n                    break;\n                case 3:\n                    message.data = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a DevContext message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DevContext\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DevContext} DevContext\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DevContext.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a DevContext message.\n         * @function verify\n         * @memberof DevContext\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DevContext.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.timestampMs != null && message.hasOwnProperty(\"timestampMs\"))\n                if (!$util.isInteger(message.timestampMs) && !(message.timestampMs && $util.isInteger(message.timestampMs.low) && $util.isInteger(message.timestampMs.high)))\n                    return \"timestampMs: integer|Long expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!$util.isString(message.data))\n                    return \"data: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a DevContext message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DevContext\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DevContext} DevContext\n         */\n        DevContext.fromObject = function fromObject(object) {\n            if (object instanceof $root.DevContext)\n                return object;\n            var message = new $root.DevContext();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.timestampMs != null)\n                if ($util.Long)\n                    (message.timestampMs = $util.Long.fromValue(object.timestampMs)).unsigned = false;\n                else if (typeof object.timestampMs === \"string\")\n                    message.timestampMs = parseInt(object.timestampMs, 10);\n                else if (typeof object.timestampMs === \"number\")\n                    message.timestampMs = object.timestampMs;\n                else if (typeof object.timestampMs === \"object\")\n                    message.timestampMs = new $util.LongBits(object.timestampMs.low >>> 0, object.timestampMs.high >>> 0).toNumber();\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a DevContext message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DevContext\n         * @static\n         * @param {DevContext} message DevContext\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DevContext.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestampMs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestampMs = options.longs === String ? \"0\" : 0;\n                object.data = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.timestampMs != null && message.hasOwnProperty(\"timestampMs\"))\n                if (typeof message.timestampMs === \"number\")\n                    object.timestampMs = options.longs === String ? String(message.timestampMs) : message.timestampMs;\n                else\n                    object.timestampMs = options.longs === String ? $util.Long.prototype.toString.call(message.timestampMs) : options.longs === Number ? new $util.LongBits(message.timestampMs.low >>> 0, message.timestampMs.high >>> 0).toNumber() : message.timestampMs;\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n    \n        /**\n         * Converts this DevContext to JSON.\n         * @function toJSON\n         * @memberof DevContext\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DevContext.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return DevContext;\n    })();\n    \n    $root.Cancel = (function() {\n    \n        /**\n         * Properties of a Cancel.\n         * @exports ICancel\n         * @interface ICancel\n         */\n    \n        /**\n         * Constructs a new Cancel.\n         * @exports Cancel\n         * @classdesc Represents a Cancel.\n         * @implements ICancel\n         * @constructor\n         * @param {ICancel=} [properties] Properties to set\n         */\n        function Cancel(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Creates a new Cancel instance using the specified properties.\n         * @function create\n         * @memberof Cancel\n         * @static\n         * @param {ICancel=} [properties] Properties to set\n         * @returns {Cancel} Cancel instance\n         */\n        Cancel.create = function create(properties) {\n            return new Cancel(properties);\n        };\n    \n        /**\n         * Encodes the specified Cancel message. Does not implicitly {@link Cancel.verify|verify} messages.\n         * @function encode\n         * @memberof Cancel\n         * @static\n         * @param {ICancel} message Cancel message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Cancel.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Cancel message, length delimited. Does not implicitly {@link Cancel.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Cancel\n         * @static\n         * @param {ICancel} message Cancel message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Cancel.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Cancel message from the specified reader or buffer.\n         * @function decode\n         * @memberof Cancel\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Cancel} Cancel\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Cancel.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Cancel();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Cancel message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Cancel\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Cancel} Cancel\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Cancel.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Cancel message.\n         * @function verify\n         * @memberof Cancel\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Cancel.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Cancel message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Cancel\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Cancel} Cancel\n         */\n        Cancel.fromObject = function fromObject(object) {\n            if (object instanceof $root.Cancel)\n                return object;\n            return new $root.Cancel();\n        };\n    \n        /**\n         * Creates a plain object from a Cancel message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Cancel\n         * @static\n         * @param {Cancel} message Cancel\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Cancel.toObject = function toObject() {\n            return {};\n        };\n    \n        /**\n         * Converts this Cancel to JSON.\n         * @function toJSON\n         * @memberof Cancel\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Cancel.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Cancel;\n    })();\n\n    return $root;\n});\n});\n\nvar VpsVersion;\n(function (VpsVersion) {\n    VpsVersion[VpsVersion[\"1.0\"] = 1] = \"1.0\";\n    VpsVersion[VpsVersion[\"2.0\"] = 2] = \"2.0\";\n    VpsVersion[VpsVersion[\"3.0\"] = 3] = \"3.0\";\n    VpsVersion[VpsVersion[\"4.0\"] = 4] = \"4.0\";\n    VpsVersion[VpsVersion[\"5.0\"] = 5] = \"5.0\";\n})(VpsVersion || (VpsVersion = {}));\nvar MessageNames = {\n    ANSWER_TO_USER: 'ANSWER_TO_USER',\n    STT: 'STT',\n    MUSIC_RECOGNITION: 'MUSIC_RECOGNITION',\n    DO_NOTHING: 'DO_NOTHING',\n};\n\nexport { MessageNames as M, VpsVersion as V, __spreadArrays as _, __rest as a, __assign as b, createNanoEvents as c, __awaiter as d, __generator as e, createCommonjsModule as f, commonjsGlobal as g, commonjsRequire as h, minimal$1 as m, proto as p };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}