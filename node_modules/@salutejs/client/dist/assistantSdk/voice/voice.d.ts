import { createClient } from '../client/client';
import { AppInfo, EmotionId, OriginalMessageType } from '../../typings';
export interface TtsEvent {
    status: 'start' | 'stop';
    messageId: number;
    appInfo: AppInfo;
}
export declare const createVoice: (client: ReturnType<typeof createClient>, emit: (event: {
    asr?: {
        text: string;
        last?: boolean;
        mid?: OriginalMessageType['messageId'];
    };
    emotion?: EmotionId;
    tts?: TtsEvent;
}) => void, onReady?: (() => void) | undefined) => {
    destroy: () => void;
    change: (nextSettings: Partial<Pick<{
        change: (setts: Partial<{
            disableDubbing: boolean;
            disableListening: boolean;
        }>) => void;
        startAutoApplying: (voicePlayer?: {
            append: (data: Uint8Array, trackId: string, last?: boolean) => void;
            setActive(value: boolean): void;
            on: <K extends "play" | "end">(event: K, cb: import("./player/voicePlayer").EventsType[K]) => () => void;
            stop: () => void;
        } | undefined) => () => void;
        readonly disableDubbing: boolean;
        readonly disableListening: boolean;
    }, "disableDubbing" | "disableListening">>) => void;
    listen: ({ begin }?: {
        begin?: ArrayBuffer[] | undefined;
    }) => Promise<void>;
    shazam: () => void;
    stop: () => void;
    stopPlaying: () => void;
};
//# sourceMappingURL=voice.d.ts.map